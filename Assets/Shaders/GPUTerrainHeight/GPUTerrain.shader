Shader "GPUTerrain"
    {
        Properties
        {
            UVXZScale("UVXZScale", Float) = 1
            heightTransition("heightTransition", Float) = 0
            [NoScaleOffset]BaseTex("BaseTex", 2D) = "white" {}
            [NoScaleOffset]BaseNormal("BaseNormal", 2D) = "white" {}
            [NoScaleOffset]BaseMask("BaseMask", 2D) = "white" {}
            Tiling_Offset("Tiling_Offset", Vector) = (1, 1, 0, 0)
            [NoScaleOffset]Layer0("Layer0", 2D) = "white" {}
            HeightRemap0("HeightRemap0", Vector) = (-1, 1, 0, 0)
            Tiling_Offset0("Tiling_Offset0", Vector) = (1, 1, 0, 0)
            HeightRemap("HeightRemap", Vector) = (-1, 1, 0, 0)
            [NoScaleOffset]LayerNormal0("LayerNormal0", 2D) = "white" {}
            [NoScaleOffset]LayerMask0("LayerMask0", 2D) = "white" {}
            [NoScaleOffset]Layer1("Layer1", 2D) = "white" {}
            [NoScaleOffset]LayerNormal1("LayerNormal1", 2D) = "white" {}
            [NoScaleOffset]LayerMask1("LayerMask1", 2D) = "white" {}
            Tiling_Offset1("Tiling_Offset1", Vector) = (1, 1, 0, 0)
            HeightRemap1("HeightRemap1", Vector) = (-1, 1, 0, 0)
            HeightRemap3("HeightRemap3", Vector) = (-1, 1, 0, 0)
            Tiling_Offset3("Tiling_Offset3", Vector) = (1, 1, 0, 0)
            [NoScaleOffset]Layer2("Layer2", 2D) = "white" {}
            [NoScaleOffset]LayerMask2("LayerMask2", 2D) = "white" {}
            [NoScaleOffset]LayerNormal2("LayerNormal2", 2D) = "white" {}
            HeightRemap2("HeightRemap2", Vector) = (-1, 1, 0, 0)
            Tiling_Offset2("Tiling_Offset2", Vector) = (1, 1, 0, 0)
            [NoScaleOffset]Layer3("Layer3", 2D) = "white" {}
            [NoScaleOffset]LayerNormal3("LayerNormal3", 2D) = "white" {}
            [NoScaleOffset]LayerMask3("LayerMask3", 2D) = "white" {}
            [NoScaleOffset]SlopeTex("SlopeTex", 2D) = "white" {}
            [NoScaleOffset]SlopeNormal("SlopeNormal", 2D) = "white" {}
            [NoScaleOffset]SlopeMask("SlopeMask", 2D) = "white" {}
            Tiling_Offset4("Tiling_Offset4", Vector) = (0, 0, 0, 0)
            HeightRemap4("HeightRemap4", Vector) = (-1, 1, 0, 0)
            SlopeRemap("SlopeRemap", Vector) = (0, 1, 0, 0)
            SlopePow("SlopePow", Float) = 1
            [HideInInspector]_EmissionColor("Color", Color) = (1, 1, 1, 1)
            [HideInInspector]_RenderQueueType("Float", Float) = 1
            [HideInInspector][ToggleUI]_AddPrecomputedVelocity("Boolean", Float) = 0
            [HideInInspector][ToggleUI]_DepthOffsetEnable("Boolean", Float) = 0
            [HideInInspector][ToggleUI]_ConservativeDepthOffsetEnable("Boolean", Float) = 0
            [HideInInspector][ToggleUI]_TransparentWritingMotionVec("Boolean", Float) = 0
            [HideInInspector][ToggleUI]_AlphaCutoffEnable("Boolean", Float) = 0
            [HideInInspector]_TransparentSortPriority("_TransparentSortPriority", Float) = 0
            [HideInInspector][ToggleUI]_UseShadowThreshold("Boolean", Float) = 0
            [HideInInspector][ToggleUI]_DoubleSidedEnable("Boolean", Float) = 0
            [HideInInspector][Enum(Flip, 0, Mirror, 1, None, 2)]_DoubleSidedNormalMode("Float", Float) = 2
            [HideInInspector]_DoubleSidedConstants("Vector4", Vector) = (1, 1, -1, 0)
            [HideInInspector][Enum(Auto, 0, On, 1, Off, 2)]_DoubleSidedGIMode("Float", Float) = 0
            [HideInInspector][ToggleUI]_TransparentDepthPrepassEnable("Boolean", Float) = 0
            [HideInInspector][ToggleUI]_TransparentDepthPostpassEnable("Boolean", Float) = 0
            [HideInInspector]_SurfaceType("Float", Float) = 0
            [HideInInspector]_BlendMode("Float", Float) = 0
            [HideInInspector]_SrcBlend("Float", Float) = 1
            [HideInInspector]_DstBlend("Float", Float) = 0
            [HideInInspector]_AlphaSrcBlend("Float", Float) = 1
            [HideInInspector]_AlphaDstBlend("Float", Float) = 0
            [HideInInspector][ToggleUI]_AlphaToMask("Boolean", Float) = 0
            [HideInInspector][ToggleUI]_AlphaToMaskInspectorValue("Boolean", Float) = 0
            [HideInInspector][ToggleUI]_ZWrite("Boolean", Float) = 1
            [HideInInspector][ToggleUI]_TransparentZWrite("Boolean", Float) = 0
            [HideInInspector]_CullMode("Float", Float) = 2
            [HideInInspector][ToggleUI]_EnableFogOnTransparent("Boolean", Float) = 1
            [HideInInspector]_CullModeForward("Float", Float) = 2
            [HideInInspector][Enum(Front, 1, Back, 2)]_TransparentCullMode("Float", Float) = 2
            [HideInInspector][Enum(UnityEditor.Rendering.HighDefinition.OpaqueCullMode)]_OpaqueCullMode("Float", Float) = 2
            [HideInInspector]_ZTestDepthEqualForOpaque("Float", Int) = 4
            [HideInInspector][Enum(UnityEngine.Rendering.CompareFunction)]_ZTestTransparent("Float", Float) = 4
            [HideInInspector][ToggleUI]_TransparentBackfaceEnable("Boolean", Float) = 0
            [HideInInspector][ToggleUI]_RequireSplitLighting("Boolean", Float) = 0
            [HideInInspector][ToggleUI]_ReceivesSSR("Boolean", Float) = 0
            [HideInInspector][ToggleUI]_ReceivesSSRTransparent("Boolean", Float) = 0
            [HideInInspector][ToggleUI]_EnableBlendModePreserveSpecularLighting("Boolean", Float) = 1
            [HideInInspector][ToggleUI]_SupportDecals("Boolean", Float) = 1
            [HideInInspector]_StencilRef("Float", Int) = 0
            [HideInInspector]_StencilWriteMask("Float", Int) = 6
            [HideInInspector]_StencilRefDepth("Float", Int) = 0
            [HideInInspector]_StencilWriteMaskDepth("Float", Int) = 8
            [HideInInspector]_StencilRefMV("Float", Int) = 32
            [HideInInspector]_StencilWriteMaskMV("Float", Int) = 40
            [HideInInspector]_StencilRefDistortionVec("Float", Int) = 4
            [HideInInspector]_StencilWriteMaskDistortionVec("Float", Int) = 4
            [HideInInspector]_StencilWriteMaskGBuffer("Float", Int) = 14
            [HideInInspector]_StencilRefGBuffer("Float", Int) = 2
            [HideInInspector]_ZTestGBuffer("Float", Int) = 4
            [HideInInspector][ToggleUI]_RayTracing("Boolean", Float) = 0
            [HideInInspector][Enum(None, 0, Box, 1, Sphere, 2, Thin, 3)]_RefractionModel("Float", Float) = 0
            [HideInInspector][ToggleUI]_ForceForwardEmissive("Boolean", Float) = 0
            [HideInInspector][NoScaleOffset]unity_Lightmaps("unity_Lightmaps", 2DArray) = "" {}
            [HideInInspector][NoScaleOffset]unity_LightmapsInd("unity_LightmapsInd", 2DArray) = "" {}
            [HideInInspector][NoScaleOffset]unity_ShadowMasks("unity_ShadowMasks", 2DArray) = "" {}
        }
        SubShader
        {
            Tags
            {
                "RenderPipeline"="HDRenderPipeline"
                "RenderType"="HDLitShader"
                "Queue"="Geometry+225"
                "ShaderGraphShader"="true"
                "ShaderGraphTargetId"="HDLitSubTarget"
            }
            Pass
            {
                Name "ShadowCaster"
                Tags
                {
                    "LightMode" = "ShadowCaster"
                }
    
                // Render State
                Cull [_CullMode]
                ZWrite On
                ColorMask 0
                ZClip [_ZClip]
    
                // Debug
                // <None>
    
                // --------------------------------------------------
                // Pass
    
                HLSLPROGRAM
    
                // Pragmas
                #pragma instancing_options renderinglayer
                #pragma target 4.5
                #pragma vertex Vert
                #pragma fragment Frag
                #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
                #pragma multi_compile_instancing
                #pragma instancing_options procedural:setupProcedural
    
                // Keywords
                #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
                #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
                #pragma shader_feature_local _ _DOUBLESIDED_ON
                #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
                #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
                #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
                #pragma shader_feature_local_fragment _ _DISABLE_DECALS
                #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
                #pragma shader_feature_local_fragment _ _DISABLE_SSR
                #pragma shader_feature_local_raytracing _ _DISABLE_SSR
                #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
                #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
                #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
                #pragma shader_feature _ _FORCE_FORWARD_EMISSIVE
                // GraphKeywords: <None>
    
                // For custom interpolators to inject a substruct definition before FragInputs definition,
                // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
                struct CustomInterpolators
                {
                };
                #define USE_CUSTOMINTERP_SUBSTRUCT
                
    
    
                // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
            	#ifdef HAVE_VFX_MODIFICATION
            	struct FragInputsVFX
                {
                    /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
                };
                #endif
    
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
            	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
    
                // --------------------------------------------------
                // Defines
    
                // Attribute
                #define ATTRIBUTES_NEED_NORMAL
                #define ATTRIBUTES_NEED_TANGENT
    
                #define HAVE_MESH_MODIFICATION
    
    
                #define SHADERPASS SHADERPASS_SHADOWS
    
    
                // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
                // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
                // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
                // to still allow us to rename the field and keyword of this node without breaking existing code.
                #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
                #endif
    
                #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
                #endif
                // end
    
                #ifndef SHADER_UNLIT
                // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
                // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
                #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                    #define VARYINGS_NEED_CULLFACE
                #endif
                #endif
    
                // Specific Material Define
            #define _SPECULAR_OCCLUSION_FROM_AO 1
                #define _ENERGY_CONSERVING_SPECULAR 1
                
                // If we use subsurface scattering, enable output split lighting (for forward pass)
                #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
                    #define OUTPUT_SPLIT_LIGHTING
                #endif
                
                // This shader support recursive rendering for raytracing
                #define HAVE_RECURSIVE_RENDERING
                
                // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
    
                // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
                // we should have a code like this:
                // if !defined(_DISABLE_SSR_TRANSPARENT)
                // pragma multi_compile _ WRITE_NORMAL_BUFFER
                // endif
                // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
                // it based on if SSR transparent in frame settings and not (and stripper can strip it).
                // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
                // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
                // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
                #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                    #define WRITE_NORMAL_BUFFER
                #endif
                #endif
    
                #ifndef DEBUG_DISPLAY
                    // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                    // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                    #if !defined(_SURFACE_TYPE_TRANSPARENT)
                        #if SHADERPASS == SHADERPASS_FORWARD
                        #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                        #elif SHADERPASS == SHADERPASS_GBUFFER
                        #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                        #endif
                    #endif
                #endif
    
                // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
                #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                    #define _DEFERRED_CAPABLE_MATERIAL
                #endif
    
                // Translate transparent motion vector define
                #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                    #define _WRITE_TRANSPARENT_MOTION_VECTOR
                #endif
    
                // Dots Instancing
                // DotsInstancingOptions: <None>
    
                // Various properties
    
                // HybridV1InjectedBuiltinProperties: <None>
    
                // -- Graph Properties
                CBUFFER_START(UnityPerMaterial)
                float2 HeightRemap3;
                float2 HeightRemap2;
                float4 Tiling_Offset3;
                float4 Tiling_Offset0;
                float2 HeightRemap4;
                float4 Tiling_Offset2;
                float2 HeightRemap0;
                float4 LayerMask3_TexelSize;
                float4 LayerMask2_TexelSize;
                float4 LayerNormal3_TexelSize;
                float4 LayerNormal2_TexelSize;
                float2 HeightRemap1;
                float4 Tiling_Offset1;
                float4 Layer0_TexelSize;
                float4 Layer1_TexelSize;
                float4 Layer2_TexelSize;
                float4 Layer3_TexelSize;
                float UVXZScale;
                float4 LayerNormal1_TexelSize;
                float4 LayerNormal0_TexelSize;
                float4 LayerMask1_TexelSize;
                float4 LayerMask0_TexelSize;
                float heightTransition;
                float4 BaseTex_TexelSize;
                float4 BaseNormal_TexelSize;
                float4 BaseMask_TexelSize;
                float4 Tiling_Offset;
                float2 HeightRemap;
                float4 SlopeTex_TexelSize;
                float4 SlopeNormal_TexelSize;
                float4 SlopeMask_TexelSize;
                float4 Tiling_Offset4;
                float2 SlopeRemap;
                float SlopePow;
                float4 _EmissionColor;
                float _UseShadowThreshold;
                float4 _DoubleSidedConstants;
                float _BlendMode;
                float _EnableBlendModePreserveSpecularLighting;
                float _RayTracing;
                float _RefractionModel;
                CBUFFER_END
                
                // Object and Global properties
                SAMPLER(SamplerState_Linear_Repeat);
                TEXTURE2D(LayerMask3);
                SAMPLER(samplerLayerMask3);
                TEXTURE2D(LayerMask2);
                SAMPLER(samplerLayerMask2);
                TEXTURE2D(LayerNormal3);
                SAMPLER(samplerLayerNormal3);
                TEXTURE2D(LayerNormal2);
                SAMPLER(samplerLayerNormal2);
                TEXTURE2D(Layer0);
                SAMPLER(samplerLayer0);
                TEXTURE2D(Layer1);
                SAMPLER(samplerLayer1);
                TEXTURE2D(Layer2);
                SAMPLER(samplerLayer2);
                TEXTURE2D(Layer3);
                SAMPLER(samplerLayer3);
                TEXTURE2D(LayerNormal1);
                SAMPLER(samplerLayerNormal1);
                TEXTURE2D(LayerNormal0);
                SAMPLER(samplerLayerNormal0);
                TEXTURE2D(LayerMask1);
                SAMPLER(samplerLayerMask1);
                TEXTURE2D(LayerMask0);
                SAMPLER(samplerLayerMask0);
                TEXTURE2D(BaseTex);
                SAMPLER(samplerBaseTex);
                TEXTURE2D(BaseNormal);
                SAMPLER(samplerBaseNormal);
                TEXTURE2D(BaseMask);
                SAMPLER(samplerBaseMask);
                TEXTURE2D(SlopeTex);
                SAMPLER(samplerSlopeTex);
                TEXTURE2D(SlopeNormal);
                SAMPLER(samplerSlopeNormal);
                TEXTURE2D(SlopeMask);
                SAMPLER(samplerSlopeMask);
    
                // -- Property used by ScenePickingPass
                #ifdef SCENEPICKINGPASS
                float4 _SelectionID;
                #endif
    
                // -- Properties used by SceneSelectionPass
                #ifdef SCENESELECTIONPASS
                int _ObjectId;
                int _PassValue;
                #endif
    
                // Includes
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
            	#include "Assets/Shaders/GPUTerrainHeight/TerrainVertexPosition.hlsl"
    
                // --------------------------------------------------
                // Structs and Packing
    
                struct AttributesMesh
                {
                     float3 positionOS : POSITION;
                     float3 normalOS : NORMAL;
                     float4 tangentOS : TANGENT;
                    #if UNITY_ANY_INSTANCING_ENABLED
                     uint instanceID : INSTANCEID_SEMANTIC;
                    #endif
                };
                struct VaryingsMeshToPS
                {
                    SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
                    #if UNITY_ANY_INSTANCING_ENABLED
                     uint instanceID : CUSTOM_INSTANCE_ID;
                    #endif
                };
                struct VertexDescriptionInputs
                {
                     float3 ObjectSpaceNormal;
                     float3 ObjectSpaceTangent;
                     float3 ObjectSpacePosition;
                };
                struct SurfaceDescriptionInputs
                {
                };
                struct PackedVaryingsMeshToPS
                {
                    SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
                    #if UNITY_ANY_INSTANCING_ENABLED
                     uint instanceID : CUSTOM_INSTANCE_ID;
                    #endif
                };
    
                PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
                {
                    PackedVaryingsMeshToPS output;
                    ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
                    output.positionCS = input.positionCS;
                    #if UNITY_ANY_INSTANCING_ENABLED
                    output.instanceID = input.instanceID;
                    #endif
                    return output;
                }
                
                VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
                {
                    VaryingsMeshToPS output;
                    output.positionCS = input.positionCS;
                    #if UNITY_ANY_INSTANCING_ENABLED
                    output.instanceID = input.instanceID;
                    #endif
                    return output;
                }
                
    
                // --------------------------------------------------
                // Graph
    
    
                // Graph Functions
                
                void UnityGetInstanceID_float(out float Out)
                {
                #if UNITY_ANY_INSTANCING_ENABLED
                    Out = unity_InstanceID;
                #else
                    Out = 0;
                #endif
                }
    
                // Graph Vertex
                struct VertexDescription
                {
                    float3 Position;
                    float3 Normal;
                    float3 Tangent;
                };
                
                VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
                {
                    VertexDescription description = (VertexDescription)0;
                    float _InstanceID_1b9fa912aec74e76aae6821c84f95467_Out_0;
                    UnityGetInstanceID_float(_InstanceID_1b9fa912aec74e76aae6821c84f95467_Out_0);
                    float3 _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_oposOS_2;
                    float4 _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_color_3;
                    float3 _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_normal_4;
                    GetTerrainVertex_float(_InstanceID_1b9fa912aec74e76aae6821c84f95467_Out_0, IN.ObjectSpacePosition, _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_oposOS_2, _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_color_3, _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_normal_4);
                    description.Position = _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_oposOS_2;
                    description.Normal = _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_normal_4;
                    description.Tangent = IN.ObjectSpaceTangent;
                    return description;
                }
    
                // Graph Pixel
                struct SurfaceDescription
                {
                    float Alpha;
                };
                
                SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
                {
                    SurfaceDescription surface = (SurfaceDescription)0;
                    surface.Alpha = 1;
                    return surface;
                }
    
                // --------------------------------------------------
                // Build Graph Inputs
    
                
                VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
                {
                    VertexDescriptionInputs output;
                    ZERO_INITIALIZE(VertexDescriptionInputs, output);
                
                    output.ObjectSpaceNormal =           input.normalOS;
                    output.ObjectSpaceTangent =          input.tangentOS.xyz;
                    output.ObjectSpacePosition =         input.positionOS;
                
                    return output;
                }
                
                AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
                #ifdef USE_CUSTOMINTERP_SUBSTRUCT
                    #ifdef TESSELLATION_ON
                    , inout VaryingsMeshToDS varyings
                    #else
                    , inout VaryingsMeshToPS varyings
                    #endif
                #endif
                #ifdef HAVE_VFX_MODIFICATION
                        , AttributesElement element
                #endif
                    )
                {
                    // build graph inputs
                    VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
                    // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
                
                    // evaluate vertex graph
                #ifdef HAVE_VFX_MODIFICATION
                    GraphProperties properties;
                    ZERO_INITIALIZE(GraphProperties, properties);
                
                    // Fetch the vertex graph properties for the particle instance.
                    GetElementVertexProperties(element, properties);
                
                    VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
                #else
                    VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
                #endif
                
                    // copy graph output to the results
                    input.positionOS = vertexDescription.Position;
                    input.normalOS = vertexDescription.Normal;
                    input.tangentOS.xyz = vertexDescription.Tangent;
                
                    
                
                    return input;
                }
                
                FragInputs BuildFragInputs(VaryingsMeshToPS input)
                {
                    FragInputs output;
                    ZERO_INITIALIZE(FragInputs, output);
                
                    // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
                    // TODO: this is a really poor workaround, but the variable is used in a bunch of places
                    // to compute normals which are then passed on elsewhere to compute other values...
                    output.tangentToWorld = k_identity3x3;
                    output.positionSS = input.positionCS;       // input.positionCS is SV_Position
                
                
                #ifdef HAVE_VFX_MODIFICATION
                    // FragInputs from VFX come from two places: Interpolator or CBuffer.
                    /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
                
                #endif
                
                    // splice point to copy custom interpolator fields from varyings to frag inputs
                    
                
                    return output;
                }
                
                // existing HDRP code uses the combined function to go directly from packed to frag inputs
                FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
                {
                    UNITY_SETUP_INSTANCE_ID(input);
                    VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
                    return BuildFragInputs(unpacked);
                }
                
                SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
                {
                    SurfaceDescriptionInputs output;
                    ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
                
                    #if defined(SHADER_STAGE_RAY_TRACING)
                    #else
                    #endif
                
                    // splice point to copy frag inputs custom interpolator pack into the SDI
                    
                
                    return output;
                }
                
    
                // --------------------------------------------------
                // Build Surface Data (Specific Material)
    
            void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
                {
                    ZERO_INITIALIZE(SurfaceData, surfaceData);
                
                    // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
                    // however specularOcclusion can come from the graph, so need to be init here so it can be override.
                    surfaceData.specularOcclusion = 1.0;
                
                
                    #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                        if (_EnableSSRefraction)
                        {
                
                            surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                            surfaceDescription.Alpha = 1.0;
                        }
                        else
                        {
                            surfaceData.ior = 1.0;
                            surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                            surfaceData.atDistance = 1.0;
                            surfaceData.transmittanceMask = 0.0;
                            surfaceDescription.Alpha = 1.0;
                        }
                    #else
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                    #endif
                
                    // These static material feature allow compile time optimization
                    surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
                    #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_TRANSMISSION
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_ANISOTROPY
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
                    #endif
                
                    #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                        // Require to have setup baseColor
                        // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                        surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
                    #endif
                
                    #ifdef _DOUBLESIDED_ON
                        float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                    #else
                        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                    #endif
                
                    // normal delivered to master node
                
                    surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                
                    surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
                
                
                    #if HAVE_DECALS
                        if (_EnableDecals)
                        {
                            float alpha = 1.0;
                            alpha = surfaceDescription.Alpha;
                
                            // Both uses and modifies 'surfaceData.normalWS'.
                            DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                            ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                        }
                    #endif
                
                    bentNormalWS = surfaceData.normalWS;
                
                    surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
                
                    #ifdef DEBUG_DISPLAY
                        if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                        {
                            // TODO: need to update mip info
                            surfaceData.metallic = 0;
                        }
                
                        // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                        // as it can modify attribute use for static lighting
                        ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
                    #endif
                
                    // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
                    // If user provide bent normal then we process a better term
                    #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                        // Just use the value passed through via the slot (not active otherwise)
                    #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                        // If we have bent normal and ambient occlusion, process a specular occlusion
                        surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                    #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                        surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                    #endif
                
                    #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                        surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                    #endif
                }
                
    
                // --------------------------------------------------
                // Get Surface And BuiltinData
    
                void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
                {
                    // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                    #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                    #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                    #endif
                    #endif
    
                    #ifndef SHADER_UNLIT
                    #ifdef _DOUBLESIDED_ON
                        float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                    #else
                        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                    #endif
    
                    ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                    #endif // SHADER_UNLIT
    
                    SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
    
                    #if defined(HAVE_VFX_MODIFICATION)
                    GraphProperties properties;
                    ZERO_INITIALIZE(GraphProperties, properties);
    
                    GetElementPixelProperties(fragInputs, properties);
    
                    SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                    #else
                    SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                    #endif
    
                    // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                    // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                    #ifdef _ALPHATEST_ON
                        float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                        #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                        // The TransparentDepthPrepass is also used with SSR transparent.
                        // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                        // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                        #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                        // DepthPostpass always use its own alpha threshold
                        alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                        #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                        // If use shadow threshold isn't enable we don't allow any test
                        #endif
    
                        GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                    #endif
    
                    #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                    #endif
    
                    #ifndef SHADER_UNLIT
                    float3 bentNormalWS;
                    BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
    
                    // Builtin Data
                    // For back lighting we use the oposite vertex normal
                    InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
    
                    #else
                    BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
    
                    ZERO_INITIALIZE(BuiltinData, builtinData); // No call to InitBuiltinData as we don't have any lighting
                    builtinData.opacity = surfaceDescription.Alpha;
    
                    #if defined(DEBUG_DISPLAY)
                        // Light Layers are currently not used for the Unlit shader (because it is not lit)
                        // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                        // display in the light layers visualization mode, therefore we need the renderingLayers
                        builtinData.renderingLayers = GetMeshRenderingLightLayer();
                    #endif
    
                    #endif // SHADER_UNLIT
    
                    #ifdef _ALPHATEST_ON
                        // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                        builtinData.alphaClipTreshold = alphaCutoff;
                    #endif
    
                    // override sampleBakedGI - not used by Unlit
    
            		// If we want to force forward emissive and we have GBuffer pass, don't do anything
            		#if !(SHADERPASS == SHADERPASS_GBUFFER && defined(_FORCE_FORWARD_EMISSIVE))
            		#endif
    
                    // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                    // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                    // This is a limitation of the current MRT approach.
    
                    #if _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
                    #endif
    
                    // TODO: We should generate distortion / distortionBlur for non distortion pass
                    #if (SHADERPASS == SHADERPASS_DISTORTION)
                    builtinData.distortion = surfaceDescription.Distortion;
                    builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                    #endif
    
                    #ifndef SHADER_UNLIT
                    // PostInitBuiltinData call ApplyDebugToBuiltinData
                    PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                    #else
                    ApplyDebugToBuiltinData(builtinData);
                    #endif
    
                    RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
                }
    
                // --------------------------------------------------
                // Main
    
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
    
                // --------------------------------------------------
                // Visual Effect Vertex Invocations
    
            	#ifdef HAVE_VFX_MODIFICATION
            	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
            	#endif
    
                ENDHLSL
            }
            Pass
            {
                Name "META"
                Tags
                {
                    "LightMode" = "META"
                }
    
                // Render State
                Cull Off
    
                // Debug
                // <None>
    
                // --------------------------------------------------
                // Pass
    
                HLSLPROGRAM
    
                // Pragmas
                #pragma instancing_options renderinglayer
                #pragma target 4.5
                #pragma vertex Vert
                #pragma fragment Frag
                #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
                #pragma multi_compile_instancing
                #pragma instancing_options procedural:setupProcedural
    
                // Keywords
                #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
                #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
                #pragma shader_feature_local _ _DOUBLESIDED_ON
                #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
                #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
                #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
                #pragma shader_feature_local_fragment _ _DISABLE_DECALS
                #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
                #pragma shader_feature_local_fragment _ _DISABLE_SSR
                #pragma shader_feature_local_raytracing _ _DISABLE_SSR
                #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
                #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
                #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
                #pragma shader_feature _ _FORCE_FORWARD_EMISSIVE
                // GraphKeywords: <None>
    
                // For custom interpolators to inject a substruct definition before FragInputs definition,
                // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
                /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
    
    
                // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
            	#ifdef HAVE_VFX_MODIFICATION
            	struct FragInputsVFX
                {
                    /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
                };
                #endif
    
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
            	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
    
                // --------------------------------------------------
                // Defines
    
                // Attribute
                #define ATTRIBUTES_NEED_NORMAL
                #define ATTRIBUTES_NEED_TANGENT
                #define ATTRIBUTES_NEED_TEXCOORD0
                #define ATTRIBUTES_NEED_TEXCOORD1
                #define ATTRIBUTES_NEED_TEXCOORD2
                #define ATTRIBUTES_NEED_COLOR
                #define VARYINGS_NEED_POSITION_WS
                #define VARYINGS_NEED_TANGENT_TO_WORLD
    
                #define HAVE_MESH_MODIFICATION
    
    
                #define SHADERPASS SHADERPASS_LIGHT_TRANSPORT
                #define RAYTRACING_SHADER_GRAPH_DEFAULT
    
    
                // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
                // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
                // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
                // to still allow us to rename the field and keyword of this node without breaking existing code.
                #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
                #endif
    
                #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
                #endif
                // end
    
                #ifndef SHADER_UNLIT
                // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
                // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
                #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                    #define VARYINGS_NEED_CULLFACE
                #endif
                #endif
    
                // Specific Material Define
            #define _AMBIENT_OCCLUSION 1
                #define _SPECULAR_OCCLUSION_FROM_AO 1
                #define _ENERGY_CONSERVING_SPECULAR 1
                
                // If we use subsurface scattering, enable output split lighting (for forward pass)
                #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
                    #define OUTPUT_SPLIT_LIGHTING
                #endif
                
                // This shader support recursive rendering for raytracing
                #define HAVE_RECURSIVE_RENDERING
                
                // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
    
                // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
                // we should have a code like this:
                // if !defined(_DISABLE_SSR_TRANSPARENT)
                // pragma multi_compile _ WRITE_NORMAL_BUFFER
                // endif
                // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
                // it based on if SSR transparent in frame settings and not (and stripper can strip it).
                // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
                // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
                // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
                #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                    #define WRITE_NORMAL_BUFFER
                #endif
                #endif
    
                #ifndef DEBUG_DISPLAY
                    // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                    // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                    #if !defined(_SURFACE_TYPE_TRANSPARENT)
                        #if SHADERPASS == SHADERPASS_FORWARD
                        #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                        #elif SHADERPASS == SHADERPASS_GBUFFER
                        #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                        #endif
                    #endif
                #endif
    
                // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
                #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                    #define _DEFERRED_CAPABLE_MATERIAL
                #endif
    
                // Translate transparent motion vector define
                #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                    #define _WRITE_TRANSPARENT_MOTION_VECTOR
                #endif
    
                // Dots Instancing
                // DotsInstancingOptions: <None>
    
                // Various properties
    
                // HybridV1InjectedBuiltinProperties: <None>
    
                // -- Graph Properties
                CBUFFER_START(UnityPerMaterial)
                float2 HeightRemap3;
                float2 HeightRemap2;
                float4 Tiling_Offset3;
                float4 Tiling_Offset0;
                float2 HeightRemap4;
                float4 Tiling_Offset2;
                float2 HeightRemap0;
                float4 LayerMask3_TexelSize;
                float4 LayerMask2_TexelSize;
                float4 LayerNormal3_TexelSize;
                float4 LayerNormal2_TexelSize;
                float2 HeightRemap1;
                float4 Tiling_Offset1;
                float4 Layer0_TexelSize;
                float4 Layer1_TexelSize;
                float4 Layer2_TexelSize;
                float4 Layer3_TexelSize;
                float UVXZScale;
                float4 LayerNormal1_TexelSize;
                float4 LayerNormal0_TexelSize;
                float4 LayerMask1_TexelSize;
                float4 LayerMask0_TexelSize;
                float heightTransition;
                float4 BaseTex_TexelSize;
                float4 BaseNormal_TexelSize;
                float4 BaseMask_TexelSize;
                float4 Tiling_Offset;
                float2 HeightRemap;
                float4 SlopeTex_TexelSize;
                float4 SlopeNormal_TexelSize;
                float4 SlopeMask_TexelSize;
                float4 Tiling_Offset4;
                float2 SlopeRemap;
                float SlopePow;
                float4 _EmissionColor;
                float _UseShadowThreshold;
                float4 _DoubleSidedConstants;
                float _BlendMode;
                float _EnableBlendModePreserveSpecularLighting;
                float _RayTracing;
                float _RefractionModel;
                CBUFFER_END
                
                // Object and Global properties
                SAMPLER(SamplerState_Linear_Repeat);
                TEXTURE2D(LayerMask3);
                SAMPLER(samplerLayerMask3);
                TEXTURE2D(LayerMask2);
                SAMPLER(samplerLayerMask2);
                TEXTURE2D(LayerNormal3);
                SAMPLER(samplerLayerNormal3);
                TEXTURE2D(LayerNormal2);
                SAMPLER(samplerLayerNormal2);
                TEXTURE2D(Layer0);
                SAMPLER(samplerLayer0);
                TEXTURE2D(Layer1);
                SAMPLER(samplerLayer1);
                TEXTURE2D(Layer2);
                SAMPLER(samplerLayer2);
                TEXTURE2D(Layer3);
                SAMPLER(samplerLayer3);
                TEXTURE2D(LayerNormal1);
                SAMPLER(samplerLayerNormal1);
                TEXTURE2D(LayerNormal0);
                SAMPLER(samplerLayerNormal0);
                TEXTURE2D(LayerMask1);
                SAMPLER(samplerLayerMask1);
                TEXTURE2D(LayerMask0);
                SAMPLER(samplerLayerMask0);
                TEXTURE2D(BaseTex);
                SAMPLER(samplerBaseTex);
                TEXTURE2D(BaseNormal);
                SAMPLER(samplerBaseNormal);
                TEXTURE2D(BaseMask);
                SAMPLER(samplerBaseMask);
                TEXTURE2D(SlopeTex);
                SAMPLER(samplerSlopeTex);
                TEXTURE2D(SlopeNormal);
                SAMPLER(samplerSlopeNormal);
                TEXTURE2D(SlopeMask);
                SAMPLER(samplerSlopeMask);
    
                // -- Property used by ScenePickingPass
                #ifdef SCENEPICKINGPASS
                float4 _SelectionID;
                #endif
    
                // -- Properties used by SceneSelectionPass
                #ifdef SCENESELECTIONPASS
                int _ObjectId;
                int _PassValue;
                #endif
    
                // Includes
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
            	#include "Assets/Shaders/TerrainShading/HeightBlend.hlsl"
    
                // --------------------------------------------------
                // Structs and Packing
    
                struct AttributesMesh
                {
                     float3 positionOS : POSITION;
                     float3 normalOS : NORMAL;
                     float4 tangentOS : TANGENT;
                     float4 uv0 : TEXCOORD0;
                     float4 uv1 : TEXCOORD1;
                     float4 uv2 : TEXCOORD2;
                     float4 color : COLOR;
                    #if UNITY_ANY_INSTANCING_ENABLED
                     uint instanceID : INSTANCEID_SEMANTIC;
                    #endif
                };
                struct VaryingsMeshToPS
                {
                    SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
                     float3 positionRWS;
                     float3 normalWS;
                     float4 tangentWS;
                    #if UNITY_ANY_INSTANCING_ENABLED
                     uint instanceID : CUSTOM_INSTANCE_ID;
                    #endif
                };
                struct VertexDescriptionInputs
                {
                };
                struct SurfaceDescriptionInputs
                {
                     float3 ObjectSpaceNormal;
                     float3 WorldSpaceNormal;
                     float3 TangentSpaceNormal;
                     float3 ObjectSpacePosition;
                };
                struct PackedVaryingsMeshToPS
                {
                    SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
                    #if UNITY_ANY_INSTANCING_ENABLED
                     uint instanceID : CUSTOM_INSTANCE_ID;
                    #endif
                     float3 interp0 : INTERP0;
                     float3 interp1 : INTERP1;
                     float4 interp2 : INTERP2;
                };
    
                PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
                {
                    PackedVaryingsMeshToPS output;
                    ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
                    output.positionCS = input.positionCS;
                    output.interp0.xyz =  input.positionRWS;
                    output.interp1.xyz =  input.normalWS;
                    output.interp2.xyzw =  input.tangentWS;
                    #if UNITY_ANY_INSTANCING_ENABLED
                    output.instanceID = input.instanceID;
                    #endif
                    return output;
                }
                
                VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
                {
                    VaryingsMeshToPS output;
                    output.positionCS = input.positionCS;
                    output.positionRWS = input.interp0.xyz;
                    output.normalWS = input.interp1.xyz;
                    output.tangentWS = input.interp2.xyzw;
                    #if UNITY_ANY_INSTANCING_ENABLED
                    output.instanceID = input.instanceID;
                    #endif
                    return output;
                }
                
    
                // --------------------------------------------------
                // Graph
    
    
                // Graph Functions
                
                void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
                {
                    RGBA = float4(R, G, B, A);
                    RGB = float3(R, G, B);
                    RG = float2(R, G);
                }
                
                void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
                {
                    Out = A / B;
                }
                
                void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
                {
                    Out = UV * Tiling + Offset;
                }
                
                struct Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float
                {
                };
                
                void SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(float4 Tiling_Offset, float2 Vector2, Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float IN, out float2 OutVector2_1)
                {
                    float2 _Property_5ea954dbdecc454b839a01badac3afd6_Out_0 = Vector2;
                    float4 _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0 = Tiling_Offset;
                    float _Split_c19978cb25c5413eaf23432179b0e3af_R_1 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[0];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_G_2 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[1];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_B_3 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[2];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_A_4 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[3];
                    float4 _Combine_387ca93b6841454bad52ea2f221d199f_RGBA_4;
                    float3 _Combine_387ca93b6841454bad52ea2f221d199f_RGB_5;
                    float2 _Combine_387ca93b6841454bad52ea2f221d199f_RG_6;
                    Unity_Combine_float(_Split_c19978cb25c5413eaf23432179b0e3af_R_1, _Split_c19978cb25c5413eaf23432179b0e3af_G_2, 0, 0, _Combine_387ca93b6841454bad52ea2f221d199f_RGBA_4, _Combine_387ca93b6841454bad52ea2f221d199f_RGB_5, _Combine_387ca93b6841454bad52ea2f221d199f_RG_6);
                    float4 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGBA_4;
                    float3 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGB_5;
                    float2 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6;
                    Unity_Combine_float(_Split_c19978cb25c5413eaf23432179b0e3af_B_3, _Split_c19978cb25c5413eaf23432179b0e3af_A_4, 0, 0, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGBA_4, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGB_5, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6);
                    float2 _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3;
                    Unity_TilingAndOffset_float(_Property_5ea954dbdecc454b839a01badac3afd6_Out_0, _Combine_387ca93b6841454bad52ea2f221d199f_RG_6, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6, _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3);
                    OutVector2_1 = _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3;
                }
                
                void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
                {
                    Out = A * B;
                }
                
                void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
                {
                    Out = A * B;
                }
                
                void Desaturate_float(float3 oldcolor, float k, out float3 newcolor){
                    float intensity = dot(oldcolor,float3(0.3,0.59,0.11));
                    newcolor.x = intensity*k + oldcolor.x*(1-k);
                    newcolor.y = intensity*k + oldcolor.y*(1-k);
                    newcolor.z = intensity*k + oldcolor.z*(1-k);
                }
                
                void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
                {
                    Out = A * B;
                }
                
                void Unity_Lerp_float(float A, float B, float T, out float Out)
                {
                    Out = lerp(A, B, T);
                }
                
                struct Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float
                {
                };
                
                void SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(UnityTexture2D Albedo, UnityTexture2D Normal, UnityTexture2D Mask, float DesaturationK, float BrightnessAtten, float2 UV, float2 HeightRemap, Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float IN, out float4 oAlbedo_0, out float4 oNormal_1, out float4 oMask_2)
                {
                    UnityTexture2D _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0 = Albedo;
                    float2 _Property_76ed35a32977448f8ea254bf6de06d33_Out_0 = UV;
                    float4 _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_R_4 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.r;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_G_5 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.g;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_B_6 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.b;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_A_7 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.a;
                    float _Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0 = BrightnessAtten;
                    float4 _Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2);
                    float _Float_f48d9dc0c16249fe8fe5b97c86e7f56c_Out_0 = -0.25;
                    float2 _Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2;
                    Unity_Multiply_float2_float2(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0, (_Float_f48d9dc0c16249fe8fe5b97c86e7f56c_Out_0.xx), _Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2);
                    float4 _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_R_4 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.r;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_G_5 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.g;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_B_6 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.b;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_A_7 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.a;
                    float4 _Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2);
                    float _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0 = DesaturationK;
                    float3 _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1;
                    Desaturate_float((_Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1);
                    float3 _Multiply_410af5ac81154a3aab73254ac228eccd_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2.xyz), _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1, _Multiply_410af5ac81154a3aab73254ac228eccd_Out_2);
                    UnityTexture2D _Property_d05972164bdd4e0189593b8dae00db03_Out_0 = Normal;
                    float4 _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0 = SAMPLE_TEXTURE2D(_Property_d05972164bdd4e0189593b8dae00db03_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d05972164bdd4e0189593b8dae00db03_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0);
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_R_4 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.r;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_G_5 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.g;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_B_6 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.b;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_A_7 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.a;
                    float4 _Multiply_4999f90cbd1848acaf20b253953c0963_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_4999f90cbd1848acaf20b253953c0963_Out_2);
                    float4 _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_d05972164bdd4e0189593b8dae00db03_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d05972164bdd4e0189593b8dae00db03_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0);
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_R_4 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.r;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_G_5 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.g;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_B_6 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.b;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_A_7 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.a;
                    float4 _Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2);
                    float3 _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1;
                    Desaturate_float((_Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1);
                    float3 _Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_4999f90cbd1848acaf20b253953c0963_Out_2.xyz), _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1, _Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2);
                    UnityTexture2D _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0 = Mask;
                    float4 _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0 = SAMPLE_TEXTURE2D(_Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_R_4 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.r;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_G_5 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.g;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_B_6 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.b;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_A_7 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.a;
                    float4 _Multiply_0b2356625aad40439a89b8519e36e62b_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_0b2356625aad40439a89b8519e36e62b_Out_2);
                    float4 _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0 = SAMPLE_TEXTURE2D(_Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_R_4 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.r;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_G_5 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.g;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_B_6 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.b;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_A_7 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.a;
                    float4 _Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2);
                    float3 _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1;
                    Desaturate_float((_Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1);
                    float3 _Multiply_3c8f32d2a057478e869493099765b841_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_0b2356625aad40439a89b8519e36e62b_Out_2.xyz), _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1, _Multiply_3c8f32d2a057478e869493099765b841_Out_2);
                    float _Split_77de2b1a3326407b985f625d91e2063b_R_1 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[0];
                    float _Split_77de2b1a3326407b985f625d91e2063b_G_2 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[1];
                    float _Split_77de2b1a3326407b985f625d91e2063b_B_3 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[2];
                    float _Split_77de2b1a3326407b985f625d91e2063b_A_4 = 0;
                    float2 _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0 = HeightRemap;
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_R_1 = _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0[0];
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_G_2 = _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0[1];
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_B_3 = 0;
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_A_4 = 0;
                    float _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3;
                    Unity_Lerp_float(_Split_0df13f6921fe4db99b01dcff93c3b978_R_1, _Split_0df13f6921fe4db99b01dcff93c3b978_G_2, _Split_77de2b1a3326407b985f625d91e2063b_B_3, _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3);
                    float4 _Combine_17dba591e95443299750f53a93613083_RGBA_4;
                    float3 _Combine_17dba591e95443299750f53a93613083_RGB_5;
                    float2 _Combine_17dba591e95443299750f53a93613083_RG_6;
                    Unity_Combine_float(_Split_77de2b1a3326407b985f625d91e2063b_R_1, _Split_77de2b1a3326407b985f625d91e2063b_G_2, _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3, _Split_77de2b1a3326407b985f625d91e2063b_A_4, _Combine_17dba591e95443299750f53a93613083_RGBA_4, _Combine_17dba591e95443299750f53a93613083_RGB_5, _Combine_17dba591e95443299750f53a93613083_RG_6);
                    oAlbedo_0 = (float4(_Multiply_410af5ac81154a3aab73254ac228eccd_Out_2, 1.0));
                    oNormal_1 = (float4(_Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2, 1.0));
                    oMask_2 = _Combine_17dba591e95443299750f53a93613083_RGBA_4;
                }
                
                void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
                {
                    Out = dot(A, B);
                }
                
                void Unity_Power_float(float A, float B, out float Out)
                {
                    Out = pow(A, B);
                }
                
                void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
                {
                    Out = smoothstep(Edge1, Edge2, In);
                }
                
                void Unity_OneMinus_float(float In, out float Out)
                {
                    Out = 1 - In;
                }
                
                void BlendByMask_float(float4 a, float4 b, float4 c, float4 d, float4 blend, out float4 ret){
                    ret = a*blend.x + b*blend.y + c*blend.z + d*blend.w;
                }
                
                void Unity_Add_float4(float4 A, float4 B, out float4 Out)
                {
                    Out = A + B;
                }
    
                // Graph Vertex
                struct VertexDescription
                {
                };
                
                VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
                {
                    VertexDescription description = (VertexDescription)0;
                    return description;
                }
    
                // Graph Pixel
                struct SurfaceDescription
                {
                    float3 BaseColor;
                    float3 Emission;
                    float Alpha;
                    float3 BentNormal;
                    float Smoothness;
                    float Occlusion;
                    float3 NormalTS;
                    float Metallic;
                };
                
                SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
                {
                    SurfaceDescription surface = (SurfaceDescription)0;
                    UnityTexture2D _Property_4e780cffb4044909a58e26eaff6361d1_Out_0 = UnityBuildTexture2DStructNoScale(BaseTex);
                    UnityTexture2D _Property_20a5bc7358e64fe8b3327adb9ce635ea_Out_0 = UnityBuildTexture2DStructNoScale(BaseNormal);
                    UnityTexture2D _Property_090d521163b9493189233a9f2e1cf5ed_Out_0 = UnityBuildTexture2DStructNoScale(BaseMask);
                    float4 _Property_6881ae016d754988b27811b95cc834ca_Out_0 = Tiling_Offset;
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_R_1 = IN.ObjectSpacePosition[0];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_G_2 = IN.ObjectSpacePosition[1];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_B_3 = IN.ObjectSpacePosition[2];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_A_4 = 0;
                    float4 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGBA_4;
                    float3 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGB_5;
                    float2 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6;
                    Unity_Combine_float(_Split_3335daa3a4b34f69a62c9c8a1c6f39b2_R_1, _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_B_3, 0, 0, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGBA_4, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGB_5, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6);
                    float _Property_8984e4bf1c26459280f9fece3c52167c_Out_0 = UVXZScale;
                    float2 _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2;
                    Unity_Divide_float2(_Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6, (_Property_8984e4bf1c26459280f9fece3c52167c_Out_0.xx), _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2);
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_737be3819d2c4f29853810a18717cae3;
                    float2 _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_6881ae016d754988b27811b95cc834ca_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1);
                    float2 _Property_dcc00367280c4dc6b11a52aa07754830_Out_0 = HeightRemap;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_6722d68456e84aecb015a07880cbbd46;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_4e780cffb4044909a58e26eaff6361d1_Out_0, _Property_20a5bc7358e64fe8b3327adb9ce635ea_Out_0, _Property_090d521163b9493189233a9f2e1cf5ed_Out_0, 0.25, 4, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1, _Property_dcc00367280c4dc6b11a52aa07754830_Out_0, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2);
                    UnityTexture2D _Property_3d7142ef79234a0ba6cda49555992a80_Out_0 = UnityBuildTexture2DStructNoScale(Layer0);
                    UnityTexture2D _Property_42e52c243a994f04944481ff3627fc2c_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal0);
                    UnityTexture2D _Property_e67647d6cf1b44bebf91845a255b522c_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask0);
                    float4 _Property_4e6c66ba03a842e482f7040c3fe163dc_Out_0 = Tiling_Offset0;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674;
                    float2 _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_4e6c66ba03a842e482f7040c3fe163dc_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1);
                    float2 _Property_8cf19c3a22e64f0a85a51c8cbf5085e7_Out_0 = HeightRemap0;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_3d7142ef79234a0ba6cda49555992a80_Out_0, _Property_42e52c243a994f04944481ff3627fc2c_Out_0, _Property_e67647d6cf1b44bebf91845a255b522c_Out_0, 0.25, 4, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1, _Property_8cf19c3a22e64f0a85a51c8cbf5085e7_Out_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2);
                    UnityTexture2D _Property_1bce6ca387e847e1a43a4534686b655f_Out_0 = UnityBuildTexture2DStructNoScale(Layer1);
                    UnityTexture2D _Property_1e7513acda3b4b20a5a028d0da4bcfb0_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal1);
                    UnityTexture2D _Property_75d4521a27cb403399759cefa7be71f2_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask1);
                    float4 _Property_e17bf3be22544a639340ddea65766b89_Out_0 = Tiling_Offset1;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_df825eb885d947429ce6daf495a641a7;
                    float2 _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_e17bf3be22544a639340ddea65766b89_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1);
                    float2 _Property_d682537de1054cf4b1eddd1680d152fb_Out_0 = HeightRemap1;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_1bce6ca387e847e1a43a4534686b655f_Out_0, _Property_1e7513acda3b4b20a5a028d0da4bcfb0_Out_0, _Property_75d4521a27cb403399759cefa7be71f2_Out_0, 0.25, 4, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1, _Property_d682537de1054cf4b1eddd1680d152fb_Out_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2);
                    UnityTexture2D _Property_b79fba6b5b1f40b88b38803dad2bb2e5_Out_0 = UnityBuildTexture2DStructNoScale(Layer2);
                    UnityTexture2D _Property_a787f1642c6d4570af8ae47ea63a59ed_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal2);
                    UnityTexture2D _Property_f4ae055a87ef48cb8df5c603ca6f72b0_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask2);
                    float4 _Property_e12db1a96427478999d081afcb59d771_Out_0 = Tiling_Offset2;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d;
                    float2 _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_e12db1a96427478999d081afcb59d771_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1);
                    float2 _Property_3be82515dad24d76b9af558757032f30_Out_0 = HeightRemap2;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_b79fba6b5b1f40b88b38803dad2bb2e5_Out_0, _Property_a787f1642c6d4570af8ae47ea63a59ed_Out_0, _Property_f4ae055a87ef48cb8df5c603ca6f72b0_Out_0, 0.25, 4, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1, _Property_3be82515dad24d76b9af558757032f30_Out_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2);
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_R_1 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[0];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_G_2 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[1];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_B_3 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[2];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_A_4 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[3];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_R_1 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[0];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_G_2 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[1];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_B_3 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[2];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_A_4 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[3];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_R_1 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[0];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_G_2 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[1];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_B_3 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[2];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_A_4 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[3];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_R_1 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[0];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_G_2 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[1];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_B_3 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[2];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_A_4 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[3];
                    float4 _Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4;
                    float3 _Combine_f97595cb40654c9a8d82c0297e7280f3_RGB_5;
                    float2 _Combine_f97595cb40654c9a8d82c0297e7280f3_RG_6;
                    Unity_Combine_float(_Split_d81e33a0495c4ac09042d2d39dd09ba5_B_3, _Split_d2ed4cee74e042da88b7348fcfe80cab_B_3, _Split_b3522eb5287e4b28baab87cc1fa16589_B_3, _Split_a4f15428b23a40ef8f25398e9cff2d7c_B_3, _Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4, _Combine_f97595cb40654c9a8d82c0297e7280f3_RGB_5, _Combine_f97595cb40654c9a8d82c0297e7280f3_RG_6);
                    UnityTexture2D _Property_8e8b4d9a2dfc42148eb69519397ecebc_Out_0 = UnityBuildTexture2DStructNoScale(Layer3);
                    UnityTexture2D _Property_1443e12ec6544d2c8e8dcc71d67adb04_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal3);
                    UnityTexture2D _Property_b8f1cfb1112b4d2e8e2fe919f5003fb3_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask3);
                    float4 _Property_d9e7ba461b95446db56c0b99fce9de5d_Out_0 = Tiling_Offset3;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13;
                    float2 _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_d9e7ba461b95446db56c0b99fce9de5d_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1);
                    float2 _Property_e5d43ace4a66401faff3165675d44af0_Out_0 = HeightRemap3;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_8e8b4d9a2dfc42148eb69519397ecebc_Out_0, _Property_1443e12ec6544d2c8e8dcc71d67adb04_Out_0, _Property_b8f1cfb1112b4d2e8e2fe919f5003fb3_Out_0, 0.25, 4, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1, _Property_e5d43ace4a66401faff3165675d44af0_Out_0, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2);
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_R_1 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[0];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_G_2 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[1];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_B_3 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[2];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_A_4 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[3];
                    UnityTexture2D _Property_edf497c59ff340a5897695b2e8e9ed68_Out_0 = UnityBuildTexture2DStructNoScale(SlopeTex);
                    UnityTexture2D _Property_ae03f8d1bb284168ae1cb40c2c8d7dce_Out_0 = UnityBuildTexture2DStructNoScale(SlopeNormal);
                    UnityTexture2D _Property_35050279a32b481b878853831820cb33_Out_0 = UnityBuildTexture2DStructNoScale(SlopeMask);
                    float4 _Property_a3c340f0d1f647858c0d27fc6fa0d127_Out_0 = Tiling_Offset4;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67;
                    float2 _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_a3c340f0d1f647858c0d27fc6fa0d127_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1);
                    float2 _Property_8a3f864a5b9c469b92480bb635123790_Out_0 = HeightRemap4;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_edf497c59ff340a5897695b2e8e9ed68_Out_0, _Property_ae03f8d1bb284168ae1cb40c2c8d7dce_Out_0, _Property_35050279a32b481b878853831820cb33_Out_0, 0.25, 4, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1, _Property_8a3f864a5b9c469b92480bb635123790_Out_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2);
                    float _Split_015a6ee9887b47abb21193d18e609740_R_1 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[0];
                    float _Split_015a6ee9887b47abb21193d18e609740_G_2 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[1];
                    float _Split_015a6ee9887b47abb21193d18e609740_B_3 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[2];
                    float _Split_015a6ee9887b47abb21193d18e609740_A_4 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[3];
                    float4 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4;
                    float3 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGB_5;
                    float2 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RG_6;
                    Unity_Combine_float(_Split_d87c9f86d0a94f8b9b66cbcb29d89dde_B_3, _Split_015a6ee9887b47abb21193d18e609740_B_3, 0, 0, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGB_5, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RG_6);
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_R_1 = float4(0,0,0,0)[0];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_G_2 = float4(0,0,0,0)[1];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_B_3 = float4(0,0,0,0)[2];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_A_4 = float4(0,0,0,0)[3];
                    float4 _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4;
                    float3 _Combine_7b79ed205a4b435d8742217505a4c51d_RGB_5;
                    float2 _Combine_7b79ed205a4b435d8742217505a4c51d_RG_6;
                    Unity_Combine_float(1, _Split_ea099c0905af42a6804ca0dc2f58dc2f_R_1, _Split_ea099c0905af42a6804ca0dc2f58dc2f_G_2, _Split_ea099c0905af42a6804ca0dc2f58dc2f_B_3, _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4, _Combine_7b79ed205a4b435d8742217505a4c51d_RGB_5, _Combine_7b79ed205a4b435d8742217505a4c51d_RG_6);
                    float2 _Property_5538a1bac07f487589432be4f79dd05e_Out_0 = SlopeRemap;
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_R_1 = _Property_5538a1bac07f487589432be4f79dd05e_Out_0[0];
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_G_2 = _Property_5538a1bac07f487589432be4f79dd05e_Out_0[1];
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_B_3 = 0;
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_A_4 = 0;
                    float _DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2;
                    Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(0, 1, 0), _DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2);
                    float _Property_795a1803a8484214b987093ec034ab6a_Out_0 = SlopePow;
                    float _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2;
                    Unity_Power_float(_DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2, _Property_795a1803a8484214b987093ec034ab6a_Out_0, _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2);
                    float _Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3;
                    Unity_Smoothstep_float(_Split_03a4c3769cad421fb634dee3fa2beefb_R_1, _Split_03a4c3769cad421fb634dee3fa2beefb_G_2, _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2, _Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3);
                    float _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1;
                    Unity_OneMinus_float(_Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3, _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1);
                    float4 _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4;
                    float3 _Combine_9702e823fbe443b4b07afb499b6912a4_RGB_5;
                    float2 _Combine_9702e823fbe443b4b07afb499b6912a4_RG_6;
                    Unity_Combine_float(_Split_ea099c0905af42a6804ca0dc2f58dc2f_A_4, _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1, 0, 0, _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4, _Combine_9702e823fbe443b4b07afb499b6912a4_RGB_5, _Combine_9702e823fbe443b4b07afb499b6912a4_RG_6);
                    float _Property_d5cf363bc21a4f92a00fac464b9b11cf_Out_0 = heightTransition;
                    float4 _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5;
                    float4 _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6;
                    HeightBlend8Layers_float(_Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4, _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4, _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4, _Property_d5cf363bc21a4f92a00fac464b9b11cf_Out_0, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6);
                    float4 _BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5);
                    float4 _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5);
                    float4 _Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5, _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5, _Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2);
                    float4 _BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5);
                    float4 _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5);
                    float4 _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5, _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5, _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2);
                    float _Split_d9a7a90627444523a2cda58b36d68116_R_1 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[0];
                    float _Split_d9a7a90627444523a2cda58b36d68116_G_2 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[1];
                    float _Split_d9a7a90627444523a2cda58b36d68116_B_3 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[2];
                    float _Split_d9a7a90627444523a2cda58b36d68116_A_4 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[3];
                    float4 _BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5);
                    float4 _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5);
                    float4 _Add_090184f4bd18493ca37179ea1a8364d0_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5, _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5, _Add_090184f4bd18493ca37179ea1a8364d0_Out_2);
                    surface.BaseColor = (_Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2.xyz);
                    surface.Emission = float3(0, 0, 0);
                    surface.Alpha = 1;
                    surface.BentNormal = IN.TangentSpaceNormal;
                    surface.Smoothness = _Split_d9a7a90627444523a2cda58b36d68116_A_4;
                    surface.Occlusion = _Split_d9a7a90627444523a2cda58b36d68116_G_2;
                    surface.NormalTS = (_Add_090184f4bd18493ca37179ea1a8364d0_Out_2.xyz);
                    surface.Metallic = _Split_d9a7a90627444523a2cda58b36d68116_R_1;
                    return surface;
                }
    
                // --------------------------------------------------
                // Build Graph Inputs
    
                
                VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
                {
                    VertexDescriptionInputs output;
                    ZERO_INITIALIZE(VertexDescriptionInputs, output);
                
                
                    return output;
                }
                
                AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
                #ifdef USE_CUSTOMINTERP_SUBSTRUCT
                    #ifdef TESSELLATION_ON
                    , inout VaryingsMeshToDS varyings
                    #else
                    , inout VaryingsMeshToPS varyings
                    #endif
                #endif
                #ifdef HAVE_VFX_MODIFICATION
                        , AttributesElement element
                #endif
                    )
                {
                    // build graph inputs
                    VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
                    // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
                
                    // evaluate vertex graph
                #ifdef HAVE_VFX_MODIFICATION
                    GraphProperties properties;
                    ZERO_INITIALIZE(GraphProperties, properties);
                
                    // Fetch the vertex graph properties for the particle instance.
                    GetElementVertexProperties(element, properties);
                
                    VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
                #else
                    VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
                #endif
                
                    // copy graph output to the results
                
                    /* WARNING: $splice Could not find named fragment 'CustomInterpolatorVertMeshCustomInterpolation' */
                
                    return input;
                }
                
                FragInputs BuildFragInputs(VaryingsMeshToPS input)
                {
                    FragInputs output;
                    ZERO_INITIALIZE(FragInputs, output);
                
                    // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
                    // TODO: this is a really poor workaround, but the variable is used in a bunch of places
                    // to compute normals which are then passed on elsewhere to compute other values...
                    output.tangentToWorld = k_identity3x3;
                    output.positionSS = input.positionCS;       // input.positionCS is SV_Position
                
                    output.positionRWS = input.positionRWS;
                    output.tangentToWorld = BuildTangentToWorld(input.tangentWS, input.normalWS);
                
                #ifdef HAVE_VFX_MODIFICATION
                    // FragInputs from VFX come from two places: Interpolator or CBuffer.
                    /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
                
                #endif
                
                    // splice point to copy custom interpolator fields from varyings to frag inputs
                    /* WARNING: $splice Could not find named fragment 'CustomInterpolatorVaryingsToFragInputs' */
                
                    return output;
                }
                
                // existing HDRP code uses the combined function to go directly from packed to frag inputs
                FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
                {
                    UNITY_SETUP_INSTANCE_ID(input);
                    VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
                    return BuildFragInputs(unpacked);
                }
                
                SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
                {
                    SurfaceDescriptionInputs output;
                    ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
                
                    output.WorldSpaceNormal =            normalize(input.tangentToWorld[2].xyz);
                    #if defined(SHADER_STAGE_RAY_TRACING)
                    output.ObjectSpaceNormal =           mul(output.WorldSpaceNormal, (float3x3) ObjectToWorld3x4());
                    #else
                    output.ObjectSpaceNormal =           normalize(mul(output.WorldSpaceNormal, (float3x3) UNITY_MATRIX_M));           // transposed multiplication by inverse matrix to handle normal scale
                    #endif
                    output.TangentSpaceNormal =          float3(0.0f, 0.0f, 1.0f);
                    output.ObjectSpacePosition =         TransformWorldToObject(input.positionRWS);
                
                    // splice point to copy frag inputs custom interpolator pack into the SDI
                    /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
                
                    return output;
                }
                
    
                // --------------------------------------------------
                // Build Surface Data (Specific Material)
    
            void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
                {
                    ZERO_INITIALIZE(SurfaceData, surfaceData);
                
                    // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
                    // however specularOcclusion can come from the graph, so need to be init here so it can be override.
                    surfaceData.specularOcclusion = 1.0;
                
                    surfaceData.baseColor =                 surfaceDescription.BaseColor;
                    surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
                    surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
                    surfaceData.metallic =                  surfaceDescription.Metallic;
                
                    #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                        if (_EnableSSRefraction)
                        {
                
                            surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                            surfaceDescription.Alpha = 1.0;
                        }
                        else
                        {
                            surfaceData.ior = 1.0;
                            surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                            surfaceData.atDistance = 1.0;
                            surfaceData.transmittanceMask = 0.0;
                            surfaceDescription.Alpha = 1.0;
                        }
                    #else
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                    #endif
                
                    // These static material feature allow compile time optimization
                    surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
                    #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_TRANSMISSION
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_ANISOTROPY
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
                    #endif
                
                    #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                        // Require to have setup baseColor
                        // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                        surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
                    #endif
                
                    #ifdef _DOUBLESIDED_ON
                        float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                    #else
                        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                    #endif
                
                    // normal delivered to master node
                    GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
                
                    surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                
                    surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
                
                
                    #if HAVE_DECALS
                        if (_EnableDecals)
                        {
                            float alpha = 1.0;
                            alpha = surfaceDescription.Alpha;
                
                            // Both uses and modifies 'surfaceData.normalWS'.
                            DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                            ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                        }
                    #endif
                
                    bentNormalWS = surfaceData.normalWS;
                
                    surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
                
                    #ifdef DEBUG_DISPLAY
                        if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                        {
                            // TODO: need to update mip info
                            surfaceData.metallic = 0;
                        }
                
                        // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                        // as it can modify attribute use for static lighting
                        ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
                    #endif
                
                    // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
                    // If user provide bent normal then we process a better term
                    #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                        // Just use the value passed through via the slot (not active otherwise)
                    #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                        // If we have bent normal and ambient occlusion, process a specular occlusion
                        surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                    #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                        surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                    #endif
                
                    #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                        surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                    #endif
                }
                
    
                // --------------------------------------------------
                // Get Surface And BuiltinData
    
                void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
                {
                    // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                    #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                    #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                    #endif
                    #endif
    
                    #ifndef SHADER_UNLIT
                    #ifdef _DOUBLESIDED_ON
                        float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                    #else
                        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                    #endif
    
                    ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                    #endif // SHADER_UNLIT
    
                    SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
    
                    #if defined(HAVE_VFX_MODIFICATION)
                    GraphProperties properties;
                    ZERO_INITIALIZE(GraphProperties, properties);
    
                    GetElementPixelProperties(fragInputs, properties);
    
                    SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                    #else
                    SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                    #endif
    
                    // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                    // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                    #ifdef _ALPHATEST_ON
                        float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                        #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                        // The TransparentDepthPrepass is also used with SSR transparent.
                        // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                        // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                        #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                        // DepthPostpass always use its own alpha threshold
                        alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                        #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                        // If use shadow threshold isn't enable we don't allow any test
                        #endif
    
                        GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                    #endif
    
                    #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                    #endif
    
                    #ifndef SHADER_UNLIT
                    float3 bentNormalWS;
                    BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
    
                    // Builtin Data
                    // For back lighting we use the oposite vertex normal
                    InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
    
                    #else
                    BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
    
                    ZERO_INITIALIZE(BuiltinData, builtinData); // No call to InitBuiltinData as we don't have any lighting
                    builtinData.opacity = surfaceDescription.Alpha;
    
                    #if defined(DEBUG_DISPLAY)
                        // Light Layers are currently not used for the Unlit shader (because it is not lit)
                        // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                        // display in the light layers visualization mode, therefore we need the renderingLayers
                        builtinData.renderingLayers = GetMeshRenderingLightLayer();
                    #endif
    
                    #endif // SHADER_UNLIT
    
                    #ifdef _ALPHATEST_ON
                        // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                        builtinData.alphaClipTreshold = alphaCutoff;
                    #endif
    
                    // override sampleBakedGI - not used by Unlit
    
            		// If we want to force forward emissive and we have GBuffer pass, don't do anything
            		#if !(SHADERPASS == SHADERPASS_GBUFFER && defined(_FORCE_FORWARD_EMISSIVE))
                    builtinData.emissiveColor = surfaceDescription.Emission;
            		#endif
    
                    // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                    // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                    // This is a limitation of the current MRT approach.
    
                    #if _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
                    #endif
    
                    // TODO: We should generate distortion / distortionBlur for non distortion pass
                    #if (SHADERPASS == SHADERPASS_DISTORTION)
                    builtinData.distortion = surfaceDescription.Distortion;
                    builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                    #endif
    
                    #ifndef SHADER_UNLIT
                    // PostInitBuiltinData call ApplyDebugToBuiltinData
                    PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                    #else
                    ApplyDebugToBuiltinData(builtinData);
                    #endif
    
                    RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
                }
    
                // --------------------------------------------------
                // Main
    
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassLightTransport.hlsl"
    
                // --------------------------------------------------
                // Visual Effect Vertex Invocations
    
            	#ifdef HAVE_VFX_MODIFICATION
            	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
            	#endif
    
                ENDHLSL
            }
            Pass
            {
                Name "ScenePickingPass"
                Tags
                {
                    "LightMode" = "Picking"
                }
    
                // Render State
                Cull [_CullMode]
    
                // Debug
                // <None>
    
                // --------------------------------------------------
                // Pass
    
                HLSLPROGRAM
    
                // Pragmas
                #pragma instancing_options renderinglayer
                #pragma editor_sync_compilation
                #pragma target 4.5
                #pragma vertex Vert
                #pragma fragment Frag
                #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
                #pragma multi_compile_instancing
                #pragma instancing_options procedural:setupProcedural
    
                // Keywords
                #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
                #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
                #pragma shader_feature_local _ _DOUBLESIDED_ON
                #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
                #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
                #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
                #pragma shader_feature_local_fragment _ _DISABLE_DECALS
                #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
                #pragma shader_feature_local_fragment _ _DISABLE_SSR
                #pragma shader_feature_local_raytracing _ _DISABLE_SSR
                #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
                #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
                #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
                #pragma shader_feature _ _FORCE_FORWARD_EMISSIVE
                // GraphKeywords: <None>
    
                // For custom interpolators to inject a substruct definition before FragInputs definition,
                // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
                struct CustomInterpolators
                {
                    float4 SplatMapColor;
                };
                #define USE_CUSTOMINTERP_SUBSTRUCT
                
    
    
                // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
            	#ifdef HAVE_VFX_MODIFICATION
            	struct FragInputsVFX
                {
                    /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
                };
                #endif
    
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
            	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
    
                // --------------------------------------------------
                // Defines
    
                // Attribute
                #define ATTRIBUTES_NEED_NORMAL
                #define ATTRIBUTES_NEED_TANGENT
                #define VARYINGS_NEED_POSITION_WS
                #define VARYINGS_NEED_TANGENT_TO_WORLD
    
                #define HAVE_MESH_MODIFICATION
    
    
                #define SHADERPASS SHADERPASS_DEPTH_ONLY
                #define SCENEPICKINGPASS 1
    
    
                // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
                // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
                // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
                // to still allow us to rename the field and keyword of this node without breaking existing code.
                #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
                #endif
    
                #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
                #endif
                // end
    
                #ifndef SHADER_UNLIT
                // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
                // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
                #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                    #define VARYINGS_NEED_CULLFACE
                #endif
                #endif
    
                // Specific Material Define
            #define _AMBIENT_OCCLUSION 1
                #define _SPECULAR_OCCLUSION_FROM_AO 1
                #define _ENERGY_CONSERVING_SPECULAR 1
                
                // If we use subsurface scattering, enable output split lighting (for forward pass)
                #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
                    #define OUTPUT_SPLIT_LIGHTING
                #endif
                
                // This shader support recursive rendering for raytracing
                #define HAVE_RECURSIVE_RENDERING
                
                // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
    
                // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
                // we should have a code like this:
                // if !defined(_DISABLE_SSR_TRANSPARENT)
                // pragma multi_compile _ WRITE_NORMAL_BUFFER
                // endif
                // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
                // it based on if SSR transparent in frame settings and not (and stripper can strip it).
                // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
                // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
                // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
                #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                    #define WRITE_NORMAL_BUFFER
                #endif
                #endif
    
                #ifndef DEBUG_DISPLAY
                    // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                    // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                    #if !defined(_SURFACE_TYPE_TRANSPARENT)
                        #if SHADERPASS == SHADERPASS_FORWARD
                        #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                        #elif SHADERPASS == SHADERPASS_GBUFFER
                        #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                        #endif
                    #endif
                #endif
    
                // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
                #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                    #define _DEFERRED_CAPABLE_MATERIAL
                #endif
    
                // Translate transparent motion vector define
                #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                    #define _WRITE_TRANSPARENT_MOTION_VECTOR
                #endif
    
                // Dots Instancing
                // DotsInstancingOptions: <None>
    
                // Various properties
    
                // HybridV1InjectedBuiltinProperties: <None>
    
                // -- Graph Properties
                CBUFFER_START(UnityPerMaterial)
                float2 HeightRemap3;
                float2 HeightRemap2;
                float4 Tiling_Offset3;
                float4 Tiling_Offset0;
                float2 HeightRemap4;
                float4 Tiling_Offset2;
                float2 HeightRemap0;
                float4 LayerMask3_TexelSize;
                float4 LayerMask2_TexelSize;
                float4 LayerNormal3_TexelSize;
                float4 LayerNormal2_TexelSize;
                float2 HeightRemap1;
                float4 Tiling_Offset1;
                float4 Layer0_TexelSize;
                float4 Layer1_TexelSize;
                float4 Layer2_TexelSize;
                float4 Layer3_TexelSize;
                float UVXZScale;
                float4 LayerNormal1_TexelSize;
                float4 LayerNormal0_TexelSize;
                float4 LayerMask1_TexelSize;
                float4 LayerMask0_TexelSize;
                float heightTransition;
                float4 BaseTex_TexelSize;
                float4 BaseNormal_TexelSize;
                float4 BaseMask_TexelSize;
                float4 Tiling_Offset;
                float2 HeightRemap;
                float4 SlopeTex_TexelSize;
                float4 SlopeNormal_TexelSize;
                float4 SlopeMask_TexelSize;
                float4 Tiling_Offset4;
                float2 SlopeRemap;
                float SlopePow;
                float4 _EmissionColor;
                float _UseShadowThreshold;
                float4 _DoubleSidedConstants;
                float _BlendMode;
                float _EnableBlendModePreserveSpecularLighting;
                float _RayTracing;
                float _RefractionModel;
                CBUFFER_END
                
                // Object and Global properties
                SAMPLER(SamplerState_Linear_Repeat);
                TEXTURE2D(LayerMask3);
                SAMPLER(samplerLayerMask3);
                TEXTURE2D(LayerMask2);
                SAMPLER(samplerLayerMask2);
                TEXTURE2D(LayerNormal3);
                SAMPLER(samplerLayerNormal3);
                TEXTURE2D(LayerNormal2);
                SAMPLER(samplerLayerNormal2);
                TEXTURE2D(Layer0);
                SAMPLER(samplerLayer0);
                TEXTURE2D(Layer1);
                SAMPLER(samplerLayer1);
                TEXTURE2D(Layer2);
                SAMPLER(samplerLayer2);
                TEXTURE2D(Layer3);
                SAMPLER(samplerLayer3);
                TEXTURE2D(LayerNormal1);
                SAMPLER(samplerLayerNormal1);
                TEXTURE2D(LayerNormal0);
                SAMPLER(samplerLayerNormal0);
                TEXTURE2D(LayerMask1);
                SAMPLER(samplerLayerMask1);
                TEXTURE2D(LayerMask0);
                SAMPLER(samplerLayerMask0);
                TEXTURE2D(BaseTex);
                SAMPLER(samplerBaseTex);
                TEXTURE2D(BaseNormal);
                SAMPLER(samplerBaseNormal);
                TEXTURE2D(BaseMask);
                SAMPLER(samplerBaseMask);
                TEXTURE2D(SlopeTex);
                SAMPLER(samplerSlopeTex);
                TEXTURE2D(SlopeNormal);
                SAMPLER(samplerSlopeNormal);
                TEXTURE2D(SlopeMask);
                SAMPLER(samplerSlopeMask);
    
                // -- Property used by ScenePickingPass
                #ifdef SCENEPICKINGPASS
                float4 _SelectionID;
                #endif
    
                // -- Properties used by SceneSelectionPass
                #ifdef SCENESELECTIONPASS
                int _ObjectId;
                int _PassValue;
                #endif
    
                // Includes
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
            	#include "Assets/Shaders/GPUTerrainHeight/TerrainVertexPosition.hlsl"
                #include "Assets/Shaders/TerrainShading/HeightBlend.hlsl"
    
                // --------------------------------------------------
                // Structs and Packing
    
                struct AttributesMesh
                {
                     float3 positionOS : POSITION;
                     float3 normalOS : NORMAL;
                     float4 tangentOS : TANGENT;
                    #if UNITY_ANY_INSTANCING_ENABLED
                     uint instanceID : INSTANCEID_SEMANTIC;
                    #endif
                };
                struct VaryingsMeshToPS
                {
                    SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
                     float3 positionRWS;
                     float3 normalWS;
                     float4 tangentWS;
                    #if UNITY_ANY_INSTANCING_ENABLED
                     uint instanceID : CUSTOM_INSTANCE_ID;
                    #endif
                     float4 SplatMapColor;
                };
                struct VertexDescriptionInputs
                {
                     float3 ObjectSpaceNormal;
                     float3 ObjectSpaceTangent;
                     float3 ObjectSpacePosition;
                };
                struct SurfaceDescriptionInputs
                {
                     float3 ObjectSpaceNormal;
                     float3 WorldSpaceNormal;
                     float3 TangentSpaceNormal;
                     float3 ObjectSpacePosition;
                     float4 SplatMapColor;
                };
                struct PackedVaryingsMeshToPS
                {
                    SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
                    #if UNITY_ANY_INSTANCING_ENABLED
                     uint instanceID : CUSTOM_INSTANCE_ID;
                    #endif
                     float3 interp0 : INTERP0;
                     float3 interp1 : INTERP1;
                     float4 interp2 : INTERP2;
                     float4 interp3 : INTERP3;
                };
    
                PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
                {
                    PackedVaryingsMeshToPS output;
                    ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
                    output.positionCS = input.positionCS;
                    output.interp0.xyz =  input.positionRWS;
                    output.interp1.xyz =  input.normalWS;
                    output.interp2.xyzw =  input.tangentWS;
                    #if UNITY_ANY_INSTANCING_ENABLED
                    output.instanceID = input.instanceID;
                    #endif
                    output.interp3.xyzw =  input.SplatMapColor;
                    return output;
                }
                
                VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
                {
                    VaryingsMeshToPS output;
                    output.positionCS = input.positionCS;
                    output.positionRWS = input.interp0.xyz;
                    output.normalWS = input.interp1.xyz;
                    output.tangentWS = input.interp2.xyzw;
                    #if UNITY_ANY_INSTANCING_ENABLED
                    output.instanceID = input.instanceID;
                    #endif
                    output.SplatMapColor = input.interp3.xyzw;
                    return output;
                }
                
    
                // --------------------------------------------------
                // Graph
    
    
                // Graph Functions
                
                void UnityGetInstanceID_float(out float Out)
                {
                #if UNITY_ANY_INSTANCING_ENABLED
                    Out = unity_InstanceID;
                #else
                    Out = 0;
                #endif
                }
                
                void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
                {
                    RGBA = float4(R, G, B, A);
                    RGB = float3(R, G, B);
                    RG = float2(R, G);
                }
                
                void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
                {
                    Out = A / B;
                }
                
                void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
                {
                    Out = UV * Tiling + Offset;
                }
                
                struct Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float
                {
                };
                
                void SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(float4 Tiling_Offset, float2 Vector2, Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float IN, out float2 OutVector2_1)
                {
                    float2 _Property_5ea954dbdecc454b839a01badac3afd6_Out_0 = Vector2;
                    float4 _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0 = Tiling_Offset;
                    float _Split_c19978cb25c5413eaf23432179b0e3af_R_1 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[0];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_G_2 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[1];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_B_3 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[2];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_A_4 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[3];
                    float4 _Combine_387ca93b6841454bad52ea2f221d199f_RGBA_4;
                    float3 _Combine_387ca93b6841454bad52ea2f221d199f_RGB_5;
                    float2 _Combine_387ca93b6841454bad52ea2f221d199f_RG_6;
                    Unity_Combine_float(_Split_c19978cb25c5413eaf23432179b0e3af_R_1, _Split_c19978cb25c5413eaf23432179b0e3af_G_2, 0, 0, _Combine_387ca93b6841454bad52ea2f221d199f_RGBA_4, _Combine_387ca93b6841454bad52ea2f221d199f_RGB_5, _Combine_387ca93b6841454bad52ea2f221d199f_RG_6);
                    float4 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGBA_4;
                    float3 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGB_5;
                    float2 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6;
                    Unity_Combine_float(_Split_c19978cb25c5413eaf23432179b0e3af_B_3, _Split_c19978cb25c5413eaf23432179b0e3af_A_4, 0, 0, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGBA_4, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGB_5, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6);
                    float2 _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3;
                    Unity_TilingAndOffset_float(_Property_5ea954dbdecc454b839a01badac3afd6_Out_0, _Combine_387ca93b6841454bad52ea2f221d199f_RG_6, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6, _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3);
                    OutVector2_1 = _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3;
                }
                
                void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
                {
                    Out = A * B;
                }
                
                void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
                {
                    Out = A * B;
                }
                
                void Desaturate_float(float3 oldcolor, float k, out float3 newcolor){
                    float intensity = dot(oldcolor,float3(0.3,0.59,0.11));
                    newcolor.x = intensity*k + oldcolor.x*(1-k);
                    newcolor.y = intensity*k + oldcolor.y*(1-k);
                    newcolor.z = intensity*k + oldcolor.z*(1-k);
                }
                
                void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
                {
                    Out = A * B;
                }
                
                void Unity_Lerp_float(float A, float B, float T, out float Out)
                {
                    Out = lerp(A, B, T);
                }
                
                struct Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float
                {
                };
                
                void SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(UnityTexture2D Albedo, UnityTexture2D Normal, UnityTexture2D Mask, float DesaturationK, float BrightnessAtten, float2 UV, float2 HeightRemap, Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float IN, out float4 oAlbedo_0, out float4 oNormal_1, out float4 oMask_2)
                {
                    UnityTexture2D _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0 = Albedo;
                    float2 _Property_76ed35a32977448f8ea254bf6de06d33_Out_0 = UV;
                    float4 _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_R_4 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.r;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_G_5 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.g;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_B_6 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.b;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_A_7 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.a;
                    float _Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0 = BrightnessAtten;
                    float4 _Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2);
                    float _Float_f48d9dc0c16249fe8fe5b97c86e7f56c_Out_0 = -0.25;
                    float2 _Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2;
                    Unity_Multiply_float2_float2(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0, (_Float_f48d9dc0c16249fe8fe5b97c86e7f56c_Out_0.xx), _Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2);
                    float4 _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_R_4 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.r;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_G_5 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.g;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_B_6 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.b;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_A_7 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.a;
                    float4 _Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2);
                    float _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0 = DesaturationK;
                    float3 _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1;
                    Desaturate_float((_Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1);
                    float3 _Multiply_410af5ac81154a3aab73254ac228eccd_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2.xyz), _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1, _Multiply_410af5ac81154a3aab73254ac228eccd_Out_2);
                    UnityTexture2D _Property_d05972164bdd4e0189593b8dae00db03_Out_0 = Normal;
                    float4 _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0 = SAMPLE_TEXTURE2D(_Property_d05972164bdd4e0189593b8dae00db03_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d05972164bdd4e0189593b8dae00db03_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0);
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_R_4 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.r;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_G_5 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.g;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_B_6 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.b;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_A_7 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.a;
                    float4 _Multiply_4999f90cbd1848acaf20b253953c0963_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_4999f90cbd1848acaf20b253953c0963_Out_2);
                    float4 _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_d05972164bdd4e0189593b8dae00db03_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d05972164bdd4e0189593b8dae00db03_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0);
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_R_4 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.r;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_G_5 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.g;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_B_6 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.b;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_A_7 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.a;
                    float4 _Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2);
                    float3 _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1;
                    Desaturate_float((_Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1);
                    float3 _Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_4999f90cbd1848acaf20b253953c0963_Out_2.xyz), _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1, _Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2);
                    UnityTexture2D _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0 = Mask;
                    float4 _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0 = SAMPLE_TEXTURE2D(_Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_R_4 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.r;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_G_5 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.g;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_B_6 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.b;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_A_7 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.a;
                    float4 _Multiply_0b2356625aad40439a89b8519e36e62b_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_0b2356625aad40439a89b8519e36e62b_Out_2);
                    float4 _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0 = SAMPLE_TEXTURE2D(_Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_R_4 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.r;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_G_5 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.g;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_B_6 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.b;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_A_7 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.a;
                    float4 _Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2);
                    float3 _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1;
                    Desaturate_float((_Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1);
                    float3 _Multiply_3c8f32d2a057478e869493099765b841_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_0b2356625aad40439a89b8519e36e62b_Out_2.xyz), _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1, _Multiply_3c8f32d2a057478e869493099765b841_Out_2);
                    float _Split_77de2b1a3326407b985f625d91e2063b_R_1 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[0];
                    float _Split_77de2b1a3326407b985f625d91e2063b_G_2 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[1];
                    float _Split_77de2b1a3326407b985f625d91e2063b_B_3 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[2];
                    float _Split_77de2b1a3326407b985f625d91e2063b_A_4 = 0;
                    float2 _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0 = HeightRemap;
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_R_1 = _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0[0];
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_G_2 = _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0[1];
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_B_3 = 0;
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_A_4 = 0;
                    float _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3;
                    Unity_Lerp_float(_Split_0df13f6921fe4db99b01dcff93c3b978_R_1, _Split_0df13f6921fe4db99b01dcff93c3b978_G_2, _Split_77de2b1a3326407b985f625d91e2063b_B_3, _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3);
                    float4 _Combine_17dba591e95443299750f53a93613083_RGBA_4;
                    float3 _Combine_17dba591e95443299750f53a93613083_RGB_5;
                    float2 _Combine_17dba591e95443299750f53a93613083_RG_6;
                    Unity_Combine_float(_Split_77de2b1a3326407b985f625d91e2063b_R_1, _Split_77de2b1a3326407b985f625d91e2063b_G_2, _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3, _Split_77de2b1a3326407b985f625d91e2063b_A_4, _Combine_17dba591e95443299750f53a93613083_RGBA_4, _Combine_17dba591e95443299750f53a93613083_RGB_5, _Combine_17dba591e95443299750f53a93613083_RG_6);
                    oAlbedo_0 = (float4(_Multiply_410af5ac81154a3aab73254ac228eccd_Out_2, 1.0));
                    oNormal_1 = (float4(_Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2, 1.0));
                    oMask_2 = _Combine_17dba591e95443299750f53a93613083_RGBA_4;
                }
                
                void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
                {
                    Out = dot(A, B);
                }
                
                void Unity_Power_float(float A, float B, out float Out)
                {
                    Out = pow(A, B);
                }
                
                void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
                {
                    Out = smoothstep(Edge1, Edge2, In);
                }
                
                void Unity_OneMinus_float(float In, out float Out)
                {
                    Out = 1 - In;
                }
                
                void BlendByMask_float(float4 a, float4 b, float4 c, float4 d, float4 blend, out float4 ret){
                    ret = a*blend.x + b*blend.y + c*blend.z + d*blend.w;
                }
                
                void Unity_Add_float4(float4 A, float4 B, out float4 Out)
                {
                    Out = A + B;
                }
    
                // Graph Vertex
                struct VertexDescription
                {
                    float3 Position;
                    float3 Normal;
                    float3 Tangent;
                    float4 SplatMapColor;
                };
                
                VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
                {
                    VertexDescription description = (VertexDescription)0;
                    float _InstanceID_1b9fa912aec74e76aae6821c84f95467_Out_0;
                    UnityGetInstanceID_float(_InstanceID_1b9fa912aec74e76aae6821c84f95467_Out_0);
                    float3 _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_oposOS_2;
                    float4 _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_color_3;
                    float3 _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_normal_4;
                    GetTerrainVertex_float(_InstanceID_1b9fa912aec74e76aae6821c84f95467_Out_0, IN.ObjectSpacePosition, _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_oposOS_2, _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_color_3, _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_normal_4);
                    description.Position = _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_oposOS_2;
                    description.Normal = _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_normal_4;
                    description.Tangent = IN.ObjectSpaceTangent;
                    description.SplatMapColor = _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_color_3;
                    return description;
                }
    
                // Graph Pixel
                struct SurfaceDescription
                {
                    float3 BaseColor;
                    float3 Emission;
                    float Alpha;
                    float3 BentNormal;
                    float Smoothness;
                    float Occlusion;
                    float3 NormalTS;
                    float Metallic;
                };
                
                SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
                {
                    SurfaceDescription surface = (SurfaceDescription)0;
                    UnityTexture2D _Property_4e780cffb4044909a58e26eaff6361d1_Out_0 = UnityBuildTexture2DStructNoScale(BaseTex);
                    UnityTexture2D _Property_20a5bc7358e64fe8b3327adb9ce635ea_Out_0 = UnityBuildTexture2DStructNoScale(BaseNormal);
                    UnityTexture2D _Property_090d521163b9493189233a9f2e1cf5ed_Out_0 = UnityBuildTexture2DStructNoScale(BaseMask);
                    float4 _Property_6881ae016d754988b27811b95cc834ca_Out_0 = Tiling_Offset;
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_R_1 = IN.ObjectSpacePosition[0];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_G_2 = IN.ObjectSpacePosition[1];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_B_3 = IN.ObjectSpacePosition[2];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_A_4 = 0;
                    float4 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGBA_4;
                    float3 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGB_5;
                    float2 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6;
                    Unity_Combine_float(_Split_3335daa3a4b34f69a62c9c8a1c6f39b2_R_1, _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_B_3, 0, 0, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGBA_4, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGB_5, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6);
                    float _Property_8984e4bf1c26459280f9fece3c52167c_Out_0 = UVXZScale;
                    float2 _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2;
                    Unity_Divide_float2(_Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6, (_Property_8984e4bf1c26459280f9fece3c52167c_Out_0.xx), _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2);
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_737be3819d2c4f29853810a18717cae3;
                    float2 _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_6881ae016d754988b27811b95cc834ca_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1);
                    float2 _Property_dcc00367280c4dc6b11a52aa07754830_Out_0 = HeightRemap;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_6722d68456e84aecb015a07880cbbd46;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_4e780cffb4044909a58e26eaff6361d1_Out_0, _Property_20a5bc7358e64fe8b3327adb9ce635ea_Out_0, _Property_090d521163b9493189233a9f2e1cf5ed_Out_0, 0.25, 4, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1, _Property_dcc00367280c4dc6b11a52aa07754830_Out_0, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2);
                    UnityTexture2D _Property_3d7142ef79234a0ba6cda49555992a80_Out_0 = UnityBuildTexture2DStructNoScale(Layer0);
                    UnityTexture2D _Property_42e52c243a994f04944481ff3627fc2c_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal0);
                    UnityTexture2D _Property_e67647d6cf1b44bebf91845a255b522c_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask0);
                    float4 _Property_4e6c66ba03a842e482f7040c3fe163dc_Out_0 = Tiling_Offset0;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674;
                    float2 _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_4e6c66ba03a842e482f7040c3fe163dc_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1);
                    float2 _Property_8cf19c3a22e64f0a85a51c8cbf5085e7_Out_0 = HeightRemap0;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_3d7142ef79234a0ba6cda49555992a80_Out_0, _Property_42e52c243a994f04944481ff3627fc2c_Out_0, _Property_e67647d6cf1b44bebf91845a255b522c_Out_0, 0.25, 4, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1, _Property_8cf19c3a22e64f0a85a51c8cbf5085e7_Out_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2);
                    UnityTexture2D _Property_1bce6ca387e847e1a43a4534686b655f_Out_0 = UnityBuildTexture2DStructNoScale(Layer1);
                    UnityTexture2D _Property_1e7513acda3b4b20a5a028d0da4bcfb0_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal1);
                    UnityTexture2D _Property_75d4521a27cb403399759cefa7be71f2_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask1);
                    float4 _Property_e17bf3be22544a639340ddea65766b89_Out_0 = Tiling_Offset1;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_df825eb885d947429ce6daf495a641a7;
                    float2 _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_e17bf3be22544a639340ddea65766b89_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1);
                    float2 _Property_d682537de1054cf4b1eddd1680d152fb_Out_0 = HeightRemap1;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_1bce6ca387e847e1a43a4534686b655f_Out_0, _Property_1e7513acda3b4b20a5a028d0da4bcfb0_Out_0, _Property_75d4521a27cb403399759cefa7be71f2_Out_0, 0.25, 4, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1, _Property_d682537de1054cf4b1eddd1680d152fb_Out_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2);
                    UnityTexture2D _Property_b79fba6b5b1f40b88b38803dad2bb2e5_Out_0 = UnityBuildTexture2DStructNoScale(Layer2);
                    UnityTexture2D _Property_a787f1642c6d4570af8ae47ea63a59ed_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal2);
                    UnityTexture2D _Property_f4ae055a87ef48cb8df5c603ca6f72b0_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask2);
                    float4 _Property_e12db1a96427478999d081afcb59d771_Out_0 = Tiling_Offset2;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d;
                    float2 _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_e12db1a96427478999d081afcb59d771_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1);
                    float2 _Property_3be82515dad24d76b9af558757032f30_Out_0 = HeightRemap2;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_b79fba6b5b1f40b88b38803dad2bb2e5_Out_0, _Property_a787f1642c6d4570af8ae47ea63a59ed_Out_0, _Property_f4ae055a87ef48cb8df5c603ca6f72b0_Out_0, 0.25, 4, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1, _Property_3be82515dad24d76b9af558757032f30_Out_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2);
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_R_1 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[0];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_G_2 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[1];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_B_3 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[2];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_A_4 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[3];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_R_1 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[0];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_G_2 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[1];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_B_3 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[2];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_A_4 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[3];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_R_1 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[0];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_G_2 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[1];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_B_3 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[2];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_A_4 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[3];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_R_1 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[0];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_G_2 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[1];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_B_3 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[2];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_A_4 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[3];
                    float4 _Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4;
                    float3 _Combine_f97595cb40654c9a8d82c0297e7280f3_RGB_5;
                    float2 _Combine_f97595cb40654c9a8d82c0297e7280f3_RG_6;
                    Unity_Combine_float(_Split_d81e33a0495c4ac09042d2d39dd09ba5_B_3, _Split_d2ed4cee74e042da88b7348fcfe80cab_B_3, _Split_b3522eb5287e4b28baab87cc1fa16589_B_3, _Split_a4f15428b23a40ef8f25398e9cff2d7c_B_3, _Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4, _Combine_f97595cb40654c9a8d82c0297e7280f3_RGB_5, _Combine_f97595cb40654c9a8d82c0297e7280f3_RG_6);
                    UnityTexture2D _Property_8e8b4d9a2dfc42148eb69519397ecebc_Out_0 = UnityBuildTexture2DStructNoScale(Layer3);
                    UnityTexture2D _Property_1443e12ec6544d2c8e8dcc71d67adb04_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal3);
                    UnityTexture2D _Property_b8f1cfb1112b4d2e8e2fe919f5003fb3_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask3);
                    float4 _Property_d9e7ba461b95446db56c0b99fce9de5d_Out_0 = Tiling_Offset3;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13;
                    float2 _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_d9e7ba461b95446db56c0b99fce9de5d_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1);
                    float2 _Property_e5d43ace4a66401faff3165675d44af0_Out_0 = HeightRemap3;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_8e8b4d9a2dfc42148eb69519397ecebc_Out_0, _Property_1443e12ec6544d2c8e8dcc71d67adb04_Out_0, _Property_b8f1cfb1112b4d2e8e2fe919f5003fb3_Out_0, 0.25, 4, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1, _Property_e5d43ace4a66401faff3165675d44af0_Out_0, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2);
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_R_1 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[0];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_G_2 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[1];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_B_3 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[2];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_A_4 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[3];
                    UnityTexture2D _Property_edf497c59ff340a5897695b2e8e9ed68_Out_0 = UnityBuildTexture2DStructNoScale(SlopeTex);
                    UnityTexture2D _Property_ae03f8d1bb284168ae1cb40c2c8d7dce_Out_0 = UnityBuildTexture2DStructNoScale(SlopeNormal);
                    UnityTexture2D _Property_35050279a32b481b878853831820cb33_Out_0 = UnityBuildTexture2DStructNoScale(SlopeMask);
                    float4 _Property_a3c340f0d1f647858c0d27fc6fa0d127_Out_0 = Tiling_Offset4;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67;
                    float2 _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_a3c340f0d1f647858c0d27fc6fa0d127_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1);
                    float2 _Property_8a3f864a5b9c469b92480bb635123790_Out_0 = HeightRemap4;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_edf497c59ff340a5897695b2e8e9ed68_Out_0, _Property_ae03f8d1bb284168ae1cb40c2c8d7dce_Out_0, _Property_35050279a32b481b878853831820cb33_Out_0, 0.25, 4, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1, _Property_8a3f864a5b9c469b92480bb635123790_Out_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2);
                    float _Split_015a6ee9887b47abb21193d18e609740_R_1 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[0];
                    float _Split_015a6ee9887b47abb21193d18e609740_G_2 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[1];
                    float _Split_015a6ee9887b47abb21193d18e609740_B_3 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[2];
                    float _Split_015a6ee9887b47abb21193d18e609740_A_4 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[3];
                    float4 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4;
                    float3 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGB_5;
                    float2 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RG_6;
                    Unity_Combine_float(_Split_d87c9f86d0a94f8b9b66cbcb29d89dde_B_3, _Split_015a6ee9887b47abb21193d18e609740_B_3, 0, 0, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGB_5, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RG_6);
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_R_1 = IN.SplatMapColor[0];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_G_2 = IN.SplatMapColor[1];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_B_3 = IN.SplatMapColor[2];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_A_4 = IN.SplatMapColor[3];
                    float4 _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4;
                    float3 _Combine_7b79ed205a4b435d8742217505a4c51d_RGB_5;
                    float2 _Combine_7b79ed205a4b435d8742217505a4c51d_RG_6;
                    Unity_Combine_float(1, _Split_ea099c0905af42a6804ca0dc2f58dc2f_R_1, _Split_ea099c0905af42a6804ca0dc2f58dc2f_G_2, _Split_ea099c0905af42a6804ca0dc2f58dc2f_B_3, _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4, _Combine_7b79ed205a4b435d8742217505a4c51d_RGB_5, _Combine_7b79ed205a4b435d8742217505a4c51d_RG_6);
                    float2 _Property_5538a1bac07f487589432be4f79dd05e_Out_0 = SlopeRemap;
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_R_1 = _Property_5538a1bac07f487589432be4f79dd05e_Out_0[0];
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_G_2 = _Property_5538a1bac07f487589432be4f79dd05e_Out_0[1];
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_B_3 = 0;
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_A_4 = 0;
                    float _DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2;
                    Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(0, 1, 0), _DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2);
                    float _Property_795a1803a8484214b987093ec034ab6a_Out_0 = SlopePow;
                    float _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2;
                    Unity_Power_float(_DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2, _Property_795a1803a8484214b987093ec034ab6a_Out_0, _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2);
                    float _Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3;
                    Unity_Smoothstep_float(_Split_03a4c3769cad421fb634dee3fa2beefb_R_1, _Split_03a4c3769cad421fb634dee3fa2beefb_G_2, _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2, _Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3);
                    float _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1;
                    Unity_OneMinus_float(_Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3, _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1);
                    float4 _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4;
                    float3 _Combine_9702e823fbe443b4b07afb499b6912a4_RGB_5;
                    float2 _Combine_9702e823fbe443b4b07afb499b6912a4_RG_6;
                    Unity_Combine_float(_Split_ea099c0905af42a6804ca0dc2f58dc2f_A_4, _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1, 0, 0, _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4, _Combine_9702e823fbe443b4b07afb499b6912a4_RGB_5, _Combine_9702e823fbe443b4b07afb499b6912a4_RG_6);
                    float _Property_d5cf363bc21a4f92a00fac464b9b11cf_Out_0 = heightTransition;
                    float4 _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5;
                    float4 _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6;
                    HeightBlend8Layers_float(_Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4, _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4, _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4, _Property_d5cf363bc21a4f92a00fac464b9b11cf_Out_0, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6);
                    float4 _BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5);
                    float4 _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5);
                    float4 _Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5, _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5, _Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2);
                    float4 _BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5);
                    float4 _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5);
                    float4 _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5, _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5, _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2);
                    float _Split_d9a7a90627444523a2cda58b36d68116_R_1 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[0];
                    float _Split_d9a7a90627444523a2cda58b36d68116_G_2 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[1];
                    float _Split_d9a7a90627444523a2cda58b36d68116_B_3 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[2];
                    float _Split_d9a7a90627444523a2cda58b36d68116_A_4 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[3];
                    float4 _BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5);
                    float4 _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5);
                    float4 _Add_090184f4bd18493ca37179ea1a8364d0_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5, _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5, _Add_090184f4bd18493ca37179ea1a8364d0_Out_2);
                    surface.BaseColor = (_Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2.xyz);
                    surface.Emission = float3(0, 0, 0);
                    surface.Alpha = 1;
                    surface.BentNormal = IN.TangentSpaceNormal;
                    surface.Smoothness = _Split_d9a7a90627444523a2cda58b36d68116_A_4;
                    surface.Occlusion = _Split_d9a7a90627444523a2cda58b36d68116_G_2;
                    surface.NormalTS = (_Add_090184f4bd18493ca37179ea1a8364d0_Out_2.xyz);
                    surface.Metallic = _Split_d9a7a90627444523a2cda58b36d68116_R_1;
                    return surface;
                }
    
                // --------------------------------------------------
                // Build Graph Inputs
    
                
                VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
                {
                    VertexDescriptionInputs output;
                    ZERO_INITIALIZE(VertexDescriptionInputs, output);
                
                    output.ObjectSpaceNormal =           input.normalOS;
                    output.ObjectSpaceTangent =          input.tangentOS.xyz;
                    output.ObjectSpacePosition =         input.positionOS;
                
                    return output;
                }
                
                AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
                #ifdef USE_CUSTOMINTERP_SUBSTRUCT
                    #ifdef TESSELLATION_ON
                    , inout VaryingsMeshToDS varyings
                    #else
                    , inout VaryingsMeshToPS varyings
                    #endif
                #endif
                #ifdef HAVE_VFX_MODIFICATION
                        , AttributesElement element
                #endif
                    )
                {
                    // build graph inputs
                    VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
                    // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
                
                    // evaluate vertex graph
                #ifdef HAVE_VFX_MODIFICATION
                    GraphProperties properties;
                    ZERO_INITIALIZE(GraphProperties, properties);
                
                    // Fetch the vertex graph properties for the particle instance.
                    GetElementVertexProperties(element, properties);
                
                    VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
                #else
                    VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
                #endif
                
                    // copy graph output to the results
                    input.positionOS = vertexDescription.Position;
                    input.normalOS = vertexDescription.Normal;
                    input.tangentOS.xyz = vertexDescription.Tangent;
                
                    varyings.SplatMapColor = vertexDescription.SplatMapColor;
                
                    return input;
                }
                
                FragInputs BuildFragInputs(VaryingsMeshToPS input)
                {
                    FragInputs output;
                    ZERO_INITIALIZE(FragInputs, output);
                
                    // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
                    // TODO: this is a really poor workaround, but the variable is used in a bunch of places
                    // to compute normals which are then passed on elsewhere to compute other values...
                    output.tangentToWorld = k_identity3x3;
                    output.positionSS = input.positionCS;       // input.positionCS is SV_Position
                
                    output.positionRWS = input.positionRWS;
                    output.tangentToWorld = BuildTangentToWorld(input.tangentWS, input.normalWS);
                
                #ifdef HAVE_VFX_MODIFICATION
                    // FragInputs from VFX come from two places: Interpolator or CBuffer.
                    /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
                
                #endif
                
                    // splice point to copy custom interpolator fields from varyings to frag inputs
                    output.customInterpolators.SplatMapColor = input.SplatMapColor;
                
                    return output;
                }
                
                // existing HDRP code uses the combined function to go directly from packed to frag inputs
                FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
                {
                    UNITY_SETUP_INSTANCE_ID(input);
                    VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
                    return BuildFragInputs(unpacked);
                }
                
                SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
                {
                    SurfaceDescriptionInputs output;
                    ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
                
                    output.WorldSpaceNormal =            normalize(input.tangentToWorld[2].xyz);
                    #if defined(SHADER_STAGE_RAY_TRACING)
                    output.ObjectSpaceNormal =           mul(output.WorldSpaceNormal, (float3x3) ObjectToWorld3x4());
                    #else
                    output.ObjectSpaceNormal =           normalize(mul(output.WorldSpaceNormal, (float3x3) UNITY_MATRIX_M));           // transposed multiplication by inverse matrix to handle normal scale
                    #endif
                    output.TangentSpaceNormal =          float3(0.0f, 0.0f, 1.0f);
                    output.ObjectSpacePosition =         TransformWorldToObject(input.positionRWS);
                
                    // splice point to copy frag inputs custom interpolator pack into the SDI
                    output.SplatMapColor = input.customInterpolators.SplatMapColor;
                
                    return output;
                }
                
    
                // --------------------------------------------------
                // Build Surface Data (Specific Material)
    
            void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
                {
                    ZERO_INITIALIZE(SurfaceData, surfaceData);
                
                    // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
                    // however specularOcclusion can come from the graph, so need to be init here so it can be override.
                    surfaceData.specularOcclusion = 1.0;
                
                    surfaceData.baseColor =                 surfaceDescription.BaseColor;
                    surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
                    surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
                    surfaceData.metallic =                  surfaceDescription.Metallic;
                
                    #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                        if (_EnableSSRefraction)
                        {
                
                            surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                            surfaceDescription.Alpha = 1.0;
                        }
                        else
                        {
                            surfaceData.ior = 1.0;
                            surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                            surfaceData.atDistance = 1.0;
                            surfaceData.transmittanceMask = 0.0;
                            surfaceDescription.Alpha = 1.0;
                        }
                    #else
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                    #endif
                
                    // These static material feature allow compile time optimization
                    surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
                    #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_TRANSMISSION
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_ANISOTROPY
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
                    #endif
                
                    #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                        // Require to have setup baseColor
                        // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                        surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
                    #endif
                
                    #ifdef _DOUBLESIDED_ON
                        float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                    #else
                        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                    #endif
                
                    // normal delivered to master node
                    GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
                
                    surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                
                    surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
                
                
                    #if HAVE_DECALS
                        if (_EnableDecals)
                        {
                            float alpha = 1.0;
                            alpha = surfaceDescription.Alpha;
                
                            // Both uses and modifies 'surfaceData.normalWS'.
                            DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                            ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                        }
                    #endif
                
                    bentNormalWS = surfaceData.normalWS;
                
                    surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
                
                    #ifdef DEBUG_DISPLAY
                        if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                        {
                            // TODO: need to update mip info
                            surfaceData.metallic = 0;
                        }
                
                        // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                        // as it can modify attribute use for static lighting
                        ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
                    #endif
                
                    // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
                    // If user provide bent normal then we process a better term
                    #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                        // Just use the value passed through via the slot (not active otherwise)
                    #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                        // If we have bent normal and ambient occlusion, process a specular occlusion
                        surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                    #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                        surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                    #endif
                
                    #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                        surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                    #endif
                }
                
    
                // --------------------------------------------------
                // Get Surface And BuiltinData
    
                void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
                {
                    // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                    #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                    #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                    #endif
                    #endif
    
                    #ifndef SHADER_UNLIT
                    #ifdef _DOUBLESIDED_ON
                        float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                    #else
                        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                    #endif
    
                    ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                    #endif // SHADER_UNLIT
    
                    SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
    
                    #if defined(HAVE_VFX_MODIFICATION)
                    GraphProperties properties;
                    ZERO_INITIALIZE(GraphProperties, properties);
    
                    GetElementPixelProperties(fragInputs, properties);
    
                    SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                    #else
                    SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                    #endif
    
                    // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                    // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                    #ifdef _ALPHATEST_ON
                        float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                        #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                        // The TransparentDepthPrepass is also used with SSR transparent.
                        // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                        // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                        #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                        // DepthPostpass always use its own alpha threshold
                        alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                        #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                        // If use shadow threshold isn't enable we don't allow any test
                        #endif
    
                        GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                    #endif
    
                    #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                    #endif
    
                    #ifndef SHADER_UNLIT
                    float3 bentNormalWS;
                    BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
    
                    // Builtin Data
                    // For back lighting we use the oposite vertex normal
                    InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
    
                    #else
                    BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
    
                    ZERO_INITIALIZE(BuiltinData, builtinData); // No call to InitBuiltinData as we don't have any lighting
                    builtinData.opacity = surfaceDescription.Alpha;
    
                    #if defined(DEBUG_DISPLAY)
                        // Light Layers are currently not used for the Unlit shader (because it is not lit)
                        // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                        // display in the light layers visualization mode, therefore we need the renderingLayers
                        builtinData.renderingLayers = GetMeshRenderingLightLayer();
                    #endif
    
                    #endif // SHADER_UNLIT
    
                    #ifdef _ALPHATEST_ON
                        // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                        builtinData.alphaClipTreshold = alphaCutoff;
                    #endif
    
                    // override sampleBakedGI - not used by Unlit
    
            		// If we want to force forward emissive and we have GBuffer pass, don't do anything
            		#if !(SHADERPASS == SHADERPASS_GBUFFER && defined(_FORCE_FORWARD_EMISSIVE))
                    builtinData.emissiveColor = surfaceDescription.Emission;
            		#endif
    
                    // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                    // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                    // This is a limitation of the current MRT approach.
    
                    #if _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
                    #endif
    
                    // TODO: We should generate distortion / distortionBlur for non distortion pass
                    #if (SHADERPASS == SHADERPASS_DISTORTION)
                    builtinData.distortion = surfaceDescription.Distortion;
                    builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                    #endif
    
                    #ifndef SHADER_UNLIT
                    // PostInitBuiltinData call ApplyDebugToBuiltinData
                    PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                    #else
                    ApplyDebugToBuiltinData(builtinData);
                    #endif
    
                    RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
                }
    
                // --------------------------------------------------
                // Main
    
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
    
                // --------------------------------------------------
                // Visual Effect Vertex Invocations
    
            	#ifdef HAVE_VFX_MODIFICATION
            	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
            	#endif
    
                ENDHLSL
            }
            Pass
            {
                Name "SceneSelectionPass"
                Tags
                {
                    "LightMode" = "SceneSelectionPass"
                }
    
                // Render State
                Cull Off
    
                // Debug
                // <None>
    
                // --------------------------------------------------
                // Pass
    
                HLSLPROGRAM
    
                // Pragmas
                #pragma instancing_options renderinglayer
                #pragma editor_sync_compilation
                #pragma target 4.5
                #pragma vertex Vert
                #pragma fragment Frag
                #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
                #pragma multi_compile_instancing
                #pragma instancing_options procedural:setupProcedural
    
                // Keywords
                #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
                #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
                #pragma shader_feature_local _ _DOUBLESIDED_ON
                #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
                #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
                #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
                #pragma shader_feature_local_fragment _ _DISABLE_DECALS
                #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
                #pragma shader_feature_local_fragment _ _DISABLE_SSR
                #pragma shader_feature_local_raytracing _ _DISABLE_SSR
                #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
                #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
                #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
                #pragma shader_feature _ _FORCE_FORWARD_EMISSIVE
                // GraphKeywords: <None>
    
                // For custom interpolators to inject a substruct definition before FragInputs definition,
                // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
                struct CustomInterpolators
                {
                    float4 SplatMapColor;
                };
                #define USE_CUSTOMINTERP_SUBSTRUCT
                
    
    
                // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
            	#ifdef HAVE_VFX_MODIFICATION
            	struct FragInputsVFX
                {
                    /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
                };
                #endif
    
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
            	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
    
                // --------------------------------------------------
                // Defines
    
                // Attribute
                #define ATTRIBUTES_NEED_NORMAL
                #define ATTRIBUTES_NEED_TANGENT
                #define VARYINGS_NEED_POSITION_WS
                #define VARYINGS_NEED_TANGENT_TO_WORLD
    
                #define HAVE_MESH_MODIFICATION
    
    
                #define SHADERPASS SHADERPASS_DEPTH_ONLY
                #define RAYTRACING_SHADER_GRAPH_DEFAULT
                #define SCENESELECTIONPASS 1
    
    
                // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
                // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
                // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
                // to still allow us to rename the field and keyword of this node without breaking existing code.
                #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
                #endif
    
                #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
                #endif
                // end
    
                #ifndef SHADER_UNLIT
                // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
                // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
                #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                    #define VARYINGS_NEED_CULLFACE
                #endif
                #endif
    
                // Specific Material Define
            #define _AMBIENT_OCCLUSION 1
                #define _SPECULAR_OCCLUSION_FROM_AO 1
                #define _ENERGY_CONSERVING_SPECULAR 1
                
                // If we use subsurface scattering, enable output split lighting (for forward pass)
                #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
                    #define OUTPUT_SPLIT_LIGHTING
                #endif
                
                // This shader support recursive rendering for raytracing
                #define HAVE_RECURSIVE_RENDERING
                
                // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
    
                // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
                // we should have a code like this:
                // if !defined(_DISABLE_SSR_TRANSPARENT)
                // pragma multi_compile _ WRITE_NORMAL_BUFFER
                // endif
                // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
                // it based on if SSR transparent in frame settings and not (and stripper can strip it).
                // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
                // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
                // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
                #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                    #define WRITE_NORMAL_BUFFER
                #endif
                #endif
    
                #ifndef DEBUG_DISPLAY
                    // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                    // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                    #if !defined(_SURFACE_TYPE_TRANSPARENT)
                        #if SHADERPASS == SHADERPASS_FORWARD
                        #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                        #elif SHADERPASS == SHADERPASS_GBUFFER
                        #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                        #endif
                    #endif
                #endif
    
                // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
                #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                    #define _DEFERRED_CAPABLE_MATERIAL
                #endif
    
                // Translate transparent motion vector define
                #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                    #define _WRITE_TRANSPARENT_MOTION_VECTOR
                #endif
    
                // Dots Instancing
                // DotsInstancingOptions: <None>
    
                // Various properties
    
                // HybridV1InjectedBuiltinProperties: <None>
    
                // -- Graph Properties
                CBUFFER_START(UnityPerMaterial)
                float2 HeightRemap3;
                float2 HeightRemap2;
                float4 Tiling_Offset3;
                float4 Tiling_Offset0;
                float2 HeightRemap4;
                float4 Tiling_Offset2;
                float2 HeightRemap0;
                float4 LayerMask3_TexelSize;
                float4 LayerMask2_TexelSize;
                float4 LayerNormal3_TexelSize;
                float4 LayerNormal2_TexelSize;
                float2 HeightRemap1;
                float4 Tiling_Offset1;
                float4 Layer0_TexelSize;
                float4 Layer1_TexelSize;
                float4 Layer2_TexelSize;
                float4 Layer3_TexelSize;
                float UVXZScale;
                float4 LayerNormal1_TexelSize;
                float4 LayerNormal0_TexelSize;
                float4 LayerMask1_TexelSize;
                float4 LayerMask0_TexelSize;
                float heightTransition;
                float4 BaseTex_TexelSize;
                float4 BaseNormal_TexelSize;
                float4 BaseMask_TexelSize;
                float4 Tiling_Offset;
                float2 HeightRemap;
                float4 SlopeTex_TexelSize;
                float4 SlopeNormal_TexelSize;
                float4 SlopeMask_TexelSize;
                float4 Tiling_Offset4;
                float2 SlopeRemap;
                float SlopePow;
                float4 _EmissionColor;
                float _UseShadowThreshold;
                float4 _DoubleSidedConstants;
                float _BlendMode;
                float _EnableBlendModePreserveSpecularLighting;
                float _RayTracing;
                float _RefractionModel;
                CBUFFER_END
                
                // Object and Global properties
                SAMPLER(SamplerState_Linear_Repeat);
                TEXTURE2D(LayerMask3);
                SAMPLER(samplerLayerMask3);
                TEXTURE2D(LayerMask2);
                SAMPLER(samplerLayerMask2);
                TEXTURE2D(LayerNormal3);
                SAMPLER(samplerLayerNormal3);
                TEXTURE2D(LayerNormal2);
                SAMPLER(samplerLayerNormal2);
                TEXTURE2D(Layer0);
                SAMPLER(samplerLayer0);
                TEXTURE2D(Layer1);
                SAMPLER(samplerLayer1);
                TEXTURE2D(Layer2);
                SAMPLER(samplerLayer2);
                TEXTURE2D(Layer3);
                SAMPLER(samplerLayer3);
                TEXTURE2D(LayerNormal1);
                SAMPLER(samplerLayerNormal1);
                TEXTURE2D(LayerNormal0);
                SAMPLER(samplerLayerNormal0);
                TEXTURE2D(LayerMask1);
                SAMPLER(samplerLayerMask1);
                TEXTURE2D(LayerMask0);
                SAMPLER(samplerLayerMask0);
                TEXTURE2D(BaseTex);
                SAMPLER(samplerBaseTex);
                TEXTURE2D(BaseNormal);
                SAMPLER(samplerBaseNormal);
                TEXTURE2D(BaseMask);
                SAMPLER(samplerBaseMask);
                TEXTURE2D(SlopeTex);
                SAMPLER(samplerSlopeTex);
                TEXTURE2D(SlopeNormal);
                SAMPLER(samplerSlopeNormal);
                TEXTURE2D(SlopeMask);
                SAMPLER(samplerSlopeMask);
    
                // -- Property used by ScenePickingPass
                #ifdef SCENEPICKINGPASS
                float4 _SelectionID;
                #endif
    
                // -- Properties used by SceneSelectionPass
                #ifdef SCENESELECTIONPASS
                int _ObjectId;
                int _PassValue;
                #endif
    
                // Includes
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
            	#include "Assets/Shaders/GPUTerrainHeight/TerrainVertexPosition.hlsl"
                #include "Assets/Shaders/TerrainShading/HeightBlend.hlsl"
    
                // --------------------------------------------------
                // Structs and Packing
    
                struct AttributesMesh
                {
                     float3 positionOS : POSITION;
                     float3 normalOS : NORMAL;
                     float4 tangentOS : TANGENT;
                    #if UNITY_ANY_INSTANCING_ENABLED
                     uint instanceID : INSTANCEID_SEMANTIC;
                    #endif
                };
                struct VaryingsMeshToPS
                {
                    SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
                     float3 positionRWS;
                     float3 normalWS;
                     float4 tangentWS;
                    #if UNITY_ANY_INSTANCING_ENABLED
                     uint instanceID : CUSTOM_INSTANCE_ID;
                    #endif
                     float4 SplatMapColor;
                };
                struct VertexDescriptionInputs
                {
                     float3 ObjectSpaceNormal;
                     float3 ObjectSpaceTangent;
                     float3 ObjectSpacePosition;
                };
                struct SurfaceDescriptionInputs
                {
                     float3 ObjectSpaceNormal;
                     float3 WorldSpaceNormal;
                     float3 TangentSpaceNormal;
                     float3 ObjectSpacePosition;
                     float4 SplatMapColor;
                };
                struct PackedVaryingsMeshToPS
                {
                    SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
                    #if UNITY_ANY_INSTANCING_ENABLED
                     uint instanceID : CUSTOM_INSTANCE_ID;
                    #endif
                     float3 interp0 : INTERP0;
                     float3 interp1 : INTERP1;
                     float4 interp2 : INTERP2;
                     float4 interp3 : INTERP3;
                };
    
                PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
                {
                    PackedVaryingsMeshToPS output;
                    ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
                    output.positionCS = input.positionCS;
                    output.interp0.xyz =  input.positionRWS;
                    output.interp1.xyz =  input.normalWS;
                    output.interp2.xyzw =  input.tangentWS;
                    #if UNITY_ANY_INSTANCING_ENABLED
                    output.instanceID = input.instanceID;
                    #endif
                    output.interp3.xyzw =  input.SplatMapColor;
                    return output;
                }
                
                VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
                {
                    VaryingsMeshToPS output;
                    output.positionCS = input.positionCS;
                    output.positionRWS = input.interp0.xyz;
                    output.normalWS = input.interp1.xyz;
                    output.tangentWS = input.interp2.xyzw;
                    #if UNITY_ANY_INSTANCING_ENABLED
                    output.instanceID = input.instanceID;
                    #endif
                    output.SplatMapColor = input.interp3.xyzw;
                    return output;
                }
                
    
                // --------------------------------------------------
                // Graph
    
    
                // Graph Functions
                
                void UnityGetInstanceID_float(out float Out)
                {
                #if UNITY_ANY_INSTANCING_ENABLED
                    Out = unity_InstanceID;
                #else
                    Out = 0;
                #endif
                }
                
                void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
                {
                    RGBA = float4(R, G, B, A);
                    RGB = float3(R, G, B);
                    RG = float2(R, G);
                }
                
                void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
                {
                    Out = A / B;
                }
                
                void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
                {
                    Out = UV * Tiling + Offset;
                }
                
                struct Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float
                {
                };
                
                void SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(float4 Tiling_Offset, float2 Vector2, Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float IN, out float2 OutVector2_1)
                {
                    float2 _Property_5ea954dbdecc454b839a01badac3afd6_Out_0 = Vector2;
                    float4 _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0 = Tiling_Offset;
                    float _Split_c19978cb25c5413eaf23432179b0e3af_R_1 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[0];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_G_2 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[1];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_B_3 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[2];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_A_4 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[3];
                    float4 _Combine_387ca93b6841454bad52ea2f221d199f_RGBA_4;
                    float3 _Combine_387ca93b6841454bad52ea2f221d199f_RGB_5;
                    float2 _Combine_387ca93b6841454bad52ea2f221d199f_RG_6;
                    Unity_Combine_float(_Split_c19978cb25c5413eaf23432179b0e3af_R_1, _Split_c19978cb25c5413eaf23432179b0e3af_G_2, 0, 0, _Combine_387ca93b6841454bad52ea2f221d199f_RGBA_4, _Combine_387ca93b6841454bad52ea2f221d199f_RGB_5, _Combine_387ca93b6841454bad52ea2f221d199f_RG_6);
                    float4 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGBA_4;
                    float3 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGB_5;
                    float2 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6;
                    Unity_Combine_float(_Split_c19978cb25c5413eaf23432179b0e3af_B_3, _Split_c19978cb25c5413eaf23432179b0e3af_A_4, 0, 0, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGBA_4, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGB_5, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6);
                    float2 _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3;
                    Unity_TilingAndOffset_float(_Property_5ea954dbdecc454b839a01badac3afd6_Out_0, _Combine_387ca93b6841454bad52ea2f221d199f_RG_6, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6, _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3);
                    OutVector2_1 = _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3;
                }
                
                void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
                {
                    Out = A * B;
                }
                
                void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
                {
                    Out = A * B;
                }
                
                void Desaturate_float(float3 oldcolor, float k, out float3 newcolor){
                    float intensity = dot(oldcolor,float3(0.3,0.59,0.11));
                    newcolor.x = intensity*k + oldcolor.x*(1-k);
                    newcolor.y = intensity*k + oldcolor.y*(1-k);
                    newcolor.z = intensity*k + oldcolor.z*(1-k);
                }
                
                void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
                {
                    Out = A * B;
                }
                
                void Unity_Lerp_float(float A, float B, float T, out float Out)
                {
                    Out = lerp(A, B, T);
                }
                
                struct Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float
                {
                };
                
                void SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(UnityTexture2D Albedo, UnityTexture2D Normal, UnityTexture2D Mask, float DesaturationK, float BrightnessAtten, float2 UV, float2 HeightRemap, Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float IN, out float4 oAlbedo_0, out float4 oNormal_1, out float4 oMask_2)
                {
                    UnityTexture2D _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0 = Albedo;
                    float2 _Property_76ed35a32977448f8ea254bf6de06d33_Out_0 = UV;
                    float4 _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_R_4 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.r;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_G_5 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.g;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_B_6 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.b;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_A_7 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.a;
                    float _Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0 = BrightnessAtten;
                    float4 _Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2);
                    float _Float_f48d9dc0c16249fe8fe5b97c86e7f56c_Out_0 = -0.25;
                    float2 _Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2;
                    Unity_Multiply_float2_float2(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0, (_Float_f48d9dc0c16249fe8fe5b97c86e7f56c_Out_0.xx), _Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2);
                    float4 _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_R_4 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.r;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_G_5 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.g;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_B_6 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.b;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_A_7 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.a;
                    float4 _Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2);
                    float _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0 = DesaturationK;
                    float3 _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1;
                    Desaturate_float((_Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1);
                    float3 _Multiply_410af5ac81154a3aab73254ac228eccd_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2.xyz), _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1, _Multiply_410af5ac81154a3aab73254ac228eccd_Out_2);
                    UnityTexture2D _Property_d05972164bdd4e0189593b8dae00db03_Out_0 = Normal;
                    float4 _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0 = SAMPLE_TEXTURE2D(_Property_d05972164bdd4e0189593b8dae00db03_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d05972164bdd4e0189593b8dae00db03_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0);
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_R_4 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.r;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_G_5 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.g;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_B_6 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.b;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_A_7 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.a;
                    float4 _Multiply_4999f90cbd1848acaf20b253953c0963_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_4999f90cbd1848acaf20b253953c0963_Out_2);
                    float4 _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_d05972164bdd4e0189593b8dae00db03_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d05972164bdd4e0189593b8dae00db03_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0);
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_R_4 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.r;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_G_5 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.g;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_B_6 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.b;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_A_7 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.a;
                    float4 _Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2);
                    float3 _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1;
                    Desaturate_float((_Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1);
                    float3 _Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_4999f90cbd1848acaf20b253953c0963_Out_2.xyz), _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1, _Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2);
                    UnityTexture2D _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0 = Mask;
                    float4 _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0 = SAMPLE_TEXTURE2D(_Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_R_4 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.r;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_G_5 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.g;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_B_6 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.b;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_A_7 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.a;
                    float4 _Multiply_0b2356625aad40439a89b8519e36e62b_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_0b2356625aad40439a89b8519e36e62b_Out_2);
                    float4 _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0 = SAMPLE_TEXTURE2D(_Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_R_4 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.r;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_G_5 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.g;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_B_6 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.b;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_A_7 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.a;
                    float4 _Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2);
                    float3 _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1;
                    Desaturate_float((_Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1);
                    float3 _Multiply_3c8f32d2a057478e869493099765b841_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_0b2356625aad40439a89b8519e36e62b_Out_2.xyz), _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1, _Multiply_3c8f32d2a057478e869493099765b841_Out_2);
                    float _Split_77de2b1a3326407b985f625d91e2063b_R_1 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[0];
                    float _Split_77de2b1a3326407b985f625d91e2063b_G_2 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[1];
                    float _Split_77de2b1a3326407b985f625d91e2063b_B_3 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[2];
                    float _Split_77de2b1a3326407b985f625d91e2063b_A_4 = 0;
                    float2 _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0 = HeightRemap;
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_R_1 = _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0[0];
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_G_2 = _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0[1];
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_B_3 = 0;
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_A_4 = 0;
                    float _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3;
                    Unity_Lerp_float(_Split_0df13f6921fe4db99b01dcff93c3b978_R_1, _Split_0df13f6921fe4db99b01dcff93c3b978_G_2, _Split_77de2b1a3326407b985f625d91e2063b_B_3, _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3);
                    float4 _Combine_17dba591e95443299750f53a93613083_RGBA_4;
                    float3 _Combine_17dba591e95443299750f53a93613083_RGB_5;
                    float2 _Combine_17dba591e95443299750f53a93613083_RG_6;
                    Unity_Combine_float(_Split_77de2b1a3326407b985f625d91e2063b_R_1, _Split_77de2b1a3326407b985f625d91e2063b_G_2, _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3, _Split_77de2b1a3326407b985f625d91e2063b_A_4, _Combine_17dba591e95443299750f53a93613083_RGBA_4, _Combine_17dba591e95443299750f53a93613083_RGB_5, _Combine_17dba591e95443299750f53a93613083_RG_6);
                    oAlbedo_0 = (float4(_Multiply_410af5ac81154a3aab73254ac228eccd_Out_2, 1.0));
                    oNormal_1 = (float4(_Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2, 1.0));
                    oMask_2 = _Combine_17dba591e95443299750f53a93613083_RGBA_4;
                }
                
                void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
                {
                    Out = dot(A, B);
                }
                
                void Unity_Power_float(float A, float B, out float Out)
                {
                    Out = pow(A, B);
                }
                
                void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
                {
                    Out = smoothstep(Edge1, Edge2, In);
                }
                
                void Unity_OneMinus_float(float In, out float Out)
                {
                    Out = 1 - In;
                }
                
                void BlendByMask_float(float4 a, float4 b, float4 c, float4 d, float4 blend, out float4 ret){
                    ret = a*blend.x + b*blend.y + c*blend.z + d*blend.w;
                }
                
                void Unity_Add_float4(float4 A, float4 B, out float4 Out)
                {
                    Out = A + B;
                }
    
                // Graph Vertex
                struct VertexDescription
                {
                    float3 Position;
                    float3 Normal;
                    float3 Tangent;
                    float4 SplatMapColor;
                };
                
                VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
                {
                    VertexDescription description = (VertexDescription)0;
                    float _InstanceID_1b9fa912aec74e76aae6821c84f95467_Out_0;
                    UnityGetInstanceID_float(_InstanceID_1b9fa912aec74e76aae6821c84f95467_Out_0);
                    float3 _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_oposOS_2;
                    float4 _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_color_3;
                    float3 _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_normal_4;
                    GetTerrainVertex_float(_InstanceID_1b9fa912aec74e76aae6821c84f95467_Out_0, IN.ObjectSpacePosition, _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_oposOS_2, _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_color_3, _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_normal_4);
                    description.Position = _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_oposOS_2;
                    description.Normal = _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_normal_4;
                    description.Tangent = IN.ObjectSpaceTangent;
                    description.SplatMapColor = _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_color_3;
                    return description;
                }
    
                // Graph Pixel
                struct SurfaceDescription
                {
                    float3 BaseColor;
                    float3 Emission;
                    float Alpha;
                    float3 BentNormal;
                    float Smoothness;
                    float Occlusion;
                    float3 NormalTS;
                    float Metallic;
                };
                
                SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
                {
                    SurfaceDescription surface = (SurfaceDescription)0;
                    UnityTexture2D _Property_4e780cffb4044909a58e26eaff6361d1_Out_0 = UnityBuildTexture2DStructNoScale(BaseTex);
                    UnityTexture2D _Property_20a5bc7358e64fe8b3327adb9ce635ea_Out_0 = UnityBuildTexture2DStructNoScale(BaseNormal);
                    UnityTexture2D _Property_090d521163b9493189233a9f2e1cf5ed_Out_0 = UnityBuildTexture2DStructNoScale(BaseMask);
                    float4 _Property_6881ae016d754988b27811b95cc834ca_Out_0 = Tiling_Offset;
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_R_1 = IN.ObjectSpacePosition[0];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_G_2 = IN.ObjectSpacePosition[1];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_B_3 = IN.ObjectSpacePosition[2];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_A_4 = 0;
                    float4 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGBA_4;
                    float3 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGB_5;
                    float2 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6;
                    Unity_Combine_float(_Split_3335daa3a4b34f69a62c9c8a1c6f39b2_R_1, _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_B_3, 0, 0, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGBA_4, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGB_5, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6);
                    float _Property_8984e4bf1c26459280f9fece3c52167c_Out_0 = UVXZScale;
                    float2 _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2;
                    Unity_Divide_float2(_Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6, (_Property_8984e4bf1c26459280f9fece3c52167c_Out_0.xx), _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2);
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_737be3819d2c4f29853810a18717cae3;
                    float2 _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_6881ae016d754988b27811b95cc834ca_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1);
                    float2 _Property_dcc00367280c4dc6b11a52aa07754830_Out_0 = HeightRemap;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_6722d68456e84aecb015a07880cbbd46;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_4e780cffb4044909a58e26eaff6361d1_Out_0, _Property_20a5bc7358e64fe8b3327adb9ce635ea_Out_0, _Property_090d521163b9493189233a9f2e1cf5ed_Out_0, 0.25, 4, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1, _Property_dcc00367280c4dc6b11a52aa07754830_Out_0, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2);
                    UnityTexture2D _Property_3d7142ef79234a0ba6cda49555992a80_Out_0 = UnityBuildTexture2DStructNoScale(Layer0);
                    UnityTexture2D _Property_42e52c243a994f04944481ff3627fc2c_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal0);
                    UnityTexture2D _Property_e67647d6cf1b44bebf91845a255b522c_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask0);
                    float4 _Property_4e6c66ba03a842e482f7040c3fe163dc_Out_0 = Tiling_Offset0;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674;
                    float2 _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_4e6c66ba03a842e482f7040c3fe163dc_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1);
                    float2 _Property_8cf19c3a22e64f0a85a51c8cbf5085e7_Out_0 = HeightRemap0;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_3d7142ef79234a0ba6cda49555992a80_Out_0, _Property_42e52c243a994f04944481ff3627fc2c_Out_0, _Property_e67647d6cf1b44bebf91845a255b522c_Out_0, 0.25, 4, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1, _Property_8cf19c3a22e64f0a85a51c8cbf5085e7_Out_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2);
                    UnityTexture2D _Property_1bce6ca387e847e1a43a4534686b655f_Out_0 = UnityBuildTexture2DStructNoScale(Layer1);
                    UnityTexture2D _Property_1e7513acda3b4b20a5a028d0da4bcfb0_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal1);
                    UnityTexture2D _Property_75d4521a27cb403399759cefa7be71f2_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask1);
                    float4 _Property_e17bf3be22544a639340ddea65766b89_Out_0 = Tiling_Offset1;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_df825eb885d947429ce6daf495a641a7;
                    float2 _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_e17bf3be22544a639340ddea65766b89_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1);
                    float2 _Property_d682537de1054cf4b1eddd1680d152fb_Out_0 = HeightRemap1;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_1bce6ca387e847e1a43a4534686b655f_Out_0, _Property_1e7513acda3b4b20a5a028d0da4bcfb0_Out_0, _Property_75d4521a27cb403399759cefa7be71f2_Out_0, 0.25, 4, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1, _Property_d682537de1054cf4b1eddd1680d152fb_Out_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2);
                    UnityTexture2D _Property_b79fba6b5b1f40b88b38803dad2bb2e5_Out_0 = UnityBuildTexture2DStructNoScale(Layer2);
                    UnityTexture2D _Property_a787f1642c6d4570af8ae47ea63a59ed_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal2);
                    UnityTexture2D _Property_f4ae055a87ef48cb8df5c603ca6f72b0_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask2);
                    float4 _Property_e12db1a96427478999d081afcb59d771_Out_0 = Tiling_Offset2;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d;
                    float2 _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_e12db1a96427478999d081afcb59d771_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1);
                    float2 _Property_3be82515dad24d76b9af558757032f30_Out_0 = HeightRemap2;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_b79fba6b5b1f40b88b38803dad2bb2e5_Out_0, _Property_a787f1642c6d4570af8ae47ea63a59ed_Out_0, _Property_f4ae055a87ef48cb8df5c603ca6f72b0_Out_0, 0.25, 4, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1, _Property_3be82515dad24d76b9af558757032f30_Out_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2);
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_R_1 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[0];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_G_2 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[1];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_B_3 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[2];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_A_4 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[3];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_R_1 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[0];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_G_2 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[1];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_B_3 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[2];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_A_4 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[3];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_R_1 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[0];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_G_2 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[1];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_B_3 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[2];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_A_4 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[3];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_R_1 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[0];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_G_2 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[1];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_B_3 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[2];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_A_4 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[3];
                    float4 _Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4;
                    float3 _Combine_f97595cb40654c9a8d82c0297e7280f3_RGB_5;
                    float2 _Combine_f97595cb40654c9a8d82c0297e7280f3_RG_6;
                    Unity_Combine_float(_Split_d81e33a0495c4ac09042d2d39dd09ba5_B_3, _Split_d2ed4cee74e042da88b7348fcfe80cab_B_3, _Split_b3522eb5287e4b28baab87cc1fa16589_B_3, _Split_a4f15428b23a40ef8f25398e9cff2d7c_B_3, _Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4, _Combine_f97595cb40654c9a8d82c0297e7280f3_RGB_5, _Combine_f97595cb40654c9a8d82c0297e7280f3_RG_6);
                    UnityTexture2D _Property_8e8b4d9a2dfc42148eb69519397ecebc_Out_0 = UnityBuildTexture2DStructNoScale(Layer3);
                    UnityTexture2D _Property_1443e12ec6544d2c8e8dcc71d67adb04_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal3);
                    UnityTexture2D _Property_b8f1cfb1112b4d2e8e2fe919f5003fb3_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask3);
                    float4 _Property_d9e7ba461b95446db56c0b99fce9de5d_Out_0 = Tiling_Offset3;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13;
                    float2 _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_d9e7ba461b95446db56c0b99fce9de5d_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1);
                    float2 _Property_e5d43ace4a66401faff3165675d44af0_Out_0 = HeightRemap3;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_8e8b4d9a2dfc42148eb69519397ecebc_Out_0, _Property_1443e12ec6544d2c8e8dcc71d67adb04_Out_0, _Property_b8f1cfb1112b4d2e8e2fe919f5003fb3_Out_0, 0.25, 4, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1, _Property_e5d43ace4a66401faff3165675d44af0_Out_0, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2);
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_R_1 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[0];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_G_2 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[1];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_B_3 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[2];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_A_4 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[3];
                    UnityTexture2D _Property_edf497c59ff340a5897695b2e8e9ed68_Out_0 = UnityBuildTexture2DStructNoScale(SlopeTex);
                    UnityTexture2D _Property_ae03f8d1bb284168ae1cb40c2c8d7dce_Out_0 = UnityBuildTexture2DStructNoScale(SlopeNormal);
                    UnityTexture2D _Property_35050279a32b481b878853831820cb33_Out_0 = UnityBuildTexture2DStructNoScale(SlopeMask);
                    float4 _Property_a3c340f0d1f647858c0d27fc6fa0d127_Out_0 = Tiling_Offset4;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67;
                    float2 _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_a3c340f0d1f647858c0d27fc6fa0d127_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1);
                    float2 _Property_8a3f864a5b9c469b92480bb635123790_Out_0 = HeightRemap4;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_edf497c59ff340a5897695b2e8e9ed68_Out_0, _Property_ae03f8d1bb284168ae1cb40c2c8d7dce_Out_0, _Property_35050279a32b481b878853831820cb33_Out_0, 0.25, 4, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1, _Property_8a3f864a5b9c469b92480bb635123790_Out_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2);
                    float _Split_015a6ee9887b47abb21193d18e609740_R_1 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[0];
                    float _Split_015a6ee9887b47abb21193d18e609740_G_2 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[1];
                    float _Split_015a6ee9887b47abb21193d18e609740_B_3 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[2];
                    float _Split_015a6ee9887b47abb21193d18e609740_A_4 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[3];
                    float4 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4;
                    float3 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGB_5;
                    float2 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RG_6;
                    Unity_Combine_float(_Split_d87c9f86d0a94f8b9b66cbcb29d89dde_B_3, _Split_015a6ee9887b47abb21193d18e609740_B_3, 0, 0, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGB_5, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RG_6);
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_R_1 = IN.SplatMapColor[0];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_G_2 = IN.SplatMapColor[1];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_B_3 = IN.SplatMapColor[2];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_A_4 = IN.SplatMapColor[3];
                    float4 _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4;
                    float3 _Combine_7b79ed205a4b435d8742217505a4c51d_RGB_5;
                    float2 _Combine_7b79ed205a4b435d8742217505a4c51d_RG_6;
                    Unity_Combine_float(1, _Split_ea099c0905af42a6804ca0dc2f58dc2f_R_1, _Split_ea099c0905af42a6804ca0dc2f58dc2f_G_2, _Split_ea099c0905af42a6804ca0dc2f58dc2f_B_3, _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4, _Combine_7b79ed205a4b435d8742217505a4c51d_RGB_5, _Combine_7b79ed205a4b435d8742217505a4c51d_RG_6);
                    float2 _Property_5538a1bac07f487589432be4f79dd05e_Out_0 = SlopeRemap;
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_R_1 = _Property_5538a1bac07f487589432be4f79dd05e_Out_0[0];
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_G_2 = _Property_5538a1bac07f487589432be4f79dd05e_Out_0[1];
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_B_3 = 0;
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_A_4 = 0;
                    float _DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2;
                    Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(0, 1, 0), _DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2);
                    float _Property_795a1803a8484214b987093ec034ab6a_Out_0 = SlopePow;
                    float _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2;
                    Unity_Power_float(_DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2, _Property_795a1803a8484214b987093ec034ab6a_Out_0, _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2);
                    float _Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3;
                    Unity_Smoothstep_float(_Split_03a4c3769cad421fb634dee3fa2beefb_R_1, _Split_03a4c3769cad421fb634dee3fa2beefb_G_2, _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2, _Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3);
                    float _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1;
                    Unity_OneMinus_float(_Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3, _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1);
                    float4 _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4;
                    float3 _Combine_9702e823fbe443b4b07afb499b6912a4_RGB_5;
                    float2 _Combine_9702e823fbe443b4b07afb499b6912a4_RG_6;
                    Unity_Combine_float(_Split_ea099c0905af42a6804ca0dc2f58dc2f_A_4, _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1, 0, 0, _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4, _Combine_9702e823fbe443b4b07afb499b6912a4_RGB_5, _Combine_9702e823fbe443b4b07afb499b6912a4_RG_6);
                    float _Property_d5cf363bc21a4f92a00fac464b9b11cf_Out_0 = heightTransition;
                    float4 _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5;
                    float4 _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6;
                    HeightBlend8Layers_float(_Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4, _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4, _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4, _Property_d5cf363bc21a4f92a00fac464b9b11cf_Out_0, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6);
                    float4 _BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5);
                    float4 _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5);
                    float4 _Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5, _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5, _Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2);
                    float4 _BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5);
                    float4 _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5);
                    float4 _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5, _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5, _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2);
                    float _Split_d9a7a90627444523a2cda58b36d68116_R_1 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[0];
                    float _Split_d9a7a90627444523a2cda58b36d68116_G_2 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[1];
                    float _Split_d9a7a90627444523a2cda58b36d68116_B_3 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[2];
                    float _Split_d9a7a90627444523a2cda58b36d68116_A_4 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[3];
                    float4 _BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5);
                    float4 _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5);
                    float4 _Add_090184f4bd18493ca37179ea1a8364d0_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5, _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5, _Add_090184f4bd18493ca37179ea1a8364d0_Out_2);
                    surface.BaseColor = (_Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2.xyz);
                    surface.Emission = float3(0, 0, 0);
                    surface.Alpha = 1;
                    surface.BentNormal = IN.TangentSpaceNormal;
                    surface.Smoothness = _Split_d9a7a90627444523a2cda58b36d68116_A_4;
                    surface.Occlusion = _Split_d9a7a90627444523a2cda58b36d68116_G_2;
                    surface.NormalTS = (_Add_090184f4bd18493ca37179ea1a8364d0_Out_2.xyz);
                    surface.Metallic = _Split_d9a7a90627444523a2cda58b36d68116_R_1;
                    return surface;
                }
    
                // --------------------------------------------------
                // Build Graph Inputs
    
                
                VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
                {
                    VertexDescriptionInputs output;
                    ZERO_INITIALIZE(VertexDescriptionInputs, output);
                
                    output.ObjectSpaceNormal =           input.normalOS;
                    output.ObjectSpaceTangent =          input.tangentOS.xyz;
                    output.ObjectSpacePosition =         input.positionOS;
                
                    return output;
                }
                
                AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
                #ifdef USE_CUSTOMINTERP_SUBSTRUCT
                    #ifdef TESSELLATION_ON
                    , inout VaryingsMeshToDS varyings
                    #else
                    , inout VaryingsMeshToPS varyings
                    #endif
                #endif
                #ifdef HAVE_VFX_MODIFICATION
                        , AttributesElement element
                #endif
                    )
                {
                    // build graph inputs
                    VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
                    // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
                
                    // evaluate vertex graph
                #ifdef HAVE_VFX_MODIFICATION
                    GraphProperties properties;
                    ZERO_INITIALIZE(GraphProperties, properties);
                
                    // Fetch the vertex graph properties for the particle instance.
                    GetElementVertexProperties(element, properties);
                
                    VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
                #else
                    VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
                #endif
                
                    // copy graph output to the results
                    input.positionOS = vertexDescription.Position;
                    input.normalOS = vertexDescription.Normal;
                    input.tangentOS.xyz = vertexDescription.Tangent;
                
                    varyings.SplatMapColor = vertexDescription.SplatMapColor;
                
                    return input;
                }
                
                FragInputs BuildFragInputs(VaryingsMeshToPS input)
                {
                    FragInputs output;
                    ZERO_INITIALIZE(FragInputs, output);
                
                    // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
                    // TODO: this is a really poor workaround, but the variable is used in a bunch of places
                    // to compute normals which are then passed on elsewhere to compute other values...
                    output.tangentToWorld = k_identity3x3;
                    output.positionSS = input.positionCS;       // input.positionCS is SV_Position
                
                    output.positionRWS = input.positionRWS;
                    output.tangentToWorld = BuildTangentToWorld(input.tangentWS, input.normalWS);
                
                #ifdef HAVE_VFX_MODIFICATION
                    // FragInputs from VFX come from two places: Interpolator or CBuffer.
                    /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
                
                #endif
                
                    // splice point to copy custom interpolator fields from varyings to frag inputs
                    output.customInterpolators.SplatMapColor = input.SplatMapColor;
                
                    return output;
                }
                
                // existing HDRP code uses the combined function to go directly from packed to frag inputs
                FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
                {
                    UNITY_SETUP_INSTANCE_ID(input);
                    VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
                    return BuildFragInputs(unpacked);
                }
                
                SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
                {
                    SurfaceDescriptionInputs output;
                    ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
                
                    output.WorldSpaceNormal =            normalize(input.tangentToWorld[2].xyz);
                    #if defined(SHADER_STAGE_RAY_TRACING)
                    output.ObjectSpaceNormal =           mul(output.WorldSpaceNormal, (float3x3) ObjectToWorld3x4());
                    #else
                    output.ObjectSpaceNormal =           normalize(mul(output.WorldSpaceNormal, (float3x3) UNITY_MATRIX_M));           // transposed multiplication by inverse matrix to handle normal scale
                    #endif
                    output.TangentSpaceNormal =          float3(0.0f, 0.0f, 1.0f);
                    output.ObjectSpacePosition =         TransformWorldToObject(input.positionRWS);
                
                    // splice point to copy frag inputs custom interpolator pack into the SDI
                    output.SplatMapColor = input.customInterpolators.SplatMapColor;
                
                    return output;
                }
                
    
                // --------------------------------------------------
                // Build Surface Data (Specific Material)
    
            void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
                {
                    ZERO_INITIALIZE(SurfaceData, surfaceData);
                
                    // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
                    // however specularOcclusion can come from the graph, so need to be init here so it can be override.
                    surfaceData.specularOcclusion = 1.0;
                
                    surfaceData.baseColor =                 surfaceDescription.BaseColor;
                    surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
                    surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
                    surfaceData.metallic =                  surfaceDescription.Metallic;
                
                    #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                        if (_EnableSSRefraction)
                        {
                
                            surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                            surfaceDescription.Alpha = 1.0;
                        }
                        else
                        {
                            surfaceData.ior = 1.0;
                            surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                            surfaceData.atDistance = 1.0;
                            surfaceData.transmittanceMask = 0.0;
                            surfaceDescription.Alpha = 1.0;
                        }
                    #else
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                    #endif
                
                    // These static material feature allow compile time optimization
                    surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
                    #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_TRANSMISSION
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_ANISOTROPY
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
                    #endif
                
                    #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                        // Require to have setup baseColor
                        // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                        surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
                    #endif
                
                    #ifdef _DOUBLESIDED_ON
                        float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                    #else
                        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                    #endif
                
                    // normal delivered to master node
                    GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
                
                    surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                
                    surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
                
                
                    #if HAVE_DECALS
                        if (_EnableDecals)
                        {
                            float alpha = 1.0;
                            alpha = surfaceDescription.Alpha;
                
                            // Both uses and modifies 'surfaceData.normalWS'.
                            DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                            ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                        }
                    #endif
                
                    bentNormalWS = surfaceData.normalWS;
                
                    surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
                
                    #ifdef DEBUG_DISPLAY
                        if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                        {
                            // TODO: need to update mip info
                            surfaceData.metallic = 0;
                        }
                
                        // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                        // as it can modify attribute use for static lighting
                        ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
                    #endif
                
                    // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
                    // If user provide bent normal then we process a better term
                    #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                        // Just use the value passed through via the slot (not active otherwise)
                    #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                        // If we have bent normal and ambient occlusion, process a specular occlusion
                        surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                    #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                        surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                    #endif
                
                    #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                        surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                    #endif
                }
                
    
                // --------------------------------------------------
                // Get Surface And BuiltinData
    
                void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
                {
                    // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                    #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                    #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                    #endif
                    #endif
    
                    #ifndef SHADER_UNLIT
                    #ifdef _DOUBLESIDED_ON
                        float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                    #else
                        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                    #endif
    
                    ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                    #endif // SHADER_UNLIT
    
                    SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
    
                    #if defined(HAVE_VFX_MODIFICATION)
                    GraphProperties properties;
                    ZERO_INITIALIZE(GraphProperties, properties);
    
                    GetElementPixelProperties(fragInputs, properties);
    
                    SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                    #else
                    SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                    #endif
    
                    // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                    // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                    #ifdef _ALPHATEST_ON
                        float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                        #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                        // The TransparentDepthPrepass is also used with SSR transparent.
                        // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                        // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                        #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                        // DepthPostpass always use its own alpha threshold
                        alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                        #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                        // If use shadow threshold isn't enable we don't allow any test
                        #endif
    
                        GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                    #endif
    
                    #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                    #endif
    
                    #ifndef SHADER_UNLIT
                    float3 bentNormalWS;
                    BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
    
                    // Builtin Data
                    // For back lighting we use the oposite vertex normal
                    InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
    
                    #else
                    BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
    
                    ZERO_INITIALIZE(BuiltinData, builtinData); // No call to InitBuiltinData as we don't have any lighting
                    builtinData.opacity = surfaceDescription.Alpha;
    
                    #if defined(DEBUG_DISPLAY)
                        // Light Layers are currently not used for the Unlit shader (because it is not lit)
                        // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                        // display in the light layers visualization mode, therefore we need the renderingLayers
                        builtinData.renderingLayers = GetMeshRenderingLightLayer();
                    #endif
    
                    #endif // SHADER_UNLIT
    
                    #ifdef _ALPHATEST_ON
                        // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                        builtinData.alphaClipTreshold = alphaCutoff;
                    #endif
    
                    // override sampleBakedGI - not used by Unlit
    
            		// If we want to force forward emissive and we have GBuffer pass, don't do anything
            		#if !(SHADERPASS == SHADERPASS_GBUFFER && defined(_FORCE_FORWARD_EMISSIVE))
                    builtinData.emissiveColor = surfaceDescription.Emission;
            		#endif
    
                    // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                    // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                    // This is a limitation of the current MRT approach.
    
                    #if _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
                    #endif
    
                    // TODO: We should generate distortion / distortionBlur for non distortion pass
                    #if (SHADERPASS == SHADERPASS_DISTORTION)
                    builtinData.distortion = surfaceDescription.Distortion;
                    builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                    #endif
    
                    #ifndef SHADER_UNLIT
                    // PostInitBuiltinData call ApplyDebugToBuiltinData
                    PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                    #else
                    ApplyDebugToBuiltinData(builtinData);
                    #endif
    
                    RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
                }
    
                // --------------------------------------------------
                // Main
    
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
    
                // --------------------------------------------------
                // Visual Effect Vertex Invocations
    
            	#ifdef HAVE_VFX_MODIFICATION
            	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
            	#endif
    
                ENDHLSL
            }
            Pass
            {
                Name "MotionVectors"
                Tags
                {
                    "LightMode" = "MotionVectors"
                }
    
                // Render State
                Cull [_CullMode]
                ZWrite On
                Stencil
                    {
                        WriteMask [_StencilWriteMaskMV]
                        Ref [_StencilRefMV]
                        CompFront Always
                        PassFront Replace
                        CompBack Always
                        PassBack Replace
                    }
    
                // Debug
                // <None>
    
                // --------------------------------------------------
                // Pass
    
                HLSLPROGRAM
    
                // Pragmas
                #pragma instancing_options renderinglayer
                #pragma target 4.5
                #pragma vertex Vert
                #pragma fragment Frag
                #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
                #pragma multi_compile_instancing
                #pragma instancing_options procedural:setupProcedural
    
                // Keywords
                #pragma multi_compile_fragment _ WRITE_MSAA_DEPTH
                #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
                #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
                #pragma shader_feature_local _ _DOUBLESIDED_ON
                #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
                #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
                #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
                #pragma multi_compile _ WRITE_NORMAL_BUFFER
                #pragma shader_feature_local_fragment _ _DISABLE_DECALS
                #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
                #pragma shader_feature_local_fragment _ _DISABLE_SSR
                #pragma shader_feature_local_raytracing _ _DISABLE_SSR
                #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
                #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
                #pragma multi_compile _ WRITE_DECAL_BUFFER
                #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
                #pragma shader_feature _ _FORCE_FORWARD_EMISSIVE
                // GraphKeywords: <None>
    
                // For custom interpolators to inject a substruct definition before FragInputs definition,
                // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
                struct CustomInterpolators
                {
                    float4 SplatMapColor;
                };
                #define USE_CUSTOMINTERP_SUBSTRUCT
                
    
    
                // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
            	#ifdef HAVE_VFX_MODIFICATION
            	struct FragInputsVFX
                {
                    /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
                };
                #endif
    
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
            	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
    
                // --------------------------------------------------
                // Defines
    
                // Attribute
                #define ATTRIBUTES_NEED_NORMAL
                #define ATTRIBUTES_NEED_TANGENT
                #define ATTRIBUTES_NEED_TEXCOORD1
                #define ATTRIBUTES_NEED_TEXCOORD2
                #define VARYINGS_NEED_POSITION_WS
                #define VARYINGS_NEED_TANGENT_TO_WORLD
                #define VARYINGS_NEED_TEXCOORD1
                #define VARYINGS_NEED_TEXCOORD2
    
                #define HAVE_MESH_MODIFICATION
    
    
                #define SHADERPASS SHADERPASS_MOTION_VECTORS
                #define RAYTRACING_SHADER_GRAPH_DEFAULT
    
    
                // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
                // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
                // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
                // to still allow us to rename the field and keyword of this node without breaking existing code.
                #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
                #endif
    
                #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
                #endif
                // end
    
                #ifndef SHADER_UNLIT
                // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
                // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
                #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                    #define VARYINGS_NEED_CULLFACE
                #endif
                #endif
    
                // Specific Material Define
            #define _AMBIENT_OCCLUSION 1
                #define _SPECULAR_OCCLUSION_FROM_AO 1
                #define _ENERGY_CONSERVING_SPECULAR 1
                
                // If we use subsurface scattering, enable output split lighting (for forward pass)
                #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
                    #define OUTPUT_SPLIT_LIGHTING
                #endif
                
                // This shader support recursive rendering for raytracing
                #define HAVE_RECURSIVE_RENDERING
                
                // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
    
                // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
                // we should have a code like this:
                // if !defined(_DISABLE_SSR_TRANSPARENT)
                // pragma multi_compile _ WRITE_NORMAL_BUFFER
                // endif
                // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
                // it based on if SSR transparent in frame settings and not (and stripper can strip it).
                // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
                // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
                // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
                #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                    #define WRITE_NORMAL_BUFFER
                #endif
                #endif
    
                #ifndef DEBUG_DISPLAY
                    // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                    // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                    #if !defined(_SURFACE_TYPE_TRANSPARENT)
                        #if SHADERPASS == SHADERPASS_FORWARD
                        #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                        #elif SHADERPASS == SHADERPASS_GBUFFER
                        #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                        #endif
                    #endif
                #endif
    
                // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
                #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                    #define _DEFERRED_CAPABLE_MATERIAL
                #endif
    
                // Translate transparent motion vector define
                #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                    #define _WRITE_TRANSPARENT_MOTION_VECTOR
                #endif
    
                // Dots Instancing
                // DotsInstancingOptions: <None>
    
                // Various properties
    
                // HybridV1InjectedBuiltinProperties: <None>
    
                // -- Graph Properties
                CBUFFER_START(UnityPerMaterial)
                float2 HeightRemap3;
                float2 HeightRemap2;
                float4 Tiling_Offset3;
                float4 Tiling_Offset0;
                float2 HeightRemap4;
                float4 Tiling_Offset2;
                float2 HeightRemap0;
                float4 LayerMask3_TexelSize;
                float4 LayerMask2_TexelSize;
                float4 LayerNormal3_TexelSize;
                float4 LayerNormal2_TexelSize;
                float2 HeightRemap1;
                float4 Tiling_Offset1;
                float4 Layer0_TexelSize;
                float4 Layer1_TexelSize;
                float4 Layer2_TexelSize;
                float4 Layer3_TexelSize;
                float UVXZScale;
                float4 LayerNormal1_TexelSize;
                float4 LayerNormal0_TexelSize;
                float4 LayerMask1_TexelSize;
                float4 LayerMask0_TexelSize;
                float heightTransition;
                float4 BaseTex_TexelSize;
                float4 BaseNormal_TexelSize;
                float4 BaseMask_TexelSize;
                float4 Tiling_Offset;
                float2 HeightRemap;
                float4 SlopeTex_TexelSize;
                float4 SlopeNormal_TexelSize;
                float4 SlopeMask_TexelSize;
                float4 Tiling_Offset4;
                float2 SlopeRemap;
                float SlopePow;
                float4 _EmissionColor;
                float _UseShadowThreshold;
                float4 _DoubleSidedConstants;
                float _BlendMode;
                float _EnableBlendModePreserveSpecularLighting;
                float _RayTracing;
                float _RefractionModel;
                CBUFFER_END
                
                // Object and Global properties
                SAMPLER(SamplerState_Linear_Repeat);
                TEXTURE2D(LayerMask3);
                SAMPLER(samplerLayerMask3);
                TEXTURE2D(LayerMask2);
                SAMPLER(samplerLayerMask2);
                TEXTURE2D(LayerNormal3);
                SAMPLER(samplerLayerNormal3);
                TEXTURE2D(LayerNormal2);
                SAMPLER(samplerLayerNormal2);
                TEXTURE2D(Layer0);
                SAMPLER(samplerLayer0);
                TEXTURE2D(Layer1);
                SAMPLER(samplerLayer1);
                TEXTURE2D(Layer2);
                SAMPLER(samplerLayer2);
                TEXTURE2D(Layer3);
                SAMPLER(samplerLayer3);
                TEXTURE2D(LayerNormal1);
                SAMPLER(samplerLayerNormal1);
                TEXTURE2D(LayerNormal0);
                SAMPLER(samplerLayerNormal0);
                TEXTURE2D(LayerMask1);
                SAMPLER(samplerLayerMask1);
                TEXTURE2D(LayerMask0);
                SAMPLER(samplerLayerMask0);
                TEXTURE2D(BaseTex);
                SAMPLER(samplerBaseTex);
                TEXTURE2D(BaseNormal);
                SAMPLER(samplerBaseNormal);
                TEXTURE2D(BaseMask);
                SAMPLER(samplerBaseMask);
                TEXTURE2D(SlopeTex);
                SAMPLER(samplerSlopeTex);
                TEXTURE2D(SlopeNormal);
                SAMPLER(samplerSlopeNormal);
                TEXTURE2D(SlopeMask);
                SAMPLER(samplerSlopeMask);
    
                // -- Property used by ScenePickingPass
                #ifdef SCENEPICKINGPASS
                float4 _SelectionID;
                #endif
    
                // -- Properties used by SceneSelectionPass
                #ifdef SCENESELECTIONPASS
                int _ObjectId;
                int _PassValue;
                #endif
    
                // Includes
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
            	#include "Assets/Shaders/GPUTerrainHeight/TerrainVertexPosition.hlsl"
                #include "Assets/Shaders/TerrainShading/HeightBlend.hlsl"
    
                // --------------------------------------------------
                // Structs and Packing
    
                struct AttributesMesh
                {
                     float3 positionOS : POSITION;
                     float3 normalOS : NORMAL;
                     float4 tangentOS : TANGENT;
                     float4 uv1 : TEXCOORD1;
                     float4 uv2 : TEXCOORD2;
                    #if UNITY_ANY_INSTANCING_ENABLED
                     uint instanceID : INSTANCEID_SEMANTIC;
                    #endif
                };
                struct VaryingsMeshToPS
                {
                    SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
                     float3 positionRWS;
                     float3 normalWS;
                     float4 tangentWS;
                     float4 texCoord1;
                     float4 texCoord2;
                    #if UNITY_ANY_INSTANCING_ENABLED
                     uint instanceID : CUSTOM_INSTANCE_ID;
                    #endif
                     float4 SplatMapColor;
                };
                struct VertexDescriptionInputs
                {
                     float3 ObjectSpaceNormal;
                     float3 ObjectSpaceTangent;
                     float3 ObjectSpacePosition;
                };
                struct SurfaceDescriptionInputs
                {
                     float3 ObjectSpaceNormal;
                     float3 WorldSpaceNormal;
                     float3 TangentSpaceNormal;
                     float3 ObjectSpacePosition;
                     float4 SplatMapColor;
                };
                struct PackedVaryingsMeshToPS
                {
                    SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
                    #if UNITY_ANY_INSTANCING_ENABLED
                     uint instanceID : CUSTOM_INSTANCE_ID;
                    #endif
                     float3 interp0 : INTERP0;
                     float3 interp1 : INTERP1;
                     float4 interp2 : INTERP2;
                     float4 interp3 : INTERP3;
                     float4 interp4 : INTERP4;
                     float4 interp5 : INTERP5;
                };
    
                PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
                {
                    PackedVaryingsMeshToPS output;
                    ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
                    output.positionCS = input.positionCS;
                    output.interp0.xyz =  input.positionRWS;
                    output.interp1.xyz =  input.normalWS;
                    output.interp2.xyzw =  input.tangentWS;
                    output.interp3.xyzw =  input.texCoord1;
                    output.interp4.xyzw =  input.texCoord2;
                    #if UNITY_ANY_INSTANCING_ENABLED
                    output.instanceID = input.instanceID;
                    #endif
                    output.interp5.xyzw =  input.SplatMapColor;
                    return output;
                }
                
                VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
                {
                    VaryingsMeshToPS output;
                    output.positionCS = input.positionCS;
                    output.positionRWS = input.interp0.xyz;
                    output.normalWS = input.interp1.xyz;
                    output.tangentWS = input.interp2.xyzw;
                    output.texCoord1 = input.interp3.xyzw;
                    output.texCoord2 = input.interp4.xyzw;
                    #if UNITY_ANY_INSTANCING_ENABLED
                    output.instanceID = input.instanceID;
                    #endif
                    output.SplatMapColor = input.interp5.xyzw;
                    return output;
                }
                
    
                // --------------------------------------------------
                // Graph
    
    
                // Graph Functions
                
                void UnityGetInstanceID_float(out float Out)
                {
                #if UNITY_ANY_INSTANCING_ENABLED
                    Out = unity_InstanceID;
                #else
                    Out = 0;
                #endif
                }
                
                void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
                {
                    RGBA = float4(R, G, B, A);
                    RGB = float3(R, G, B);
                    RG = float2(R, G);
                }
                
                void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
                {
                    Out = A / B;
                }
                
                void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
                {
                    Out = UV * Tiling + Offset;
                }
                
                struct Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float
                {
                };
                
                void SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(float4 Tiling_Offset, float2 Vector2, Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float IN, out float2 OutVector2_1)
                {
                    float2 _Property_5ea954dbdecc454b839a01badac3afd6_Out_0 = Vector2;
                    float4 _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0 = Tiling_Offset;
                    float _Split_c19978cb25c5413eaf23432179b0e3af_R_1 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[0];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_G_2 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[1];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_B_3 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[2];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_A_4 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[3];
                    float4 _Combine_387ca93b6841454bad52ea2f221d199f_RGBA_4;
                    float3 _Combine_387ca93b6841454bad52ea2f221d199f_RGB_5;
                    float2 _Combine_387ca93b6841454bad52ea2f221d199f_RG_6;
                    Unity_Combine_float(_Split_c19978cb25c5413eaf23432179b0e3af_R_1, _Split_c19978cb25c5413eaf23432179b0e3af_G_2, 0, 0, _Combine_387ca93b6841454bad52ea2f221d199f_RGBA_4, _Combine_387ca93b6841454bad52ea2f221d199f_RGB_5, _Combine_387ca93b6841454bad52ea2f221d199f_RG_6);
                    float4 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGBA_4;
                    float3 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGB_5;
                    float2 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6;
                    Unity_Combine_float(_Split_c19978cb25c5413eaf23432179b0e3af_B_3, _Split_c19978cb25c5413eaf23432179b0e3af_A_4, 0, 0, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGBA_4, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGB_5, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6);
                    float2 _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3;
                    Unity_TilingAndOffset_float(_Property_5ea954dbdecc454b839a01badac3afd6_Out_0, _Combine_387ca93b6841454bad52ea2f221d199f_RG_6, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6, _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3);
                    OutVector2_1 = _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3;
                }
                
                void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
                {
                    Out = A * B;
                }
                
                void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
                {
                    Out = A * B;
                }
                
                void Desaturate_float(float3 oldcolor, float k, out float3 newcolor){
                    float intensity = dot(oldcolor,float3(0.3,0.59,0.11));
                    newcolor.x = intensity*k + oldcolor.x*(1-k);
                    newcolor.y = intensity*k + oldcolor.y*(1-k);
                    newcolor.z = intensity*k + oldcolor.z*(1-k);
                }
                
                void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
                {
                    Out = A * B;
                }
                
                void Unity_Lerp_float(float A, float B, float T, out float Out)
                {
                    Out = lerp(A, B, T);
                }
                
                struct Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float
                {
                };
                
                void SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(UnityTexture2D Albedo, UnityTexture2D Normal, UnityTexture2D Mask, float DesaturationK, float BrightnessAtten, float2 UV, float2 HeightRemap, Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float IN, out float4 oAlbedo_0, out float4 oNormal_1, out float4 oMask_2)
                {
                    UnityTexture2D _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0 = Albedo;
                    float2 _Property_76ed35a32977448f8ea254bf6de06d33_Out_0 = UV;
                    float4 _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_R_4 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.r;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_G_5 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.g;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_B_6 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.b;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_A_7 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.a;
                    float _Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0 = BrightnessAtten;
                    float4 _Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2);
                    float _Float_f48d9dc0c16249fe8fe5b97c86e7f56c_Out_0 = -0.25;
                    float2 _Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2;
                    Unity_Multiply_float2_float2(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0, (_Float_f48d9dc0c16249fe8fe5b97c86e7f56c_Out_0.xx), _Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2);
                    float4 _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_R_4 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.r;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_G_5 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.g;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_B_6 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.b;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_A_7 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.a;
                    float4 _Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2);
                    float _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0 = DesaturationK;
                    float3 _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1;
                    Desaturate_float((_Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1);
                    float3 _Multiply_410af5ac81154a3aab73254ac228eccd_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2.xyz), _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1, _Multiply_410af5ac81154a3aab73254ac228eccd_Out_2);
                    UnityTexture2D _Property_d05972164bdd4e0189593b8dae00db03_Out_0 = Normal;
                    float4 _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0 = SAMPLE_TEXTURE2D(_Property_d05972164bdd4e0189593b8dae00db03_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d05972164bdd4e0189593b8dae00db03_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0);
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_R_4 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.r;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_G_5 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.g;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_B_6 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.b;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_A_7 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.a;
                    float4 _Multiply_4999f90cbd1848acaf20b253953c0963_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_4999f90cbd1848acaf20b253953c0963_Out_2);
                    float4 _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_d05972164bdd4e0189593b8dae00db03_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d05972164bdd4e0189593b8dae00db03_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0);
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_R_4 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.r;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_G_5 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.g;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_B_6 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.b;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_A_7 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.a;
                    float4 _Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2);
                    float3 _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1;
                    Desaturate_float((_Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1);
                    float3 _Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_4999f90cbd1848acaf20b253953c0963_Out_2.xyz), _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1, _Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2);
                    UnityTexture2D _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0 = Mask;
                    float4 _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0 = SAMPLE_TEXTURE2D(_Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_R_4 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.r;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_G_5 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.g;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_B_6 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.b;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_A_7 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.a;
                    float4 _Multiply_0b2356625aad40439a89b8519e36e62b_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_0b2356625aad40439a89b8519e36e62b_Out_2);
                    float4 _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0 = SAMPLE_TEXTURE2D(_Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_R_4 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.r;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_G_5 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.g;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_B_6 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.b;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_A_7 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.a;
                    float4 _Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2);
                    float3 _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1;
                    Desaturate_float((_Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1);
                    float3 _Multiply_3c8f32d2a057478e869493099765b841_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_0b2356625aad40439a89b8519e36e62b_Out_2.xyz), _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1, _Multiply_3c8f32d2a057478e869493099765b841_Out_2);
                    float _Split_77de2b1a3326407b985f625d91e2063b_R_1 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[0];
                    float _Split_77de2b1a3326407b985f625d91e2063b_G_2 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[1];
                    float _Split_77de2b1a3326407b985f625d91e2063b_B_3 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[2];
                    float _Split_77de2b1a3326407b985f625d91e2063b_A_4 = 0;
                    float2 _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0 = HeightRemap;
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_R_1 = _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0[0];
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_G_2 = _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0[1];
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_B_3 = 0;
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_A_4 = 0;
                    float _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3;
                    Unity_Lerp_float(_Split_0df13f6921fe4db99b01dcff93c3b978_R_1, _Split_0df13f6921fe4db99b01dcff93c3b978_G_2, _Split_77de2b1a3326407b985f625d91e2063b_B_3, _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3);
                    float4 _Combine_17dba591e95443299750f53a93613083_RGBA_4;
                    float3 _Combine_17dba591e95443299750f53a93613083_RGB_5;
                    float2 _Combine_17dba591e95443299750f53a93613083_RG_6;
                    Unity_Combine_float(_Split_77de2b1a3326407b985f625d91e2063b_R_1, _Split_77de2b1a3326407b985f625d91e2063b_G_2, _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3, _Split_77de2b1a3326407b985f625d91e2063b_A_4, _Combine_17dba591e95443299750f53a93613083_RGBA_4, _Combine_17dba591e95443299750f53a93613083_RGB_5, _Combine_17dba591e95443299750f53a93613083_RG_6);
                    oAlbedo_0 = (float4(_Multiply_410af5ac81154a3aab73254ac228eccd_Out_2, 1.0));
                    oNormal_1 = (float4(_Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2, 1.0));
                    oMask_2 = _Combine_17dba591e95443299750f53a93613083_RGBA_4;
                }
                
                void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
                {
                    Out = dot(A, B);
                }
                
                void Unity_Power_float(float A, float B, out float Out)
                {
                    Out = pow(A, B);
                }
                
                void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
                {
                    Out = smoothstep(Edge1, Edge2, In);
                }
                
                void Unity_OneMinus_float(float In, out float Out)
                {
                    Out = 1 - In;
                }
                
                void BlendByMask_float(float4 a, float4 b, float4 c, float4 d, float4 blend, out float4 ret){
                    ret = a*blend.x + b*blend.y + c*blend.z + d*blend.w;
                }
                
                void Unity_Add_float4(float4 A, float4 B, out float4 Out)
                {
                    Out = A + B;
                }
    
                // Graph Vertex
                struct VertexDescription
                {
                    float3 Position;
                    float3 Normal;
                    float3 Tangent;
                    float4 SplatMapColor;
                };
                
                VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
                {
                    VertexDescription description = (VertexDescription)0;
                    float _InstanceID_1b9fa912aec74e76aae6821c84f95467_Out_0;
                    UnityGetInstanceID_float(_InstanceID_1b9fa912aec74e76aae6821c84f95467_Out_0);
                    float3 _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_oposOS_2;
                    float4 _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_color_3;
                    float3 _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_normal_4;
                    GetTerrainVertex_float(_InstanceID_1b9fa912aec74e76aae6821c84f95467_Out_0, IN.ObjectSpacePosition, _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_oposOS_2, _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_color_3, _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_normal_4);
                    description.Position = _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_oposOS_2;
                    description.Normal = _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_normal_4;
                    description.Tangent = IN.ObjectSpaceTangent;
                    description.SplatMapColor = _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_color_3;
                    return description;
                }
    
                // Graph Pixel
                struct SurfaceDescription
                {
                    float3 BaseColor;
                    float3 Emission;
                    float Alpha;
                    float3 BentNormal;
                    float Smoothness;
                    float Occlusion;
                    float3 NormalTS;
                    float Metallic;
                };
                
                SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
                {
                    SurfaceDescription surface = (SurfaceDescription)0;
                    UnityTexture2D _Property_4e780cffb4044909a58e26eaff6361d1_Out_0 = UnityBuildTexture2DStructNoScale(BaseTex);
                    UnityTexture2D _Property_20a5bc7358e64fe8b3327adb9ce635ea_Out_0 = UnityBuildTexture2DStructNoScale(BaseNormal);
                    UnityTexture2D _Property_090d521163b9493189233a9f2e1cf5ed_Out_0 = UnityBuildTexture2DStructNoScale(BaseMask);
                    float4 _Property_6881ae016d754988b27811b95cc834ca_Out_0 = Tiling_Offset;
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_R_1 = IN.ObjectSpacePosition[0];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_G_2 = IN.ObjectSpacePosition[1];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_B_3 = IN.ObjectSpacePosition[2];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_A_4 = 0;
                    float4 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGBA_4;
                    float3 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGB_5;
                    float2 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6;
                    Unity_Combine_float(_Split_3335daa3a4b34f69a62c9c8a1c6f39b2_R_1, _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_B_3, 0, 0, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGBA_4, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGB_5, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6);
                    float _Property_8984e4bf1c26459280f9fece3c52167c_Out_0 = UVXZScale;
                    float2 _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2;
                    Unity_Divide_float2(_Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6, (_Property_8984e4bf1c26459280f9fece3c52167c_Out_0.xx), _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2);
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_737be3819d2c4f29853810a18717cae3;
                    float2 _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_6881ae016d754988b27811b95cc834ca_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1);
                    float2 _Property_dcc00367280c4dc6b11a52aa07754830_Out_0 = HeightRemap;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_6722d68456e84aecb015a07880cbbd46;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_4e780cffb4044909a58e26eaff6361d1_Out_0, _Property_20a5bc7358e64fe8b3327adb9ce635ea_Out_0, _Property_090d521163b9493189233a9f2e1cf5ed_Out_0, 0.25, 4, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1, _Property_dcc00367280c4dc6b11a52aa07754830_Out_0, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2);
                    UnityTexture2D _Property_3d7142ef79234a0ba6cda49555992a80_Out_0 = UnityBuildTexture2DStructNoScale(Layer0);
                    UnityTexture2D _Property_42e52c243a994f04944481ff3627fc2c_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal0);
                    UnityTexture2D _Property_e67647d6cf1b44bebf91845a255b522c_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask0);
                    float4 _Property_4e6c66ba03a842e482f7040c3fe163dc_Out_0 = Tiling_Offset0;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674;
                    float2 _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_4e6c66ba03a842e482f7040c3fe163dc_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1);
                    float2 _Property_8cf19c3a22e64f0a85a51c8cbf5085e7_Out_0 = HeightRemap0;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_3d7142ef79234a0ba6cda49555992a80_Out_0, _Property_42e52c243a994f04944481ff3627fc2c_Out_0, _Property_e67647d6cf1b44bebf91845a255b522c_Out_0, 0.25, 4, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1, _Property_8cf19c3a22e64f0a85a51c8cbf5085e7_Out_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2);
                    UnityTexture2D _Property_1bce6ca387e847e1a43a4534686b655f_Out_0 = UnityBuildTexture2DStructNoScale(Layer1);
                    UnityTexture2D _Property_1e7513acda3b4b20a5a028d0da4bcfb0_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal1);
                    UnityTexture2D _Property_75d4521a27cb403399759cefa7be71f2_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask1);
                    float4 _Property_e17bf3be22544a639340ddea65766b89_Out_0 = Tiling_Offset1;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_df825eb885d947429ce6daf495a641a7;
                    float2 _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_e17bf3be22544a639340ddea65766b89_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1);
                    float2 _Property_d682537de1054cf4b1eddd1680d152fb_Out_0 = HeightRemap1;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_1bce6ca387e847e1a43a4534686b655f_Out_0, _Property_1e7513acda3b4b20a5a028d0da4bcfb0_Out_0, _Property_75d4521a27cb403399759cefa7be71f2_Out_0, 0.25, 4, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1, _Property_d682537de1054cf4b1eddd1680d152fb_Out_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2);
                    UnityTexture2D _Property_b79fba6b5b1f40b88b38803dad2bb2e5_Out_0 = UnityBuildTexture2DStructNoScale(Layer2);
                    UnityTexture2D _Property_a787f1642c6d4570af8ae47ea63a59ed_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal2);
                    UnityTexture2D _Property_f4ae055a87ef48cb8df5c603ca6f72b0_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask2);
                    float4 _Property_e12db1a96427478999d081afcb59d771_Out_0 = Tiling_Offset2;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d;
                    float2 _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_e12db1a96427478999d081afcb59d771_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1);
                    float2 _Property_3be82515dad24d76b9af558757032f30_Out_0 = HeightRemap2;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_b79fba6b5b1f40b88b38803dad2bb2e5_Out_0, _Property_a787f1642c6d4570af8ae47ea63a59ed_Out_0, _Property_f4ae055a87ef48cb8df5c603ca6f72b0_Out_0, 0.25, 4, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1, _Property_3be82515dad24d76b9af558757032f30_Out_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2);
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_R_1 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[0];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_G_2 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[1];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_B_3 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[2];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_A_4 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[3];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_R_1 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[0];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_G_2 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[1];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_B_3 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[2];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_A_4 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[3];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_R_1 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[0];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_G_2 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[1];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_B_3 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[2];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_A_4 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[3];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_R_1 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[0];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_G_2 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[1];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_B_3 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[2];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_A_4 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[3];
                    float4 _Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4;
                    float3 _Combine_f97595cb40654c9a8d82c0297e7280f3_RGB_5;
                    float2 _Combine_f97595cb40654c9a8d82c0297e7280f3_RG_6;
                    Unity_Combine_float(_Split_d81e33a0495c4ac09042d2d39dd09ba5_B_3, _Split_d2ed4cee74e042da88b7348fcfe80cab_B_3, _Split_b3522eb5287e4b28baab87cc1fa16589_B_3, _Split_a4f15428b23a40ef8f25398e9cff2d7c_B_3, _Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4, _Combine_f97595cb40654c9a8d82c0297e7280f3_RGB_5, _Combine_f97595cb40654c9a8d82c0297e7280f3_RG_6);
                    UnityTexture2D _Property_8e8b4d9a2dfc42148eb69519397ecebc_Out_0 = UnityBuildTexture2DStructNoScale(Layer3);
                    UnityTexture2D _Property_1443e12ec6544d2c8e8dcc71d67adb04_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal3);
                    UnityTexture2D _Property_b8f1cfb1112b4d2e8e2fe919f5003fb3_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask3);
                    float4 _Property_d9e7ba461b95446db56c0b99fce9de5d_Out_0 = Tiling_Offset3;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13;
                    float2 _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_d9e7ba461b95446db56c0b99fce9de5d_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1);
                    float2 _Property_e5d43ace4a66401faff3165675d44af0_Out_0 = HeightRemap3;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_8e8b4d9a2dfc42148eb69519397ecebc_Out_0, _Property_1443e12ec6544d2c8e8dcc71d67adb04_Out_0, _Property_b8f1cfb1112b4d2e8e2fe919f5003fb3_Out_0, 0.25, 4, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1, _Property_e5d43ace4a66401faff3165675d44af0_Out_0, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2);
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_R_1 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[0];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_G_2 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[1];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_B_3 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[2];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_A_4 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[3];
                    UnityTexture2D _Property_edf497c59ff340a5897695b2e8e9ed68_Out_0 = UnityBuildTexture2DStructNoScale(SlopeTex);
                    UnityTexture2D _Property_ae03f8d1bb284168ae1cb40c2c8d7dce_Out_0 = UnityBuildTexture2DStructNoScale(SlopeNormal);
                    UnityTexture2D _Property_35050279a32b481b878853831820cb33_Out_0 = UnityBuildTexture2DStructNoScale(SlopeMask);
                    float4 _Property_a3c340f0d1f647858c0d27fc6fa0d127_Out_0 = Tiling_Offset4;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67;
                    float2 _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_a3c340f0d1f647858c0d27fc6fa0d127_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1);
                    float2 _Property_8a3f864a5b9c469b92480bb635123790_Out_0 = HeightRemap4;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_edf497c59ff340a5897695b2e8e9ed68_Out_0, _Property_ae03f8d1bb284168ae1cb40c2c8d7dce_Out_0, _Property_35050279a32b481b878853831820cb33_Out_0, 0.25, 4, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1, _Property_8a3f864a5b9c469b92480bb635123790_Out_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2);
                    float _Split_015a6ee9887b47abb21193d18e609740_R_1 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[0];
                    float _Split_015a6ee9887b47abb21193d18e609740_G_2 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[1];
                    float _Split_015a6ee9887b47abb21193d18e609740_B_3 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[2];
                    float _Split_015a6ee9887b47abb21193d18e609740_A_4 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[3];
                    float4 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4;
                    float3 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGB_5;
                    float2 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RG_6;
                    Unity_Combine_float(_Split_d87c9f86d0a94f8b9b66cbcb29d89dde_B_3, _Split_015a6ee9887b47abb21193d18e609740_B_3, 0, 0, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGB_5, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RG_6);
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_R_1 = IN.SplatMapColor[0];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_G_2 = IN.SplatMapColor[1];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_B_3 = IN.SplatMapColor[2];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_A_4 = IN.SplatMapColor[3];
                    float4 _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4;
                    float3 _Combine_7b79ed205a4b435d8742217505a4c51d_RGB_5;
                    float2 _Combine_7b79ed205a4b435d8742217505a4c51d_RG_6;
                    Unity_Combine_float(1, _Split_ea099c0905af42a6804ca0dc2f58dc2f_R_1, _Split_ea099c0905af42a6804ca0dc2f58dc2f_G_2, _Split_ea099c0905af42a6804ca0dc2f58dc2f_B_3, _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4, _Combine_7b79ed205a4b435d8742217505a4c51d_RGB_5, _Combine_7b79ed205a4b435d8742217505a4c51d_RG_6);
                    float2 _Property_5538a1bac07f487589432be4f79dd05e_Out_0 = SlopeRemap;
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_R_1 = _Property_5538a1bac07f487589432be4f79dd05e_Out_0[0];
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_G_2 = _Property_5538a1bac07f487589432be4f79dd05e_Out_0[1];
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_B_3 = 0;
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_A_4 = 0;
                    float _DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2;
                    Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(0, 1, 0), _DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2);
                    float _Property_795a1803a8484214b987093ec034ab6a_Out_0 = SlopePow;
                    float _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2;
                    Unity_Power_float(_DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2, _Property_795a1803a8484214b987093ec034ab6a_Out_0, _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2);
                    float _Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3;
                    Unity_Smoothstep_float(_Split_03a4c3769cad421fb634dee3fa2beefb_R_1, _Split_03a4c3769cad421fb634dee3fa2beefb_G_2, _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2, _Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3);
                    float _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1;
                    Unity_OneMinus_float(_Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3, _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1);
                    float4 _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4;
                    float3 _Combine_9702e823fbe443b4b07afb499b6912a4_RGB_5;
                    float2 _Combine_9702e823fbe443b4b07afb499b6912a4_RG_6;
                    Unity_Combine_float(_Split_ea099c0905af42a6804ca0dc2f58dc2f_A_4, _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1, 0, 0, _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4, _Combine_9702e823fbe443b4b07afb499b6912a4_RGB_5, _Combine_9702e823fbe443b4b07afb499b6912a4_RG_6);
                    float _Property_d5cf363bc21a4f92a00fac464b9b11cf_Out_0 = heightTransition;
                    float4 _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5;
                    float4 _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6;
                    HeightBlend8Layers_float(_Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4, _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4, _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4, _Property_d5cf363bc21a4f92a00fac464b9b11cf_Out_0, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6);
                    float4 _BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5);
                    float4 _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5);
                    float4 _Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5, _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5, _Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2);
                    float4 _BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5);
                    float4 _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5);
                    float4 _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5, _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5, _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2);
                    float _Split_d9a7a90627444523a2cda58b36d68116_R_1 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[0];
                    float _Split_d9a7a90627444523a2cda58b36d68116_G_2 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[1];
                    float _Split_d9a7a90627444523a2cda58b36d68116_B_3 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[2];
                    float _Split_d9a7a90627444523a2cda58b36d68116_A_4 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[3];
                    float4 _BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5);
                    float4 _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5);
                    float4 _Add_090184f4bd18493ca37179ea1a8364d0_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5, _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5, _Add_090184f4bd18493ca37179ea1a8364d0_Out_2);
                    surface.BaseColor = (_Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2.xyz);
                    surface.Emission = float3(0, 0, 0);
                    surface.Alpha = 1;
                    surface.BentNormal = IN.TangentSpaceNormal;
                    surface.Smoothness = _Split_d9a7a90627444523a2cda58b36d68116_A_4;
                    surface.Occlusion = _Split_d9a7a90627444523a2cda58b36d68116_G_2;
                    surface.NormalTS = (_Add_090184f4bd18493ca37179ea1a8364d0_Out_2.xyz);
                    surface.Metallic = _Split_d9a7a90627444523a2cda58b36d68116_R_1;
                    return surface;
                }
    
                // --------------------------------------------------
                // Build Graph Inputs
    
                
                VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
                {
                    VertexDescriptionInputs output;
                    ZERO_INITIALIZE(VertexDescriptionInputs, output);
                
                    output.ObjectSpaceNormal =           input.normalOS;
                    output.ObjectSpaceTangent =          input.tangentOS.xyz;
                    output.ObjectSpacePosition =         input.positionOS;
                
                    return output;
                }
                
                AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
                #ifdef USE_CUSTOMINTERP_SUBSTRUCT
                    #ifdef TESSELLATION_ON
                    , inout VaryingsMeshToDS varyings
                    #else
                    , inout VaryingsMeshToPS varyings
                    #endif
                #endif
                #ifdef HAVE_VFX_MODIFICATION
                        , AttributesElement element
                #endif
                    )
                {
                    // build graph inputs
                    VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
                    // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
                
                    // evaluate vertex graph
                #ifdef HAVE_VFX_MODIFICATION
                    GraphProperties properties;
                    ZERO_INITIALIZE(GraphProperties, properties);
                
                    // Fetch the vertex graph properties for the particle instance.
                    GetElementVertexProperties(element, properties);
                
                    VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
                #else
                    VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
                #endif
                
                    // copy graph output to the results
                    input.positionOS = vertexDescription.Position;
                    input.normalOS = vertexDescription.Normal;
                    input.tangentOS.xyz = vertexDescription.Tangent;
                
                    varyings.SplatMapColor = vertexDescription.SplatMapColor;
                
                    return input;
                }
                
                FragInputs BuildFragInputs(VaryingsMeshToPS input)
                {
                    FragInputs output;
                    ZERO_INITIALIZE(FragInputs, output);
                
                    // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
                    // TODO: this is a really poor workaround, but the variable is used in a bunch of places
                    // to compute normals which are then passed on elsewhere to compute other values...
                    output.tangentToWorld = k_identity3x3;
                    output.positionSS = input.positionCS;       // input.positionCS is SV_Position
                
                    output.positionRWS = input.positionRWS;
                    output.tangentToWorld = BuildTangentToWorld(input.tangentWS, input.normalWS);
                    output.texCoord1 = input.texCoord1;
                    output.texCoord2 = input.texCoord2;
                
                #ifdef HAVE_VFX_MODIFICATION
                    // FragInputs from VFX come from two places: Interpolator or CBuffer.
                    /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
                
                #endif
                
                    // splice point to copy custom interpolator fields from varyings to frag inputs
                    output.customInterpolators.SplatMapColor = input.SplatMapColor;
                
                    return output;
                }
                
                // existing HDRP code uses the combined function to go directly from packed to frag inputs
                FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
                {
                    UNITY_SETUP_INSTANCE_ID(input);
                    VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
                    return BuildFragInputs(unpacked);
                }
                
                SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
                {
                    SurfaceDescriptionInputs output;
                    ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
                
                    output.WorldSpaceNormal =            normalize(input.tangentToWorld[2].xyz);
                    #if defined(SHADER_STAGE_RAY_TRACING)
                    output.ObjectSpaceNormal =           mul(output.WorldSpaceNormal, (float3x3) ObjectToWorld3x4());
                    #else
                    output.ObjectSpaceNormal =           normalize(mul(output.WorldSpaceNormal, (float3x3) UNITY_MATRIX_M));           // transposed multiplication by inverse matrix to handle normal scale
                    #endif
                    output.TangentSpaceNormal =          float3(0.0f, 0.0f, 1.0f);
                    output.ObjectSpacePosition =         TransformWorldToObject(input.positionRWS);
                
                    // splice point to copy frag inputs custom interpolator pack into the SDI
                    output.SplatMapColor = input.customInterpolators.SplatMapColor;
                
                    return output;
                }
                
    
                // --------------------------------------------------
                // Build Surface Data (Specific Material)
    
            void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
                {
                    ZERO_INITIALIZE(SurfaceData, surfaceData);
                
                    // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
                    // however specularOcclusion can come from the graph, so need to be init here so it can be override.
                    surfaceData.specularOcclusion = 1.0;
                
                    surfaceData.baseColor =                 surfaceDescription.BaseColor;
                    surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
                    surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
                    surfaceData.metallic =                  surfaceDescription.Metallic;
                
                    #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                        if (_EnableSSRefraction)
                        {
                
                            surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                            surfaceDescription.Alpha = 1.0;
                        }
                        else
                        {
                            surfaceData.ior = 1.0;
                            surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                            surfaceData.atDistance = 1.0;
                            surfaceData.transmittanceMask = 0.0;
                            surfaceDescription.Alpha = 1.0;
                        }
                    #else
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                    #endif
                
                    // These static material feature allow compile time optimization
                    surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
                    #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_TRANSMISSION
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_ANISOTROPY
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
                    #endif
                
                    #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                        // Require to have setup baseColor
                        // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                        surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
                    #endif
                
                    #ifdef _DOUBLESIDED_ON
                        float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                    #else
                        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                    #endif
                
                    // normal delivered to master node
                    GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
                
                    surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                
                    surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
                
                
                    #if HAVE_DECALS
                        if (_EnableDecals)
                        {
                            float alpha = 1.0;
                            alpha = surfaceDescription.Alpha;
                
                            // Both uses and modifies 'surfaceData.normalWS'.
                            DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                            ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                        }
                    #endif
                
                    bentNormalWS = surfaceData.normalWS;
                
                    surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
                
                    #ifdef DEBUG_DISPLAY
                        if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                        {
                            // TODO: need to update mip info
                            surfaceData.metallic = 0;
                        }
                
                        // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                        // as it can modify attribute use for static lighting
                        ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
                    #endif
                
                    // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
                    // If user provide bent normal then we process a better term
                    #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                        // Just use the value passed through via the slot (not active otherwise)
                    #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                        // If we have bent normal and ambient occlusion, process a specular occlusion
                        surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                    #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                        surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                    #endif
                
                    #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                        surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                    #endif
                }
                
    
                // --------------------------------------------------
                // Get Surface And BuiltinData
    
                void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
                {
                    // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                    #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                    #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                    #endif
                    #endif
    
                    #ifndef SHADER_UNLIT
                    #ifdef _DOUBLESIDED_ON
                        float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                    #else
                        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                    #endif
    
                    ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                    #endif // SHADER_UNLIT
    
                    SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
    
                    #if defined(HAVE_VFX_MODIFICATION)
                    GraphProperties properties;
                    ZERO_INITIALIZE(GraphProperties, properties);
    
                    GetElementPixelProperties(fragInputs, properties);
    
                    SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                    #else
                    SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                    #endif
    
                    // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                    // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                    #ifdef _ALPHATEST_ON
                        float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                        #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                        // The TransparentDepthPrepass is also used with SSR transparent.
                        // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                        // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                        #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                        // DepthPostpass always use its own alpha threshold
                        alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                        #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                        // If use shadow threshold isn't enable we don't allow any test
                        #endif
    
                        GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                    #endif
    
                    #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                    #endif
    
                    #ifndef SHADER_UNLIT
                    float3 bentNormalWS;
                    BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
    
                    // Builtin Data
                    // For back lighting we use the oposite vertex normal
                    InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
    
                    #else
                    BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
    
                    ZERO_INITIALIZE(BuiltinData, builtinData); // No call to InitBuiltinData as we don't have any lighting
                    builtinData.opacity = surfaceDescription.Alpha;
    
                    #if defined(DEBUG_DISPLAY)
                        // Light Layers are currently not used for the Unlit shader (because it is not lit)
                        // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                        // display in the light layers visualization mode, therefore we need the renderingLayers
                        builtinData.renderingLayers = GetMeshRenderingLightLayer();
                    #endif
    
                    #endif // SHADER_UNLIT
    
                    #ifdef _ALPHATEST_ON
                        // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                        builtinData.alphaClipTreshold = alphaCutoff;
                    #endif
    
                    // override sampleBakedGI - not used by Unlit
    
            		// If we want to force forward emissive and we have GBuffer pass, don't do anything
            		#if !(SHADERPASS == SHADERPASS_GBUFFER && defined(_FORCE_FORWARD_EMISSIVE))
                    builtinData.emissiveColor = surfaceDescription.Emission;
            		#endif
    
                    // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                    // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                    // This is a limitation of the current MRT approach.
    
                    #if _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
                    #endif
    
                    // TODO: We should generate distortion / distortionBlur for non distortion pass
                    #if (SHADERPASS == SHADERPASS_DISTORTION)
                    builtinData.distortion = surfaceDescription.Distortion;
                    builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                    #endif
    
                    #ifndef SHADER_UNLIT
                    // PostInitBuiltinData call ApplyDebugToBuiltinData
                    PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                    #else
                    ApplyDebugToBuiltinData(builtinData);
                    #endif
    
                    RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
                }
    
                // --------------------------------------------------
                // Main
    
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassMotionVectors.hlsl"
    
                // --------------------------------------------------
                // Visual Effect Vertex Invocations
    
            	#ifdef HAVE_VFX_MODIFICATION
            	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
            	#endif
    
                ENDHLSL
            }
            Pass
            {
                Name "TransparentDepthPrepass"
                Tags
                {
                    "LightMode" = "TransparentDepthPrepass"
                }
    
                // Render State
                Cull [_CullMode]
                Blend One Zero
                ZWrite On
                Stencil
                    {
                        WriteMask [_StencilWriteMaskDepth]
                        Ref [_StencilRefDepth]
                        CompFront Always
                        PassFront Replace
                        CompBack Always
                        PassBack Replace
                    }
    
                // Debug
                // <None>
    
                // --------------------------------------------------
                // Pass
    
                HLSLPROGRAM
    
                // Pragmas
                #pragma instancing_options renderinglayer
                #pragma target 4.5
                #pragma vertex Vert
                #pragma fragment Frag
                #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
                #pragma multi_compile_instancing
                #pragma instancing_options procedural:setupProcedural
    
                // Keywords
                #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
                #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
                #pragma shader_feature_local _ _DOUBLESIDED_ON
                #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
                #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
                #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
                #pragma shader_feature_local_fragment _ _DISABLE_DECALS
                #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
                #pragma shader_feature_local_fragment _ _DISABLE_SSR
                #pragma shader_feature_local_raytracing _ _DISABLE_SSR
                #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
                #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
                #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
                #pragma shader_feature _ _FORCE_FORWARD_EMISSIVE
                // GraphKeywords: <None>
    
                // For custom interpolators to inject a substruct definition before FragInputs definition,
                // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
                struct CustomInterpolators
                {
                    float4 SplatMapColor;
                };
                #define USE_CUSTOMINTERP_SUBSTRUCT
                
    
    
                // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
            	#ifdef HAVE_VFX_MODIFICATION
            	struct FragInputsVFX
                {
                    /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
                };
                #endif
    
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
            	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
    
                // --------------------------------------------------
                // Defines
    
                // Attribute
                #define ATTRIBUTES_NEED_NORMAL
                #define ATTRIBUTES_NEED_TANGENT
                #define VARYINGS_NEED_POSITION_WS
                #define VARYINGS_NEED_TANGENT_TO_WORLD
    
                #define HAVE_MESH_MODIFICATION
    
    
                #define SHADERPASS SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                #define RAYTRACING_SHADER_GRAPH_DEFAULT
    
    
                // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
                // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
                // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
                // to still allow us to rename the field and keyword of this node without breaking existing code.
                #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
                #endif
    
                #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
                #endif
                // end
    
                #ifndef SHADER_UNLIT
                // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
                // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
                #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                    #define VARYINGS_NEED_CULLFACE
                #endif
                #endif
    
                // Specific Material Define
            #define _SPECULAR_OCCLUSION_FROM_AO 1
                #define _ENERGY_CONSERVING_SPECULAR 1
                
                // If we use subsurface scattering, enable output split lighting (for forward pass)
                #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
                    #define OUTPUT_SPLIT_LIGHTING
                #endif
                
                // This shader support recursive rendering for raytracing
                #define HAVE_RECURSIVE_RENDERING
                
                // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
    
                // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
                // we should have a code like this:
                // if !defined(_DISABLE_SSR_TRANSPARENT)
                // pragma multi_compile _ WRITE_NORMAL_BUFFER
                // endif
                // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
                // it based on if SSR transparent in frame settings and not (and stripper can strip it).
                // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
                // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
                // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
                #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                    #define WRITE_NORMAL_BUFFER
                #endif
                #endif
    
                #ifndef DEBUG_DISPLAY
                    // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                    // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                    #if !defined(_SURFACE_TYPE_TRANSPARENT)
                        #if SHADERPASS == SHADERPASS_FORWARD
                        #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                        #elif SHADERPASS == SHADERPASS_GBUFFER
                        #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                        #endif
                    #endif
                #endif
    
                // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
                #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                    #define _DEFERRED_CAPABLE_MATERIAL
                #endif
    
                // Translate transparent motion vector define
                #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                    #define _WRITE_TRANSPARENT_MOTION_VECTOR
                #endif
    
                // Dots Instancing
                // DotsInstancingOptions: <None>
    
                // Various properties
    
                // HybridV1InjectedBuiltinProperties: <None>
    
                // -- Graph Properties
                CBUFFER_START(UnityPerMaterial)
                float2 HeightRemap3;
                float2 HeightRemap2;
                float4 Tiling_Offset3;
                float4 Tiling_Offset0;
                float2 HeightRemap4;
                float4 Tiling_Offset2;
                float2 HeightRemap0;
                float4 LayerMask3_TexelSize;
                float4 LayerMask2_TexelSize;
                float4 LayerNormal3_TexelSize;
                float4 LayerNormal2_TexelSize;
                float2 HeightRemap1;
                float4 Tiling_Offset1;
                float4 Layer0_TexelSize;
                float4 Layer1_TexelSize;
                float4 Layer2_TexelSize;
                float4 Layer3_TexelSize;
                float UVXZScale;
                float4 LayerNormal1_TexelSize;
                float4 LayerNormal0_TexelSize;
                float4 LayerMask1_TexelSize;
                float4 LayerMask0_TexelSize;
                float heightTransition;
                float4 BaseTex_TexelSize;
                float4 BaseNormal_TexelSize;
                float4 BaseMask_TexelSize;
                float4 Tiling_Offset;
                float2 HeightRemap;
                float4 SlopeTex_TexelSize;
                float4 SlopeNormal_TexelSize;
                float4 SlopeMask_TexelSize;
                float4 Tiling_Offset4;
                float2 SlopeRemap;
                float SlopePow;
                float4 _EmissionColor;
                float _UseShadowThreshold;
                float4 _DoubleSidedConstants;
                float _BlendMode;
                float _EnableBlendModePreserveSpecularLighting;
                float _RayTracing;
                float _RefractionModel;
                CBUFFER_END
                
                // Object and Global properties
                SAMPLER(SamplerState_Linear_Repeat);
                TEXTURE2D(LayerMask3);
                SAMPLER(samplerLayerMask3);
                TEXTURE2D(LayerMask2);
                SAMPLER(samplerLayerMask2);
                TEXTURE2D(LayerNormal3);
                SAMPLER(samplerLayerNormal3);
                TEXTURE2D(LayerNormal2);
                SAMPLER(samplerLayerNormal2);
                TEXTURE2D(Layer0);
                SAMPLER(samplerLayer0);
                TEXTURE2D(Layer1);
                SAMPLER(samplerLayer1);
                TEXTURE2D(Layer2);
                SAMPLER(samplerLayer2);
                TEXTURE2D(Layer3);
                SAMPLER(samplerLayer3);
                TEXTURE2D(LayerNormal1);
                SAMPLER(samplerLayerNormal1);
                TEXTURE2D(LayerNormal0);
                SAMPLER(samplerLayerNormal0);
                TEXTURE2D(LayerMask1);
                SAMPLER(samplerLayerMask1);
                TEXTURE2D(LayerMask0);
                SAMPLER(samplerLayerMask0);
                TEXTURE2D(BaseTex);
                SAMPLER(samplerBaseTex);
                TEXTURE2D(BaseNormal);
                SAMPLER(samplerBaseNormal);
                TEXTURE2D(BaseMask);
                SAMPLER(samplerBaseMask);
                TEXTURE2D(SlopeTex);
                SAMPLER(samplerSlopeTex);
                TEXTURE2D(SlopeNormal);
                SAMPLER(samplerSlopeNormal);
                TEXTURE2D(SlopeMask);
                SAMPLER(samplerSlopeMask);
    
                // -- Property used by ScenePickingPass
                #ifdef SCENEPICKINGPASS
                float4 _SelectionID;
                #endif
    
                // -- Properties used by SceneSelectionPass
                #ifdef SCENESELECTIONPASS
                int _ObjectId;
                int _PassValue;
                #endif
    
                // Includes
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
            	#include "Assets/Shaders/GPUTerrainHeight/TerrainVertexPosition.hlsl"
                #include "Assets/Shaders/TerrainShading/HeightBlend.hlsl"
    
                // --------------------------------------------------
                // Structs and Packing
    
                struct AttributesMesh
                {
                     float3 positionOS : POSITION;
                     float3 normalOS : NORMAL;
                     float4 tangentOS : TANGENT;
                    #if UNITY_ANY_INSTANCING_ENABLED
                     uint instanceID : INSTANCEID_SEMANTIC;
                    #endif
                };
                struct VaryingsMeshToPS
                {
                    SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
                     float3 positionRWS;
                     float3 normalWS;
                     float4 tangentWS;
                    #if UNITY_ANY_INSTANCING_ENABLED
                     uint instanceID : CUSTOM_INSTANCE_ID;
                    #endif
                     float4 SplatMapColor;
                };
                struct VertexDescriptionInputs
                {
                     float3 ObjectSpaceNormal;
                     float3 ObjectSpaceTangent;
                     float3 ObjectSpacePosition;
                };
                struct SurfaceDescriptionInputs
                {
                     float3 ObjectSpaceNormal;
                     float3 WorldSpaceNormal;
                     float3 TangentSpaceNormal;
                     float3 ObjectSpacePosition;
                     float4 SplatMapColor;
                };
                struct PackedVaryingsMeshToPS
                {
                    SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
                    #if UNITY_ANY_INSTANCING_ENABLED
                     uint instanceID : CUSTOM_INSTANCE_ID;
                    #endif
                     float3 interp0 : INTERP0;
                     float3 interp1 : INTERP1;
                     float4 interp2 : INTERP2;
                     float4 interp3 : INTERP3;
                };
    
                PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
                {
                    PackedVaryingsMeshToPS output;
                    ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
                    output.positionCS = input.positionCS;
                    output.interp0.xyz =  input.positionRWS;
                    output.interp1.xyz =  input.normalWS;
                    output.interp2.xyzw =  input.tangentWS;
                    #if UNITY_ANY_INSTANCING_ENABLED
                    output.instanceID = input.instanceID;
                    #endif
                    output.interp3.xyzw =  input.SplatMapColor;
                    return output;
                }
                
                VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
                {
                    VaryingsMeshToPS output;
                    output.positionCS = input.positionCS;
                    output.positionRWS = input.interp0.xyz;
                    output.normalWS = input.interp1.xyz;
                    output.tangentWS = input.interp2.xyzw;
                    #if UNITY_ANY_INSTANCING_ENABLED
                    output.instanceID = input.instanceID;
                    #endif
                    output.SplatMapColor = input.interp3.xyzw;
                    return output;
                }
                
    
                // --------------------------------------------------
                // Graph
    
    
                // Graph Functions
                
                void UnityGetInstanceID_float(out float Out)
                {
                #if UNITY_ANY_INSTANCING_ENABLED
                    Out = unity_InstanceID;
                #else
                    Out = 0;
                #endif
                }
                
                void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
                {
                    RGBA = float4(R, G, B, A);
                    RGB = float3(R, G, B);
                    RG = float2(R, G);
                }
                
                void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
                {
                    Out = A / B;
                }
                
                void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
                {
                    Out = UV * Tiling + Offset;
                }
                
                struct Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float
                {
                };
                
                void SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(float4 Tiling_Offset, float2 Vector2, Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float IN, out float2 OutVector2_1)
                {
                    float2 _Property_5ea954dbdecc454b839a01badac3afd6_Out_0 = Vector2;
                    float4 _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0 = Tiling_Offset;
                    float _Split_c19978cb25c5413eaf23432179b0e3af_R_1 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[0];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_G_2 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[1];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_B_3 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[2];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_A_4 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[3];
                    float4 _Combine_387ca93b6841454bad52ea2f221d199f_RGBA_4;
                    float3 _Combine_387ca93b6841454bad52ea2f221d199f_RGB_5;
                    float2 _Combine_387ca93b6841454bad52ea2f221d199f_RG_6;
                    Unity_Combine_float(_Split_c19978cb25c5413eaf23432179b0e3af_R_1, _Split_c19978cb25c5413eaf23432179b0e3af_G_2, 0, 0, _Combine_387ca93b6841454bad52ea2f221d199f_RGBA_4, _Combine_387ca93b6841454bad52ea2f221d199f_RGB_5, _Combine_387ca93b6841454bad52ea2f221d199f_RG_6);
                    float4 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGBA_4;
                    float3 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGB_5;
                    float2 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6;
                    Unity_Combine_float(_Split_c19978cb25c5413eaf23432179b0e3af_B_3, _Split_c19978cb25c5413eaf23432179b0e3af_A_4, 0, 0, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGBA_4, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGB_5, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6);
                    float2 _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3;
                    Unity_TilingAndOffset_float(_Property_5ea954dbdecc454b839a01badac3afd6_Out_0, _Combine_387ca93b6841454bad52ea2f221d199f_RG_6, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6, _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3);
                    OutVector2_1 = _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3;
                }
                
                void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
                {
                    Out = A * B;
                }
                
                void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
                {
                    Out = A * B;
                }
                
                void Desaturate_float(float3 oldcolor, float k, out float3 newcolor){
                    float intensity = dot(oldcolor,float3(0.3,0.59,0.11));
                    newcolor.x = intensity*k + oldcolor.x*(1-k);
                    newcolor.y = intensity*k + oldcolor.y*(1-k);
                    newcolor.z = intensity*k + oldcolor.z*(1-k);
                }
                
                void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
                {
                    Out = A * B;
                }
                
                void Unity_Lerp_float(float A, float B, float T, out float Out)
                {
                    Out = lerp(A, B, T);
                }
                
                struct Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float
                {
                };
                
                void SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(UnityTexture2D Albedo, UnityTexture2D Normal, UnityTexture2D Mask, float DesaturationK, float BrightnessAtten, float2 UV, float2 HeightRemap, Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float IN, out float4 oAlbedo_0, out float4 oNormal_1, out float4 oMask_2)
                {
                    UnityTexture2D _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0 = Albedo;
                    float2 _Property_76ed35a32977448f8ea254bf6de06d33_Out_0 = UV;
                    float4 _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_R_4 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.r;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_G_5 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.g;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_B_6 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.b;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_A_7 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.a;
                    float _Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0 = BrightnessAtten;
                    float4 _Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2);
                    float _Float_f48d9dc0c16249fe8fe5b97c86e7f56c_Out_0 = -0.25;
                    float2 _Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2;
                    Unity_Multiply_float2_float2(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0, (_Float_f48d9dc0c16249fe8fe5b97c86e7f56c_Out_0.xx), _Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2);
                    float4 _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_R_4 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.r;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_G_5 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.g;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_B_6 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.b;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_A_7 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.a;
                    float4 _Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2);
                    float _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0 = DesaturationK;
                    float3 _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1;
                    Desaturate_float((_Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1);
                    float3 _Multiply_410af5ac81154a3aab73254ac228eccd_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2.xyz), _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1, _Multiply_410af5ac81154a3aab73254ac228eccd_Out_2);
                    UnityTexture2D _Property_d05972164bdd4e0189593b8dae00db03_Out_0 = Normal;
                    float4 _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0 = SAMPLE_TEXTURE2D(_Property_d05972164bdd4e0189593b8dae00db03_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d05972164bdd4e0189593b8dae00db03_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0);
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_R_4 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.r;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_G_5 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.g;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_B_6 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.b;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_A_7 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.a;
                    float4 _Multiply_4999f90cbd1848acaf20b253953c0963_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_4999f90cbd1848acaf20b253953c0963_Out_2);
                    float4 _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_d05972164bdd4e0189593b8dae00db03_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d05972164bdd4e0189593b8dae00db03_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0);
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_R_4 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.r;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_G_5 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.g;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_B_6 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.b;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_A_7 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.a;
                    float4 _Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2);
                    float3 _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1;
                    Desaturate_float((_Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1);
                    float3 _Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_4999f90cbd1848acaf20b253953c0963_Out_2.xyz), _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1, _Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2);
                    UnityTexture2D _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0 = Mask;
                    float4 _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0 = SAMPLE_TEXTURE2D(_Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_R_4 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.r;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_G_5 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.g;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_B_6 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.b;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_A_7 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.a;
                    float4 _Multiply_0b2356625aad40439a89b8519e36e62b_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_0b2356625aad40439a89b8519e36e62b_Out_2);
                    float4 _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0 = SAMPLE_TEXTURE2D(_Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_R_4 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.r;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_G_5 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.g;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_B_6 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.b;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_A_7 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.a;
                    float4 _Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2);
                    float3 _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1;
                    Desaturate_float((_Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1);
                    float3 _Multiply_3c8f32d2a057478e869493099765b841_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_0b2356625aad40439a89b8519e36e62b_Out_2.xyz), _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1, _Multiply_3c8f32d2a057478e869493099765b841_Out_2);
                    float _Split_77de2b1a3326407b985f625d91e2063b_R_1 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[0];
                    float _Split_77de2b1a3326407b985f625d91e2063b_G_2 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[1];
                    float _Split_77de2b1a3326407b985f625d91e2063b_B_3 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[2];
                    float _Split_77de2b1a3326407b985f625d91e2063b_A_4 = 0;
                    float2 _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0 = HeightRemap;
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_R_1 = _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0[0];
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_G_2 = _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0[1];
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_B_3 = 0;
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_A_4 = 0;
                    float _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3;
                    Unity_Lerp_float(_Split_0df13f6921fe4db99b01dcff93c3b978_R_1, _Split_0df13f6921fe4db99b01dcff93c3b978_G_2, _Split_77de2b1a3326407b985f625d91e2063b_B_3, _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3);
                    float4 _Combine_17dba591e95443299750f53a93613083_RGBA_4;
                    float3 _Combine_17dba591e95443299750f53a93613083_RGB_5;
                    float2 _Combine_17dba591e95443299750f53a93613083_RG_6;
                    Unity_Combine_float(_Split_77de2b1a3326407b985f625d91e2063b_R_1, _Split_77de2b1a3326407b985f625d91e2063b_G_2, _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3, _Split_77de2b1a3326407b985f625d91e2063b_A_4, _Combine_17dba591e95443299750f53a93613083_RGBA_4, _Combine_17dba591e95443299750f53a93613083_RGB_5, _Combine_17dba591e95443299750f53a93613083_RG_6);
                    oAlbedo_0 = (float4(_Multiply_410af5ac81154a3aab73254ac228eccd_Out_2, 1.0));
                    oNormal_1 = (float4(_Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2, 1.0));
                    oMask_2 = _Combine_17dba591e95443299750f53a93613083_RGBA_4;
                }
                
                void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
                {
                    Out = dot(A, B);
                }
                
                void Unity_Power_float(float A, float B, out float Out)
                {
                    Out = pow(A, B);
                }
                
                void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
                {
                    Out = smoothstep(Edge1, Edge2, In);
                }
                
                void Unity_OneMinus_float(float In, out float Out)
                {
                    Out = 1 - In;
                }
                
                void BlendByMask_float(float4 a, float4 b, float4 c, float4 d, float4 blend, out float4 ret){
                    ret = a*blend.x + b*blend.y + c*blend.z + d*blend.w;
                }
                
                void Unity_Add_float4(float4 A, float4 B, out float4 Out)
                {
                    Out = A + B;
                }
    
                // Graph Vertex
                struct VertexDescription
                {
                    float3 Position;
                    float3 Normal;
                    float3 Tangent;
                    float4 SplatMapColor;
                };
                
                VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
                {
                    VertexDescription description = (VertexDescription)0;
                    float _InstanceID_1b9fa912aec74e76aae6821c84f95467_Out_0;
                    UnityGetInstanceID_float(_InstanceID_1b9fa912aec74e76aae6821c84f95467_Out_0);
                    float3 _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_oposOS_2;
                    float4 _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_color_3;
                    float3 _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_normal_4;
                    GetTerrainVertex_float(_InstanceID_1b9fa912aec74e76aae6821c84f95467_Out_0, IN.ObjectSpacePosition, _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_oposOS_2, _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_color_3, _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_normal_4);
                    description.Position = _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_oposOS_2;
                    description.Normal = _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_normal_4;
                    description.Tangent = IN.ObjectSpaceTangent;
                    description.SplatMapColor = _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_color_3;
                    return description;
                }
    
                // Graph Pixel
                struct SurfaceDescription
                {
                    float Alpha;
                    float3 NormalTS;
                    float Smoothness;
                };
                
                SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
                {
                    SurfaceDescription surface = (SurfaceDescription)0;
                    UnityTexture2D _Property_4e780cffb4044909a58e26eaff6361d1_Out_0 = UnityBuildTexture2DStructNoScale(BaseTex);
                    UnityTexture2D _Property_20a5bc7358e64fe8b3327adb9ce635ea_Out_0 = UnityBuildTexture2DStructNoScale(BaseNormal);
                    UnityTexture2D _Property_090d521163b9493189233a9f2e1cf5ed_Out_0 = UnityBuildTexture2DStructNoScale(BaseMask);
                    float4 _Property_6881ae016d754988b27811b95cc834ca_Out_0 = Tiling_Offset;
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_R_1 = IN.ObjectSpacePosition[0];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_G_2 = IN.ObjectSpacePosition[1];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_B_3 = IN.ObjectSpacePosition[2];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_A_4 = 0;
                    float4 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGBA_4;
                    float3 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGB_5;
                    float2 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6;
                    Unity_Combine_float(_Split_3335daa3a4b34f69a62c9c8a1c6f39b2_R_1, _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_B_3, 0, 0, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGBA_4, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGB_5, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6);
                    float _Property_8984e4bf1c26459280f9fece3c52167c_Out_0 = UVXZScale;
                    float2 _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2;
                    Unity_Divide_float2(_Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6, (_Property_8984e4bf1c26459280f9fece3c52167c_Out_0.xx), _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2);
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_737be3819d2c4f29853810a18717cae3;
                    float2 _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_6881ae016d754988b27811b95cc834ca_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1);
                    float2 _Property_dcc00367280c4dc6b11a52aa07754830_Out_0 = HeightRemap;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_6722d68456e84aecb015a07880cbbd46;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_4e780cffb4044909a58e26eaff6361d1_Out_0, _Property_20a5bc7358e64fe8b3327adb9ce635ea_Out_0, _Property_090d521163b9493189233a9f2e1cf5ed_Out_0, 0.25, 4, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1, _Property_dcc00367280c4dc6b11a52aa07754830_Out_0, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2);
                    UnityTexture2D _Property_3d7142ef79234a0ba6cda49555992a80_Out_0 = UnityBuildTexture2DStructNoScale(Layer0);
                    UnityTexture2D _Property_42e52c243a994f04944481ff3627fc2c_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal0);
                    UnityTexture2D _Property_e67647d6cf1b44bebf91845a255b522c_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask0);
                    float4 _Property_4e6c66ba03a842e482f7040c3fe163dc_Out_0 = Tiling_Offset0;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674;
                    float2 _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_4e6c66ba03a842e482f7040c3fe163dc_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1);
                    float2 _Property_8cf19c3a22e64f0a85a51c8cbf5085e7_Out_0 = HeightRemap0;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_3d7142ef79234a0ba6cda49555992a80_Out_0, _Property_42e52c243a994f04944481ff3627fc2c_Out_0, _Property_e67647d6cf1b44bebf91845a255b522c_Out_0, 0.25, 4, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1, _Property_8cf19c3a22e64f0a85a51c8cbf5085e7_Out_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2);
                    UnityTexture2D _Property_1bce6ca387e847e1a43a4534686b655f_Out_0 = UnityBuildTexture2DStructNoScale(Layer1);
                    UnityTexture2D _Property_1e7513acda3b4b20a5a028d0da4bcfb0_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal1);
                    UnityTexture2D _Property_75d4521a27cb403399759cefa7be71f2_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask1);
                    float4 _Property_e17bf3be22544a639340ddea65766b89_Out_0 = Tiling_Offset1;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_df825eb885d947429ce6daf495a641a7;
                    float2 _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_e17bf3be22544a639340ddea65766b89_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1);
                    float2 _Property_d682537de1054cf4b1eddd1680d152fb_Out_0 = HeightRemap1;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_1bce6ca387e847e1a43a4534686b655f_Out_0, _Property_1e7513acda3b4b20a5a028d0da4bcfb0_Out_0, _Property_75d4521a27cb403399759cefa7be71f2_Out_0, 0.25, 4, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1, _Property_d682537de1054cf4b1eddd1680d152fb_Out_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2);
                    UnityTexture2D _Property_b79fba6b5b1f40b88b38803dad2bb2e5_Out_0 = UnityBuildTexture2DStructNoScale(Layer2);
                    UnityTexture2D _Property_a787f1642c6d4570af8ae47ea63a59ed_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal2);
                    UnityTexture2D _Property_f4ae055a87ef48cb8df5c603ca6f72b0_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask2);
                    float4 _Property_e12db1a96427478999d081afcb59d771_Out_0 = Tiling_Offset2;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d;
                    float2 _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_e12db1a96427478999d081afcb59d771_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1);
                    float2 _Property_3be82515dad24d76b9af558757032f30_Out_0 = HeightRemap2;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_b79fba6b5b1f40b88b38803dad2bb2e5_Out_0, _Property_a787f1642c6d4570af8ae47ea63a59ed_Out_0, _Property_f4ae055a87ef48cb8df5c603ca6f72b0_Out_0, 0.25, 4, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1, _Property_3be82515dad24d76b9af558757032f30_Out_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2);
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_R_1 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[0];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_G_2 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[1];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_B_3 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[2];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_A_4 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[3];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_R_1 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[0];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_G_2 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[1];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_B_3 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[2];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_A_4 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[3];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_R_1 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[0];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_G_2 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[1];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_B_3 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[2];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_A_4 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[3];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_R_1 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[0];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_G_2 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[1];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_B_3 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[2];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_A_4 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[3];
                    float4 _Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4;
                    float3 _Combine_f97595cb40654c9a8d82c0297e7280f3_RGB_5;
                    float2 _Combine_f97595cb40654c9a8d82c0297e7280f3_RG_6;
                    Unity_Combine_float(_Split_d81e33a0495c4ac09042d2d39dd09ba5_B_3, _Split_d2ed4cee74e042da88b7348fcfe80cab_B_3, _Split_b3522eb5287e4b28baab87cc1fa16589_B_3, _Split_a4f15428b23a40ef8f25398e9cff2d7c_B_3, _Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4, _Combine_f97595cb40654c9a8d82c0297e7280f3_RGB_5, _Combine_f97595cb40654c9a8d82c0297e7280f3_RG_6);
                    UnityTexture2D _Property_8e8b4d9a2dfc42148eb69519397ecebc_Out_0 = UnityBuildTexture2DStructNoScale(Layer3);
                    UnityTexture2D _Property_1443e12ec6544d2c8e8dcc71d67adb04_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal3);
                    UnityTexture2D _Property_b8f1cfb1112b4d2e8e2fe919f5003fb3_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask3);
                    float4 _Property_d9e7ba461b95446db56c0b99fce9de5d_Out_0 = Tiling_Offset3;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13;
                    float2 _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_d9e7ba461b95446db56c0b99fce9de5d_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1);
                    float2 _Property_e5d43ace4a66401faff3165675d44af0_Out_0 = HeightRemap3;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_8e8b4d9a2dfc42148eb69519397ecebc_Out_0, _Property_1443e12ec6544d2c8e8dcc71d67adb04_Out_0, _Property_b8f1cfb1112b4d2e8e2fe919f5003fb3_Out_0, 0.25, 4, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1, _Property_e5d43ace4a66401faff3165675d44af0_Out_0, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2);
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_R_1 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[0];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_G_2 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[1];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_B_3 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[2];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_A_4 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[3];
                    UnityTexture2D _Property_edf497c59ff340a5897695b2e8e9ed68_Out_0 = UnityBuildTexture2DStructNoScale(SlopeTex);
                    UnityTexture2D _Property_ae03f8d1bb284168ae1cb40c2c8d7dce_Out_0 = UnityBuildTexture2DStructNoScale(SlopeNormal);
                    UnityTexture2D _Property_35050279a32b481b878853831820cb33_Out_0 = UnityBuildTexture2DStructNoScale(SlopeMask);
                    float4 _Property_a3c340f0d1f647858c0d27fc6fa0d127_Out_0 = Tiling_Offset4;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67;
                    float2 _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_a3c340f0d1f647858c0d27fc6fa0d127_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1);
                    float2 _Property_8a3f864a5b9c469b92480bb635123790_Out_0 = HeightRemap4;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_edf497c59ff340a5897695b2e8e9ed68_Out_0, _Property_ae03f8d1bb284168ae1cb40c2c8d7dce_Out_0, _Property_35050279a32b481b878853831820cb33_Out_0, 0.25, 4, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1, _Property_8a3f864a5b9c469b92480bb635123790_Out_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2);
                    float _Split_015a6ee9887b47abb21193d18e609740_R_1 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[0];
                    float _Split_015a6ee9887b47abb21193d18e609740_G_2 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[1];
                    float _Split_015a6ee9887b47abb21193d18e609740_B_3 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[2];
                    float _Split_015a6ee9887b47abb21193d18e609740_A_4 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[3];
                    float4 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4;
                    float3 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGB_5;
                    float2 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RG_6;
                    Unity_Combine_float(_Split_d87c9f86d0a94f8b9b66cbcb29d89dde_B_3, _Split_015a6ee9887b47abb21193d18e609740_B_3, 0, 0, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGB_5, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RG_6);
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_R_1 = IN.SplatMapColor[0];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_G_2 = IN.SplatMapColor[1];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_B_3 = IN.SplatMapColor[2];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_A_4 = IN.SplatMapColor[3];
                    float4 _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4;
                    float3 _Combine_7b79ed205a4b435d8742217505a4c51d_RGB_5;
                    float2 _Combine_7b79ed205a4b435d8742217505a4c51d_RG_6;
                    Unity_Combine_float(1, _Split_ea099c0905af42a6804ca0dc2f58dc2f_R_1, _Split_ea099c0905af42a6804ca0dc2f58dc2f_G_2, _Split_ea099c0905af42a6804ca0dc2f58dc2f_B_3, _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4, _Combine_7b79ed205a4b435d8742217505a4c51d_RGB_5, _Combine_7b79ed205a4b435d8742217505a4c51d_RG_6);
                    float2 _Property_5538a1bac07f487589432be4f79dd05e_Out_0 = SlopeRemap;
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_R_1 = _Property_5538a1bac07f487589432be4f79dd05e_Out_0[0];
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_G_2 = _Property_5538a1bac07f487589432be4f79dd05e_Out_0[1];
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_B_3 = 0;
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_A_4 = 0;
                    float _DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2;
                    Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(0, 1, 0), _DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2);
                    float _Property_795a1803a8484214b987093ec034ab6a_Out_0 = SlopePow;
                    float _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2;
                    Unity_Power_float(_DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2, _Property_795a1803a8484214b987093ec034ab6a_Out_0, _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2);
                    float _Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3;
                    Unity_Smoothstep_float(_Split_03a4c3769cad421fb634dee3fa2beefb_R_1, _Split_03a4c3769cad421fb634dee3fa2beefb_G_2, _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2, _Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3);
                    float _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1;
                    Unity_OneMinus_float(_Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3, _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1);
                    float4 _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4;
                    float3 _Combine_9702e823fbe443b4b07afb499b6912a4_RGB_5;
                    float2 _Combine_9702e823fbe443b4b07afb499b6912a4_RG_6;
                    Unity_Combine_float(_Split_ea099c0905af42a6804ca0dc2f58dc2f_A_4, _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1, 0, 0, _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4, _Combine_9702e823fbe443b4b07afb499b6912a4_RGB_5, _Combine_9702e823fbe443b4b07afb499b6912a4_RG_6);
                    float _Property_d5cf363bc21a4f92a00fac464b9b11cf_Out_0 = heightTransition;
                    float4 _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5;
                    float4 _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6;
                    HeightBlend8Layers_float(_Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4, _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4, _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4, _Property_d5cf363bc21a4f92a00fac464b9b11cf_Out_0, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6);
                    float4 _BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5);
                    float4 _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5);
                    float4 _Add_090184f4bd18493ca37179ea1a8364d0_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5, _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5, _Add_090184f4bd18493ca37179ea1a8364d0_Out_2);
                    float4 _BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5);
                    float4 _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5);
                    float4 _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5, _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5, _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2);
                    float _Split_d9a7a90627444523a2cda58b36d68116_R_1 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[0];
                    float _Split_d9a7a90627444523a2cda58b36d68116_G_2 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[1];
                    float _Split_d9a7a90627444523a2cda58b36d68116_B_3 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[2];
                    float _Split_d9a7a90627444523a2cda58b36d68116_A_4 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[3];
                    surface.Alpha = 1;
                    surface.NormalTS = (_Add_090184f4bd18493ca37179ea1a8364d0_Out_2.xyz);
                    surface.Smoothness = _Split_d9a7a90627444523a2cda58b36d68116_A_4;
                    return surface;
                }
    
                // --------------------------------------------------
                // Build Graph Inputs
    
                
                VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
                {
                    VertexDescriptionInputs output;
                    ZERO_INITIALIZE(VertexDescriptionInputs, output);
                
                    output.ObjectSpaceNormal =           input.normalOS;
                    output.ObjectSpaceTangent =          input.tangentOS.xyz;
                    output.ObjectSpacePosition =         input.positionOS;
                
                    return output;
                }
                
                AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
                #ifdef USE_CUSTOMINTERP_SUBSTRUCT
                    #ifdef TESSELLATION_ON
                    , inout VaryingsMeshToDS varyings
                    #else
                    , inout VaryingsMeshToPS varyings
                    #endif
                #endif
                #ifdef HAVE_VFX_MODIFICATION
                        , AttributesElement element
                #endif
                    )
                {
                    // build graph inputs
                    VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
                    // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
                
                    // evaluate vertex graph
                #ifdef HAVE_VFX_MODIFICATION
                    GraphProperties properties;
                    ZERO_INITIALIZE(GraphProperties, properties);
                
                    // Fetch the vertex graph properties for the particle instance.
                    GetElementVertexProperties(element, properties);
                
                    VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
                #else
                    VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
                #endif
                
                    // copy graph output to the results
                    input.positionOS = vertexDescription.Position;
                    input.normalOS = vertexDescription.Normal;
                    input.tangentOS.xyz = vertexDescription.Tangent;
                
                    varyings.SplatMapColor = vertexDescription.SplatMapColor;
                
                    return input;
                }
                
                FragInputs BuildFragInputs(VaryingsMeshToPS input)
                {
                    FragInputs output;
                    ZERO_INITIALIZE(FragInputs, output);
                
                    // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
                    // TODO: this is a really poor workaround, but the variable is used in a bunch of places
                    // to compute normals which are then passed on elsewhere to compute other values...
                    output.tangentToWorld = k_identity3x3;
                    output.positionSS = input.positionCS;       // input.positionCS is SV_Position
                
                    output.positionRWS = input.positionRWS;
                    output.tangentToWorld = BuildTangentToWorld(input.tangentWS, input.normalWS);
                
                #ifdef HAVE_VFX_MODIFICATION
                    // FragInputs from VFX come from two places: Interpolator or CBuffer.
                    /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
                
                #endif
                
                    // splice point to copy custom interpolator fields from varyings to frag inputs
                    output.customInterpolators.SplatMapColor = input.SplatMapColor;
                
                    return output;
                }
                
                // existing HDRP code uses the combined function to go directly from packed to frag inputs
                FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
                {
                    UNITY_SETUP_INSTANCE_ID(input);
                    VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
                    return BuildFragInputs(unpacked);
                }
                
                SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
                {
                    SurfaceDescriptionInputs output;
                    ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
                
                    output.WorldSpaceNormal =            normalize(input.tangentToWorld[2].xyz);
                    #if defined(SHADER_STAGE_RAY_TRACING)
                    output.ObjectSpaceNormal =           mul(output.WorldSpaceNormal, (float3x3) ObjectToWorld3x4());
                    #else
                    output.ObjectSpaceNormal =           normalize(mul(output.WorldSpaceNormal, (float3x3) UNITY_MATRIX_M));           // transposed multiplication by inverse matrix to handle normal scale
                    #endif
                    output.TangentSpaceNormal =          float3(0.0f, 0.0f, 1.0f);
                    output.ObjectSpacePosition =         TransformWorldToObject(input.positionRWS);
                
                    // splice point to copy frag inputs custom interpolator pack into the SDI
                    output.SplatMapColor = input.customInterpolators.SplatMapColor;
                
                    return output;
                }
                
    
                // --------------------------------------------------
                // Build Surface Data (Specific Material)
    
            void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
                {
                    ZERO_INITIALIZE(SurfaceData, surfaceData);
                
                    // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
                    // however specularOcclusion can come from the graph, so need to be init here so it can be override.
                    surfaceData.specularOcclusion = 1.0;
                
                    surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
                
                    #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                        if (_EnableSSRefraction)
                        {
                
                            surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                            surfaceDescription.Alpha = 1.0;
                        }
                        else
                        {
                            surfaceData.ior = 1.0;
                            surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                            surfaceData.atDistance = 1.0;
                            surfaceData.transmittanceMask = 0.0;
                            surfaceDescription.Alpha = 1.0;
                        }
                    #else
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                    #endif
                
                    // These static material feature allow compile time optimization
                    surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
                    #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_TRANSMISSION
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_ANISOTROPY
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
                    #endif
                
                    #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                        // Require to have setup baseColor
                        // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                        surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
                    #endif
                
                    #ifdef _DOUBLESIDED_ON
                        float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                    #else
                        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                    #endif
                
                    // normal delivered to master node
                    GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
                
                    surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                
                    surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
                
                
                    #if HAVE_DECALS
                        if (_EnableDecals)
                        {
                            float alpha = 1.0;
                            alpha = surfaceDescription.Alpha;
                
                            // Both uses and modifies 'surfaceData.normalWS'.
                            DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                            ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                        }
                    #endif
                
                    bentNormalWS = surfaceData.normalWS;
                
                    surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
                
                    #ifdef DEBUG_DISPLAY
                        if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                        {
                            // TODO: need to update mip info
                            surfaceData.metallic = 0;
                        }
                
                        // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                        // as it can modify attribute use for static lighting
                        ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
                    #endif
                
                    // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
                    // If user provide bent normal then we process a better term
                    #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                        // Just use the value passed through via the slot (not active otherwise)
                    #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                        // If we have bent normal and ambient occlusion, process a specular occlusion
                        surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                    #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                        surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                    #endif
                
                    #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                        surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                    #endif
                }
                
    
                // --------------------------------------------------
                // Get Surface And BuiltinData
    
                void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
                {
                    // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                    #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                    #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                    #endif
                    #endif
    
                    #ifndef SHADER_UNLIT
                    #ifdef _DOUBLESIDED_ON
                        float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                    #else
                        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                    #endif
    
                    ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                    #endif // SHADER_UNLIT
    
                    SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
    
                    #if defined(HAVE_VFX_MODIFICATION)
                    GraphProperties properties;
                    ZERO_INITIALIZE(GraphProperties, properties);
    
                    GetElementPixelProperties(fragInputs, properties);
    
                    SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                    #else
                    SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                    #endif
    
                    // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                    // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                    #ifdef _ALPHATEST_ON
                        float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                        #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                        // The TransparentDepthPrepass is also used with SSR transparent.
                        // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                        // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                        #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                        // DepthPostpass always use its own alpha threshold
                        alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                        #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                        // If use shadow threshold isn't enable we don't allow any test
                        #endif
    
                        GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                    #endif
    
                    #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                    #endif
    
                    #ifndef SHADER_UNLIT
                    float3 bentNormalWS;
                    BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
    
                    // Builtin Data
                    // For back lighting we use the oposite vertex normal
                    InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
    
                    #else
                    BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
    
                    ZERO_INITIALIZE(BuiltinData, builtinData); // No call to InitBuiltinData as we don't have any lighting
                    builtinData.opacity = surfaceDescription.Alpha;
    
                    #if defined(DEBUG_DISPLAY)
                        // Light Layers are currently not used for the Unlit shader (because it is not lit)
                        // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                        // display in the light layers visualization mode, therefore we need the renderingLayers
                        builtinData.renderingLayers = GetMeshRenderingLightLayer();
                    #endif
    
                    #endif // SHADER_UNLIT
    
                    #ifdef _ALPHATEST_ON
                        // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                        builtinData.alphaClipTreshold = alphaCutoff;
                    #endif
    
                    // override sampleBakedGI - not used by Unlit
    
            		// If we want to force forward emissive and we have GBuffer pass, don't do anything
            		#if !(SHADERPASS == SHADERPASS_GBUFFER && defined(_FORCE_FORWARD_EMISSIVE))
            		#endif
    
                    // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                    // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                    // This is a limitation of the current MRT approach.
    
                    #if _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
                    #endif
    
                    // TODO: We should generate distortion / distortionBlur for non distortion pass
                    #if (SHADERPASS == SHADERPASS_DISTORTION)
                    builtinData.distortion = surfaceDescription.Distortion;
                    builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                    #endif
    
                    #ifndef SHADER_UNLIT
                    // PostInitBuiltinData call ApplyDebugToBuiltinData
                    PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                    #else
                    ApplyDebugToBuiltinData(builtinData);
                    #endif
    
                    RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
                }
    
                // --------------------------------------------------
                // Main
    
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
    
                // --------------------------------------------------
                // Visual Effect Vertex Invocations
    
            	#ifdef HAVE_VFX_MODIFICATION
            	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
            	#endif
    
                ENDHLSL
            }
            Pass
            {
                Name "FullScreenDebug"
                Tags
                {
                    "LightMode" = "FullScreenDebug"
                }
    
                // Render State
                Cull [_CullMode]
                ZTest LEqual
                ZWrite Off
    
                // Debug
                // <None>
    
                // --------------------------------------------------
                // Pass
    
                HLSLPROGRAM
    
                // Pragmas
                #pragma instancing_options renderinglayer
                #pragma target 4.5
                #pragma vertex Vert
                #pragma fragment Frag
                #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
                #pragma multi_compile_instancing
                #pragma instancing_options procedural:setupProcedural
    
                // Keywords
                #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
                #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
                #pragma shader_feature_local _ _DOUBLESIDED_ON
                #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
                #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
                #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
                #pragma shader_feature_local_fragment _ _DISABLE_DECALS
                #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
                #pragma shader_feature_local_fragment _ _DISABLE_SSR
                #pragma shader_feature_local_raytracing _ _DISABLE_SSR
                #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
                #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
                #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
                #pragma shader_feature _ _FORCE_FORWARD_EMISSIVE
                // GraphKeywords: <None>
    
                // For custom interpolators to inject a substruct definition before FragInputs definition,
                // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
                struct CustomInterpolators
                {
                    float4 SplatMapColor;
                };
                #define USE_CUSTOMINTERP_SUBSTRUCT
                
    
    
                // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
            	#ifdef HAVE_VFX_MODIFICATION
            	struct FragInputsVFX
                {
                    /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
                };
                #endif
    
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
            	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
    
                // --------------------------------------------------
                // Defines
    
                // Attribute
                #define ATTRIBUTES_NEED_NORMAL
                #define ATTRIBUTES_NEED_TANGENT
                #define VARYINGS_NEED_POSITION_WS
                #define VARYINGS_NEED_TANGENT_TO_WORLD
    
                #define HAVE_MESH_MODIFICATION
    
    
                #define SHADERPASS SHADERPASS_FULL_SCREEN_DEBUG
                #define RAYTRACING_SHADER_GRAPH_DEFAULT
    
    
                // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
                // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
                // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
                // to still allow us to rename the field and keyword of this node without breaking existing code.
                #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
                #endif
    
                #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
                #endif
                // end
    
                #ifndef SHADER_UNLIT
                // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
                // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
                #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                    #define VARYINGS_NEED_CULLFACE
                #endif
                #endif
    
                // Specific Material Define
            #define _AMBIENT_OCCLUSION 1
                #define _SPECULAR_OCCLUSION_FROM_AO 1
                #define _ENERGY_CONSERVING_SPECULAR 1
                
                // If we use subsurface scattering, enable output split lighting (for forward pass)
                #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
                    #define OUTPUT_SPLIT_LIGHTING
                #endif
                
                // This shader support recursive rendering for raytracing
                #define HAVE_RECURSIVE_RENDERING
                
                // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
    
                // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
                // we should have a code like this:
                // if !defined(_DISABLE_SSR_TRANSPARENT)
                // pragma multi_compile _ WRITE_NORMAL_BUFFER
                // endif
                // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
                // it based on if SSR transparent in frame settings and not (and stripper can strip it).
                // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
                // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
                // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
                #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                    #define WRITE_NORMAL_BUFFER
                #endif
                #endif
    
                #ifndef DEBUG_DISPLAY
                    // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                    // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                    #if !defined(_SURFACE_TYPE_TRANSPARENT)
                        #if SHADERPASS == SHADERPASS_FORWARD
                        #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                        #elif SHADERPASS == SHADERPASS_GBUFFER
                        #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                        #endif
                    #endif
                #endif
    
                // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
                #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                    #define _DEFERRED_CAPABLE_MATERIAL
                #endif
    
                // Translate transparent motion vector define
                #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                    #define _WRITE_TRANSPARENT_MOTION_VECTOR
                #endif
    
                // Dots Instancing
                // DotsInstancingOptions: <None>
    
                // Various properties
    
                // HybridV1InjectedBuiltinProperties: <None>
    
                // -- Graph Properties
                CBUFFER_START(UnityPerMaterial)
                float2 HeightRemap3;
                float2 HeightRemap2;
                float4 Tiling_Offset3;
                float4 Tiling_Offset0;
                float2 HeightRemap4;
                float4 Tiling_Offset2;
                float2 HeightRemap0;
                float4 LayerMask3_TexelSize;
                float4 LayerMask2_TexelSize;
                float4 LayerNormal3_TexelSize;
                float4 LayerNormal2_TexelSize;
                float2 HeightRemap1;
                float4 Tiling_Offset1;
                float4 Layer0_TexelSize;
                float4 Layer1_TexelSize;
                float4 Layer2_TexelSize;
                float4 Layer3_TexelSize;
                float UVXZScale;
                float4 LayerNormal1_TexelSize;
                float4 LayerNormal0_TexelSize;
                float4 LayerMask1_TexelSize;
                float4 LayerMask0_TexelSize;
                float heightTransition;
                float4 BaseTex_TexelSize;
                float4 BaseNormal_TexelSize;
                float4 BaseMask_TexelSize;
                float4 Tiling_Offset;
                float2 HeightRemap;
                float4 SlopeTex_TexelSize;
                float4 SlopeNormal_TexelSize;
                float4 SlopeMask_TexelSize;
                float4 Tiling_Offset4;
                float2 SlopeRemap;
                float SlopePow;
                float4 _EmissionColor;
                float _UseShadowThreshold;
                float4 _DoubleSidedConstants;
                float _BlendMode;
                float _EnableBlendModePreserveSpecularLighting;
                float _RayTracing;
                float _RefractionModel;
                CBUFFER_END
                
                // Object and Global properties
                SAMPLER(SamplerState_Linear_Repeat);
                TEXTURE2D(LayerMask3);
                SAMPLER(samplerLayerMask3);
                TEXTURE2D(LayerMask2);
                SAMPLER(samplerLayerMask2);
                TEXTURE2D(LayerNormal3);
                SAMPLER(samplerLayerNormal3);
                TEXTURE2D(LayerNormal2);
                SAMPLER(samplerLayerNormal2);
                TEXTURE2D(Layer0);
                SAMPLER(samplerLayer0);
                TEXTURE2D(Layer1);
                SAMPLER(samplerLayer1);
                TEXTURE2D(Layer2);
                SAMPLER(samplerLayer2);
                TEXTURE2D(Layer3);
                SAMPLER(samplerLayer3);
                TEXTURE2D(LayerNormal1);
                SAMPLER(samplerLayerNormal1);
                TEXTURE2D(LayerNormal0);
                SAMPLER(samplerLayerNormal0);
                TEXTURE2D(LayerMask1);
                SAMPLER(samplerLayerMask1);
                TEXTURE2D(LayerMask0);
                SAMPLER(samplerLayerMask0);
                TEXTURE2D(BaseTex);
                SAMPLER(samplerBaseTex);
                TEXTURE2D(BaseNormal);
                SAMPLER(samplerBaseNormal);
                TEXTURE2D(BaseMask);
                SAMPLER(samplerBaseMask);
                TEXTURE2D(SlopeTex);
                SAMPLER(samplerSlopeTex);
                TEXTURE2D(SlopeNormal);
                SAMPLER(samplerSlopeNormal);
                TEXTURE2D(SlopeMask);
                SAMPLER(samplerSlopeMask);
    
                // -- Property used by ScenePickingPass
                #ifdef SCENEPICKINGPASS
                float4 _SelectionID;
                #endif
    
                // -- Properties used by SceneSelectionPass
                #ifdef SCENESELECTIONPASS
                int _ObjectId;
                int _PassValue;
                #endif
    
                // Includes
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
            	#include "Assets/Shaders/GPUTerrainHeight/TerrainVertexPosition.hlsl"
                #include "Assets/Shaders/TerrainShading/HeightBlend.hlsl"
    
                // --------------------------------------------------
                // Structs and Packing
    
                struct AttributesMesh
                {
                     float3 positionOS : POSITION;
                     float3 normalOS : NORMAL;
                     float4 tangentOS : TANGENT;
                    #if UNITY_ANY_INSTANCING_ENABLED
                     uint instanceID : INSTANCEID_SEMANTIC;
                    #endif
                };
                struct VaryingsMeshToPS
                {
                    SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
                     float3 positionRWS;
                     float3 normalWS;
                     float4 tangentWS;
                    #if UNITY_ANY_INSTANCING_ENABLED
                     uint instanceID : CUSTOM_INSTANCE_ID;
                    #endif
                     float4 SplatMapColor;
                };
                struct VertexDescriptionInputs
                {
                     float3 ObjectSpaceNormal;
                     float3 ObjectSpaceTangent;
                     float3 ObjectSpacePosition;
                };
                struct SurfaceDescriptionInputs
                {
                     float3 ObjectSpaceNormal;
                     float3 WorldSpaceNormal;
                     float3 TangentSpaceNormal;
                     float3 ObjectSpacePosition;
                     float4 SplatMapColor;
                };
                struct PackedVaryingsMeshToPS
                {
                    SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
                    #if UNITY_ANY_INSTANCING_ENABLED
                     uint instanceID : CUSTOM_INSTANCE_ID;
                    #endif
                     float3 interp0 : INTERP0;
                     float3 interp1 : INTERP1;
                     float4 interp2 : INTERP2;
                     float4 interp3 : INTERP3;
                };
    
                PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
                {
                    PackedVaryingsMeshToPS output;
                    ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
                    output.positionCS = input.positionCS;
                    output.interp0.xyz =  input.positionRWS;
                    output.interp1.xyz =  input.normalWS;
                    output.interp2.xyzw =  input.tangentWS;
                    #if UNITY_ANY_INSTANCING_ENABLED
                    output.instanceID = input.instanceID;
                    #endif
                    output.interp3.xyzw =  input.SplatMapColor;
                    return output;
                }
                
                VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
                {
                    VaryingsMeshToPS output;
                    output.positionCS = input.positionCS;
                    output.positionRWS = input.interp0.xyz;
                    output.normalWS = input.interp1.xyz;
                    output.tangentWS = input.interp2.xyzw;
                    #if UNITY_ANY_INSTANCING_ENABLED
                    output.instanceID = input.instanceID;
                    #endif
                    output.SplatMapColor = input.interp3.xyzw;
                    return output;
                }
                
    
                // --------------------------------------------------
                // Graph
    
    
                // Graph Functions
                
                void UnityGetInstanceID_float(out float Out)
                {
                #if UNITY_ANY_INSTANCING_ENABLED
                    Out = unity_InstanceID;
                #else
                    Out = 0;
                #endif
                }
                
                void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
                {
                    RGBA = float4(R, G, B, A);
                    RGB = float3(R, G, B);
                    RG = float2(R, G);
                }
                
                void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
                {
                    Out = A / B;
                }
                
                void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
                {
                    Out = UV * Tiling + Offset;
                }
                
                struct Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float
                {
                };
                
                void SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(float4 Tiling_Offset, float2 Vector2, Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float IN, out float2 OutVector2_1)
                {
                    float2 _Property_5ea954dbdecc454b839a01badac3afd6_Out_0 = Vector2;
                    float4 _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0 = Tiling_Offset;
                    float _Split_c19978cb25c5413eaf23432179b0e3af_R_1 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[0];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_G_2 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[1];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_B_3 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[2];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_A_4 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[3];
                    float4 _Combine_387ca93b6841454bad52ea2f221d199f_RGBA_4;
                    float3 _Combine_387ca93b6841454bad52ea2f221d199f_RGB_5;
                    float2 _Combine_387ca93b6841454bad52ea2f221d199f_RG_6;
                    Unity_Combine_float(_Split_c19978cb25c5413eaf23432179b0e3af_R_1, _Split_c19978cb25c5413eaf23432179b0e3af_G_2, 0, 0, _Combine_387ca93b6841454bad52ea2f221d199f_RGBA_4, _Combine_387ca93b6841454bad52ea2f221d199f_RGB_5, _Combine_387ca93b6841454bad52ea2f221d199f_RG_6);
                    float4 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGBA_4;
                    float3 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGB_5;
                    float2 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6;
                    Unity_Combine_float(_Split_c19978cb25c5413eaf23432179b0e3af_B_3, _Split_c19978cb25c5413eaf23432179b0e3af_A_4, 0, 0, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGBA_4, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGB_5, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6);
                    float2 _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3;
                    Unity_TilingAndOffset_float(_Property_5ea954dbdecc454b839a01badac3afd6_Out_0, _Combine_387ca93b6841454bad52ea2f221d199f_RG_6, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6, _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3);
                    OutVector2_1 = _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3;
                }
                
                void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
                {
                    Out = A * B;
                }
                
                void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
                {
                    Out = A * B;
                }
                
                void Desaturate_float(float3 oldcolor, float k, out float3 newcolor){
                    float intensity = dot(oldcolor,float3(0.3,0.59,0.11));
                    newcolor.x = intensity*k + oldcolor.x*(1-k);
                    newcolor.y = intensity*k + oldcolor.y*(1-k);
                    newcolor.z = intensity*k + oldcolor.z*(1-k);
                }
                
                void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
                {
                    Out = A * B;
                }
                
                void Unity_Lerp_float(float A, float B, float T, out float Out)
                {
                    Out = lerp(A, B, T);
                }
                
                struct Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float
                {
                };
                
                void SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(UnityTexture2D Albedo, UnityTexture2D Normal, UnityTexture2D Mask, float DesaturationK, float BrightnessAtten, float2 UV, float2 HeightRemap, Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float IN, out float4 oAlbedo_0, out float4 oNormal_1, out float4 oMask_2)
                {
                    UnityTexture2D _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0 = Albedo;
                    float2 _Property_76ed35a32977448f8ea254bf6de06d33_Out_0 = UV;
                    float4 _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_R_4 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.r;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_G_5 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.g;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_B_6 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.b;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_A_7 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.a;
                    float _Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0 = BrightnessAtten;
                    float4 _Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2);
                    float _Float_f48d9dc0c16249fe8fe5b97c86e7f56c_Out_0 = -0.25;
                    float2 _Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2;
                    Unity_Multiply_float2_float2(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0, (_Float_f48d9dc0c16249fe8fe5b97c86e7f56c_Out_0.xx), _Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2);
                    float4 _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_R_4 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.r;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_G_5 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.g;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_B_6 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.b;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_A_7 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.a;
                    float4 _Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2);
                    float _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0 = DesaturationK;
                    float3 _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1;
                    Desaturate_float((_Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1);
                    float3 _Multiply_410af5ac81154a3aab73254ac228eccd_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2.xyz), _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1, _Multiply_410af5ac81154a3aab73254ac228eccd_Out_2);
                    UnityTexture2D _Property_d05972164bdd4e0189593b8dae00db03_Out_0 = Normal;
                    float4 _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0 = SAMPLE_TEXTURE2D(_Property_d05972164bdd4e0189593b8dae00db03_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d05972164bdd4e0189593b8dae00db03_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0);
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_R_4 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.r;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_G_5 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.g;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_B_6 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.b;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_A_7 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.a;
                    float4 _Multiply_4999f90cbd1848acaf20b253953c0963_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_4999f90cbd1848acaf20b253953c0963_Out_2);
                    float4 _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_d05972164bdd4e0189593b8dae00db03_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d05972164bdd4e0189593b8dae00db03_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0);
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_R_4 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.r;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_G_5 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.g;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_B_6 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.b;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_A_7 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.a;
                    float4 _Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2);
                    float3 _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1;
                    Desaturate_float((_Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1);
                    float3 _Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_4999f90cbd1848acaf20b253953c0963_Out_2.xyz), _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1, _Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2);
                    UnityTexture2D _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0 = Mask;
                    float4 _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0 = SAMPLE_TEXTURE2D(_Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_R_4 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.r;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_G_5 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.g;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_B_6 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.b;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_A_7 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.a;
                    float4 _Multiply_0b2356625aad40439a89b8519e36e62b_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_0b2356625aad40439a89b8519e36e62b_Out_2);
                    float4 _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0 = SAMPLE_TEXTURE2D(_Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_R_4 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.r;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_G_5 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.g;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_B_6 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.b;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_A_7 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.a;
                    float4 _Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2);
                    float3 _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1;
                    Desaturate_float((_Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1);
                    float3 _Multiply_3c8f32d2a057478e869493099765b841_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_0b2356625aad40439a89b8519e36e62b_Out_2.xyz), _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1, _Multiply_3c8f32d2a057478e869493099765b841_Out_2);
                    float _Split_77de2b1a3326407b985f625d91e2063b_R_1 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[0];
                    float _Split_77de2b1a3326407b985f625d91e2063b_G_2 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[1];
                    float _Split_77de2b1a3326407b985f625d91e2063b_B_3 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[2];
                    float _Split_77de2b1a3326407b985f625d91e2063b_A_4 = 0;
                    float2 _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0 = HeightRemap;
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_R_1 = _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0[0];
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_G_2 = _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0[1];
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_B_3 = 0;
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_A_4 = 0;
                    float _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3;
                    Unity_Lerp_float(_Split_0df13f6921fe4db99b01dcff93c3b978_R_1, _Split_0df13f6921fe4db99b01dcff93c3b978_G_2, _Split_77de2b1a3326407b985f625d91e2063b_B_3, _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3);
                    float4 _Combine_17dba591e95443299750f53a93613083_RGBA_4;
                    float3 _Combine_17dba591e95443299750f53a93613083_RGB_5;
                    float2 _Combine_17dba591e95443299750f53a93613083_RG_6;
                    Unity_Combine_float(_Split_77de2b1a3326407b985f625d91e2063b_R_1, _Split_77de2b1a3326407b985f625d91e2063b_G_2, _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3, _Split_77de2b1a3326407b985f625d91e2063b_A_4, _Combine_17dba591e95443299750f53a93613083_RGBA_4, _Combine_17dba591e95443299750f53a93613083_RGB_5, _Combine_17dba591e95443299750f53a93613083_RG_6);
                    oAlbedo_0 = (float4(_Multiply_410af5ac81154a3aab73254ac228eccd_Out_2, 1.0));
                    oNormal_1 = (float4(_Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2, 1.0));
                    oMask_2 = _Combine_17dba591e95443299750f53a93613083_RGBA_4;
                }
                
                void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
                {
                    Out = dot(A, B);
                }
                
                void Unity_Power_float(float A, float B, out float Out)
                {
                    Out = pow(A, B);
                }
                
                void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
                {
                    Out = smoothstep(Edge1, Edge2, In);
                }
                
                void Unity_OneMinus_float(float In, out float Out)
                {
                    Out = 1 - In;
                }
                
                void BlendByMask_float(float4 a, float4 b, float4 c, float4 d, float4 blend, out float4 ret){
                    ret = a*blend.x + b*blend.y + c*blend.z + d*blend.w;
                }
                
                void Unity_Add_float4(float4 A, float4 B, out float4 Out)
                {
                    Out = A + B;
                }
    
                // Graph Vertex
                struct VertexDescription
                {
                    float3 Position;
                    float3 Normal;
                    float3 Tangent;
                    float4 SplatMapColor;
                };
                
                VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
                {
                    VertexDescription description = (VertexDescription)0;
                    float _InstanceID_1b9fa912aec74e76aae6821c84f95467_Out_0;
                    UnityGetInstanceID_float(_InstanceID_1b9fa912aec74e76aae6821c84f95467_Out_0);
                    float3 _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_oposOS_2;
                    float4 _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_color_3;
                    float3 _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_normal_4;
                    GetTerrainVertex_float(_InstanceID_1b9fa912aec74e76aae6821c84f95467_Out_0, IN.ObjectSpacePosition, _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_oposOS_2, _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_color_3, _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_normal_4);
                    description.Position = _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_oposOS_2;
                    description.Normal = _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_normal_4;
                    description.Tangent = IN.ObjectSpaceTangent;
                    description.SplatMapColor = _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_color_3;
                    return description;
                }
    
                // Graph Pixel
                struct SurfaceDescription
                {
                    float3 BaseColor;
                    float3 Emission;
                    float Alpha;
                    float3 BentNormal;
                    float Smoothness;
                    float Occlusion;
                    float3 NormalTS;
                    float Metallic;
                };
                
                SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
                {
                    SurfaceDescription surface = (SurfaceDescription)0;
                    UnityTexture2D _Property_4e780cffb4044909a58e26eaff6361d1_Out_0 = UnityBuildTexture2DStructNoScale(BaseTex);
                    UnityTexture2D _Property_20a5bc7358e64fe8b3327adb9ce635ea_Out_0 = UnityBuildTexture2DStructNoScale(BaseNormal);
                    UnityTexture2D _Property_090d521163b9493189233a9f2e1cf5ed_Out_0 = UnityBuildTexture2DStructNoScale(BaseMask);
                    float4 _Property_6881ae016d754988b27811b95cc834ca_Out_0 = Tiling_Offset;
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_R_1 = IN.ObjectSpacePosition[0];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_G_2 = IN.ObjectSpacePosition[1];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_B_3 = IN.ObjectSpacePosition[2];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_A_4 = 0;
                    float4 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGBA_4;
                    float3 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGB_5;
                    float2 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6;
                    Unity_Combine_float(_Split_3335daa3a4b34f69a62c9c8a1c6f39b2_R_1, _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_B_3, 0, 0, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGBA_4, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGB_5, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6);
                    float _Property_8984e4bf1c26459280f9fece3c52167c_Out_0 = UVXZScale;
                    float2 _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2;
                    Unity_Divide_float2(_Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6, (_Property_8984e4bf1c26459280f9fece3c52167c_Out_0.xx), _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2);
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_737be3819d2c4f29853810a18717cae3;
                    float2 _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_6881ae016d754988b27811b95cc834ca_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1);
                    float2 _Property_dcc00367280c4dc6b11a52aa07754830_Out_0 = HeightRemap;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_6722d68456e84aecb015a07880cbbd46;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_4e780cffb4044909a58e26eaff6361d1_Out_0, _Property_20a5bc7358e64fe8b3327adb9ce635ea_Out_0, _Property_090d521163b9493189233a9f2e1cf5ed_Out_0, 0.25, 4, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1, _Property_dcc00367280c4dc6b11a52aa07754830_Out_0, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2);
                    UnityTexture2D _Property_3d7142ef79234a0ba6cda49555992a80_Out_0 = UnityBuildTexture2DStructNoScale(Layer0);
                    UnityTexture2D _Property_42e52c243a994f04944481ff3627fc2c_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal0);
                    UnityTexture2D _Property_e67647d6cf1b44bebf91845a255b522c_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask0);
                    float4 _Property_4e6c66ba03a842e482f7040c3fe163dc_Out_0 = Tiling_Offset0;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674;
                    float2 _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_4e6c66ba03a842e482f7040c3fe163dc_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1);
                    float2 _Property_8cf19c3a22e64f0a85a51c8cbf5085e7_Out_0 = HeightRemap0;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_3d7142ef79234a0ba6cda49555992a80_Out_0, _Property_42e52c243a994f04944481ff3627fc2c_Out_0, _Property_e67647d6cf1b44bebf91845a255b522c_Out_0, 0.25, 4, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1, _Property_8cf19c3a22e64f0a85a51c8cbf5085e7_Out_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2);
                    UnityTexture2D _Property_1bce6ca387e847e1a43a4534686b655f_Out_0 = UnityBuildTexture2DStructNoScale(Layer1);
                    UnityTexture2D _Property_1e7513acda3b4b20a5a028d0da4bcfb0_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal1);
                    UnityTexture2D _Property_75d4521a27cb403399759cefa7be71f2_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask1);
                    float4 _Property_e17bf3be22544a639340ddea65766b89_Out_0 = Tiling_Offset1;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_df825eb885d947429ce6daf495a641a7;
                    float2 _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_e17bf3be22544a639340ddea65766b89_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1);
                    float2 _Property_d682537de1054cf4b1eddd1680d152fb_Out_0 = HeightRemap1;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_1bce6ca387e847e1a43a4534686b655f_Out_0, _Property_1e7513acda3b4b20a5a028d0da4bcfb0_Out_0, _Property_75d4521a27cb403399759cefa7be71f2_Out_0, 0.25, 4, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1, _Property_d682537de1054cf4b1eddd1680d152fb_Out_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2);
                    UnityTexture2D _Property_b79fba6b5b1f40b88b38803dad2bb2e5_Out_0 = UnityBuildTexture2DStructNoScale(Layer2);
                    UnityTexture2D _Property_a787f1642c6d4570af8ae47ea63a59ed_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal2);
                    UnityTexture2D _Property_f4ae055a87ef48cb8df5c603ca6f72b0_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask2);
                    float4 _Property_e12db1a96427478999d081afcb59d771_Out_0 = Tiling_Offset2;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d;
                    float2 _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_e12db1a96427478999d081afcb59d771_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1);
                    float2 _Property_3be82515dad24d76b9af558757032f30_Out_0 = HeightRemap2;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_b79fba6b5b1f40b88b38803dad2bb2e5_Out_0, _Property_a787f1642c6d4570af8ae47ea63a59ed_Out_0, _Property_f4ae055a87ef48cb8df5c603ca6f72b0_Out_0, 0.25, 4, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1, _Property_3be82515dad24d76b9af558757032f30_Out_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2);
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_R_1 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[0];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_G_2 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[1];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_B_3 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[2];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_A_4 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[3];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_R_1 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[0];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_G_2 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[1];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_B_3 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[2];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_A_4 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[3];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_R_1 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[0];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_G_2 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[1];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_B_3 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[2];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_A_4 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[3];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_R_1 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[0];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_G_2 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[1];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_B_3 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[2];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_A_4 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[3];
                    float4 _Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4;
                    float3 _Combine_f97595cb40654c9a8d82c0297e7280f3_RGB_5;
                    float2 _Combine_f97595cb40654c9a8d82c0297e7280f3_RG_6;
                    Unity_Combine_float(_Split_d81e33a0495c4ac09042d2d39dd09ba5_B_3, _Split_d2ed4cee74e042da88b7348fcfe80cab_B_3, _Split_b3522eb5287e4b28baab87cc1fa16589_B_3, _Split_a4f15428b23a40ef8f25398e9cff2d7c_B_3, _Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4, _Combine_f97595cb40654c9a8d82c0297e7280f3_RGB_5, _Combine_f97595cb40654c9a8d82c0297e7280f3_RG_6);
                    UnityTexture2D _Property_8e8b4d9a2dfc42148eb69519397ecebc_Out_0 = UnityBuildTexture2DStructNoScale(Layer3);
                    UnityTexture2D _Property_1443e12ec6544d2c8e8dcc71d67adb04_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal3);
                    UnityTexture2D _Property_b8f1cfb1112b4d2e8e2fe919f5003fb3_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask3);
                    float4 _Property_d9e7ba461b95446db56c0b99fce9de5d_Out_0 = Tiling_Offset3;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13;
                    float2 _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_d9e7ba461b95446db56c0b99fce9de5d_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1);
                    float2 _Property_e5d43ace4a66401faff3165675d44af0_Out_0 = HeightRemap3;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_8e8b4d9a2dfc42148eb69519397ecebc_Out_0, _Property_1443e12ec6544d2c8e8dcc71d67adb04_Out_0, _Property_b8f1cfb1112b4d2e8e2fe919f5003fb3_Out_0, 0.25, 4, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1, _Property_e5d43ace4a66401faff3165675d44af0_Out_0, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2);
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_R_1 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[0];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_G_2 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[1];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_B_3 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[2];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_A_4 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[3];
                    UnityTexture2D _Property_edf497c59ff340a5897695b2e8e9ed68_Out_0 = UnityBuildTexture2DStructNoScale(SlopeTex);
                    UnityTexture2D _Property_ae03f8d1bb284168ae1cb40c2c8d7dce_Out_0 = UnityBuildTexture2DStructNoScale(SlopeNormal);
                    UnityTexture2D _Property_35050279a32b481b878853831820cb33_Out_0 = UnityBuildTexture2DStructNoScale(SlopeMask);
                    float4 _Property_a3c340f0d1f647858c0d27fc6fa0d127_Out_0 = Tiling_Offset4;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67;
                    float2 _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_a3c340f0d1f647858c0d27fc6fa0d127_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1);
                    float2 _Property_8a3f864a5b9c469b92480bb635123790_Out_0 = HeightRemap4;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_edf497c59ff340a5897695b2e8e9ed68_Out_0, _Property_ae03f8d1bb284168ae1cb40c2c8d7dce_Out_0, _Property_35050279a32b481b878853831820cb33_Out_0, 0.25, 4, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1, _Property_8a3f864a5b9c469b92480bb635123790_Out_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2);
                    float _Split_015a6ee9887b47abb21193d18e609740_R_1 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[0];
                    float _Split_015a6ee9887b47abb21193d18e609740_G_2 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[1];
                    float _Split_015a6ee9887b47abb21193d18e609740_B_3 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[2];
                    float _Split_015a6ee9887b47abb21193d18e609740_A_4 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[3];
                    float4 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4;
                    float3 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGB_5;
                    float2 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RG_6;
                    Unity_Combine_float(_Split_d87c9f86d0a94f8b9b66cbcb29d89dde_B_3, _Split_015a6ee9887b47abb21193d18e609740_B_3, 0, 0, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGB_5, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RG_6);
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_R_1 = IN.SplatMapColor[0];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_G_2 = IN.SplatMapColor[1];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_B_3 = IN.SplatMapColor[2];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_A_4 = IN.SplatMapColor[3];
                    float4 _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4;
                    float3 _Combine_7b79ed205a4b435d8742217505a4c51d_RGB_5;
                    float2 _Combine_7b79ed205a4b435d8742217505a4c51d_RG_6;
                    Unity_Combine_float(1, _Split_ea099c0905af42a6804ca0dc2f58dc2f_R_1, _Split_ea099c0905af42a6804ca0dc2f58dc2f_G_2, _Split_ea099c0905af42a6804ca0dc2f58dc2f_B_3, _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4, _Combine_7b79ed205a4b435d8742217505a4c51d_RGB_5, _Combine_7b79ed205a4b435d8742217505a4c51d_RG_6);
                    float2 _Property_5538a1bac07f487589432be4f79dd05e_Out_0 = SlopeRemap;
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_R_1 = _Property_5538a1bac07f487589432be4f79dd05e_Out_0[0];
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_G_2 = _Property_5538a1bac07f487589432be4f79dd05e_Out_0[1];
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_B_3 = 0;
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_A_4 = 0;
                    float _DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2;
                    Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(0, 1, 0), _DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2);
                    float _Property_795a1803a8484214b987093ec034ab6a_Out_0 = SlopePow;
                    float _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2;
                    Unity_Power_float(_DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2, _Property_795a1803a8484214b987093ec034ab6a_Out_0, _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2);
                    float _Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3;
                    Unity_Smoothstep_float(_Split_03a4c3769cad421fb634dee3fa2beefb_R_1, _Split_03a4c3769cad421fb634dee3fa2beefb_G_2, _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2, _Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3);
                    float _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1;
                    Unity_OneMinus_float(_Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3, _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1);
                    float4 _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4;
                    float3 _Combine_9702e823fbe443b4b07afb499b6912a4_RGB_5;
                    float2 _Combine_9702e823fbe443b4b07afb499b6912a4_RG_6;
                    Unity_Combine_float(_Split_ea099c0905af42a6804ca0dc2f58dc2f_A_4, _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1, 0, 0, _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4, _Combine_9702e823fbe443b4b07afb499b6912a4_RGB_5, _Combine_9702e823fbe443b4b07afb499b6912a4_RG_6);
                    float _Property_d5cf363bc21a4f92a00fac464b9b11cf_Out_0 = heightTransition;
                    float4 _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5;
                    float4 _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6;
                    HeightBlend8Layers_float(_Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4, _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4, _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4, _Property_d5cf363bc21a4f92a00fac464b9b11cf_Out_0, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6);
                    float4 _BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5);
                    float4 _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5);
                    float4 _Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5, _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5, _Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2);
                    float4 _BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5);
                    float4 _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5);
                    float4 _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5, _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5, _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2);
                    float _Split_d9a7a90627444523a2cda58b36d68116_R_1 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[0];
                    float _Split_d9a7a90627444523a2cda58b36d68116_G_2 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[1];
                    float _Split_d9a7a90627444523a2cda58b36d68116_B_3 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[2];
                    float _Split_d9a7a90627444523a2cda58b36d68116_A_4 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[3];
                    float4 _BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5);
                    float4 _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5);
                    float4 _Add_090184f4bd18493ca37179ea1a8364d0_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5, _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5, _Add_090184f4bd18493ca37179ea1a8364d0_Out_2);
                    surface.BaseColor = (_Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2.xyz);
                    surface.Emission = float3(0, 0, 0);
                    surface.Alpha = 1;
                    surface.BentNormal = IN.TangentSpaceNormal;
                    surface.Smoothness = _Split_d9a7a90627444523a2cda58b36d68116_A_4;
                    surface.Occlusion = _Split_d9a7a90627444523a2cda58b36d68116_G_2;
                    surface.NormalTS = (_Add_090184f4bd18493ca37179ea1a8364d0_Out_2.xyz);
                    surface.Metallic = _Split_d9a7a90627444523a2cda58b36d68116_R_1;
                    return surface;
                }
    
                // --------------------------------------------------
                // Build Graph Inputs
    
                
                VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
                {
                    VertexDescriptionInputs output;
                    ZERO_INITIALIZE(VertexDescriptionInputs, output);
                
                    output.ObjectSpaceNormal =           input.normalOS;
                    output.ObjectSpaceTangent =          input.tangentOS.xyz;
                    output.ObjectSpacePosition =         input.positionOS;
                
                    return output;
                }
                
                AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
                #ifdef USE_CUSTOMINTERP_SUBSTRUCT
                    #ifdef TESSELLATION_ON
                    , inout VaryingsMeshToDS varyings
                    #else
                    , inout VaryingsMeshToPS varyings
                    #endif
                #endif
                #ifdef HAVE_VFX_MODIFICATION
                        , AttributesElement element
                #endif
                    )
                {
                    // build graph inputs
                    VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
                    // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
                
                    // evaluate vertex graph
                #ifdef HAVE_VFX_MODIFICATION
                    GraphProperties properties;
                    ZERO_INITIALIZE(GraphProperties, properties);
                
                    // Fetch the vertex graph properties for the particle instance.
                    GetElementVertexProperties(element, properties);
                
                    VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
                #else
                    VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
                #endif
                
                    // copy graph output to the results
                    input.positionOS = vertexDescription.Position;
                    input.normalOS = vertexDescription.Normal;
                    input.tangentOS.xyz = vertexDescription.Tangent;
                
                    varyings.SplatMapColor = vertexDescription.SplatMapColor;
                
                    return input;
                }
                
                FragInputs BuildFragInputs(VaryingsMeshToPS input)
                {
                    FragInputs output;
                    ZERO_INITIALIZE(FragInputs, output);
                
                    // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
                    // TODO: this is a really poor workaround, but the variable is used in a bunch of places
                    // to compute normals which are then passed on elsewhere to compute other values...
                    output.tangentToWorld = k_identity3x3;
                    output.positionSS = input.positionCS;       // input.positionCS is SV_Position
                
                    output.positionRWS = input.positionRWS;
                    output.tangentToWorld = BuildTangentToWorld(input.tangentWS, input.normalWS);
                
                #ifdef HAVE_VFX_MODIFICATION
                    // FragInputs from VFX come from two places: Interpolator or CBuffer.
                    /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
                
                #endif
                
                    // splice point to copy custom interpolator fields from varyings to frag inputs
                    output.customInterpolators.SplatMapColor = input.SplatMapColor;
                
                    return output;
                }
                
                // existing HDRP code uses the combined function to go directly from packed to frag inputs
                FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
                {
                    UNITY_SETUP_INSTANCE_ID(input);
                    VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
                    return BuildFragInputs(unpacked);
                }
                
                SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
                {
                    SurfaceDescriptionInputs output;
                    ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
                
                    output.WorldSpaceNormal =            normalize(input.tangentToWorld[2].xyz);
                    #if defined(SHADER_STAGE_RAY_TRACING)
                    output.ObjectSpaceNormal =           mul(output.WorldSpaceNormal, (float3x3) ObjectToWorld3x4());
                    #else
                    output.ObjectSpaceNormal =           normalize(mul(output.WorldSpaceNormal, (float3x3) UNITY_MATRIX_M));           // transposed multiplication by inverse matrix to handle normal scale
                    #endif
                    output.TangentSpaceNormal =          float3(0.0f, 0.0f, 1.0f);
                    output.ObjectSpacePosition =         TransformWorldToObject(input.positionRWS);
                
                    // splice point to copy frag inputs custom interpolator pack into the SDI
                    output.SplatMapColor = input.customInterpolators.SplatMapColor;
                
                    return output;
                }
                
    
                // --------------------------------------------------
                // Build Surface Data (Specific Material)
    
            void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
                {
                    ZERO_INITIALIZE(SurfaceData, surfaceData);
                
                    // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
                    // however specularOcclusion can come from the graph, so need to be init here so it can be override.
                    surfaceData.specularOcclusion = 1.0;
                
                    surfaceData.baseColor =                 surfaceDescription.BaseColor;
                    surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
                    surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
                    surfaceData.metallic =                  surfaceDescription.Metallic;
                
                    #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                        if (_EnableSSRefraction)
                        {
                
                            surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                            surfaceDescription.Alpha = 1.0;
                        }
                        else
                        {
                            surfaceData.ior = 1.0;
                            surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                            surfaceData.atDistance = 1.0;
                            surfaceData.transmittanceMask = 0.0;
                            surfaceDescription.Alpha = 1.0;
                        }
                    #else
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                    #endif
                
                    // These static material feature allow compile time optimization
                    surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
                    #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_TRANSMISSION
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_ANISOTROPY
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
                    #endif
                
                    #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                        // Require to have setup baseColor
                        // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                        surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
                    #endif
                
                    #ifdef _DOUBLESIDED_ON
                        float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                    #else
                        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                    #endif
                
                    // normal delivered to master node
                    GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
                
                    surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                
                    surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
                
                
                    #if HAVE_DECALS
                        if (_EnableDecals)
                        {
                            float alpha = 1.0;
                            alpha = surfaceDescription.Alpha;
                
                            // Both uses and modifies 'surfaceData.normalWS'.
                            DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                            ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                        }
                    #endif
                
                    bentNormalWS = surfaceData.normalWS;
                
                    surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
                
                    #ifdef DEBUG_DISPLAY
                        if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                        {
                            // TODO: need to update mip info
                            surfaceData.metallic = 0;
                        }
                
                        // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                        // as it can modify attribute use for static lighting
                        ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
                    #endif
                
                    // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
                    // If user provide bent normal then we process a better term
                    #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                        // Just use the value passed through via the slot (not active otherwise)
                    #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                        // If we have bent normal and ambient occlusion, process a specular occlusion
                        surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                    #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                        surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                    #endif
                
                    #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                        surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                    #endif
                }
                
    
                // --------------------------------------------------
                // Get Surface And BuiltinData
    
                void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
                {
                    // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                    #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                    #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                    #endif
                    #endif
    
                    #ifndef SHADER_UNLIT
                    #ifdef _DOUBLESIDED_ON
                        float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                    #else
                        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                    #endif
    
                    ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                    #endif // SHADER_UNLIT
    
                    SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
    
                    #if defined(HAVE_VFX_MODIFICATION)
                    GraphProperties properties;
                    ZERO_INITIALIZE(GraphProperties, properties);
    
                    GetElementPixelProperties(fragInputs, properties);
    
                    SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                    #else
                    SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                    #endif
    
                    // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                    // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                    #ifdef _ALPHATEST_ON
                        float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                        #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                        // The TransparentDepthPrepass is also used with SSR transparent.
                        // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                        // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                        #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                        // DepthPostpass always use its own alpha threshold
                        alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                        #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                        // If use shadow threshold isn't enable we don't allow any test
                        #endif
    
                        GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                    #endif
    
                    #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                    #endif
    
                    #ifndef SHADER_UNLIT
                    float3 bentNormalWS;
                    BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
    
                    // Builtin Data
                    // For back lighting we use the oposite vertex normal
                    InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
    
                    #else
                    BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
    
                    ZERO_INITIALIZE(BuiltinData, builtinData); // No call to InitBuiltinData as we don't have any lighting
                    builtinData.opacity = surfaceDescription.Alpha;
    
                    #if defined(DEBUG_DISPLAY)
                        // Light Layers are currently not used for the Unlit shader (because it is not lit)
                        // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                        // display in the light layers visualization mode, therefore we need the renderingLayers
                        builtinData.renderingLayers = GetMeshRenderingLightLayer();
                    #endif
    
                    #endif // SHADER_UNLIT
    
                    #ifdef _ALPHATEST_ON
                        // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                        builtinData.alphaClipTreshold = alphaCutoff;
                    #endif
    
                    // override sampleBakedGI - not used by Unlit
    
            		// If we want to force forward emissive and we have GBuffer pass, don't do anything
            		#if !(SHADERPASS == SHADERPASS_GBUFFER && defined(_FORCE_FORWARD_EMISSIVE))
                    builtinData.emissiveColor = surfaceDescription.Emission;
            		#endif
    
                    // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                    // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                    // This is a limitation of the current MRT approach.
    
                    #if _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
                    #endif
    
                    // TODO: We should generate distortion / distortionBlur for non distortion pass
                    #if (SHADERPASS == SHADERPASS_DISTORTION)
                    builtinData.distortion = surfaceDescription.Distortion;
                    builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                    #endif
    
                    #ifndef SHADER_UNLIT
                    // PostInitBuiltinData call ApplyDebugToBuiltinData
                    PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                    #else
                    ApplyDebugToBuiltinData(builtinData);
                    #endif
    
                    RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
                }
    
                // --------------------------------------------------
                // Main
    
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassFullScreenDebug.hlsl"
    
                // --------------------------------------------------
                // Visual Effect Vertex Invocations
    
            	#ifdef HAVE_VFX_MODIFICATION
            	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
            	#endif
    
                ENDHLSL
            }
            Pass
            {
                Name "DepthOnly"
                Tags
                {
                    "LightMode" = "DepthOnly"
                }
    
                // Render State
                Cull [_CullMode]
                ZWrite On
                Stencil
                    {
                        WriteMask [_StencilWriteMaskDepth]
                        Ref [_StencilRefDepth]
                        CompFront Always
                        PassFront Replace
                        CompBack Always
                        PassBack Replace
                    }
    
                // Debug
                // <None>
    
                // --------------------------------------------------
                // Pass
    
                HLSLPROGRAM
    
                // Pragmas
                #pragma instancing_options renderinglayer
                #pragma target 4.5
                #pragma vertex Vert
                #pragma fragment Frag
                #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
                #pragma multi_compile_instancing
                #pragma instancing_options procedural:setupProcedural
    
                // Keywords
                #pragma multi_compile _ WRITE_NORMAL_BUFFER
                #pragma multi_compile_fragment _ WRITE_MSAA_DEPTH
                #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
                #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
                #pragma shader_feature_local _ _DOUBLESIDED_ON
                #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
                #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
                #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
                #pragma shader_feature_local_fragment _ _DISABLE_DECALS
                #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
                #pragma shader_feature_local_fragment _ _DISABLE_SSR
                #pragma shader_feature_local_raytracing _ _DISABLE_SSR
                #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
                #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
                #pragma multi_compile _ WRITE_DECAL_BUFFER
                #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
                #pragma shader_feature _ _FORCE_FORWARD_EMISSIVE
                // GraphKeywords: <None>
    
                // For custom interpolators to inject a substruct definition before FragInputs definition,
                // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
                struct CustomInterpolators
                {
                    float4 SplatMapColor;
                };
                #define USE_CUSTOMINTERP_SUBSTRUCT
                
    
    
                // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
            	#ifdef HAVE_VFX_MODIFICATION
            	struct FragInputsVFX
                {
                    /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
                };
                #endif
    
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
            	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
    
                // --------------------------------------------------
                // Defines
    
                // Attribute
                #define ATTRIBUTES_NEED_NORMAL
                #define ATTRIBUTES_NEED_TANGENT
                #define VARYINGS_NEED_POSITION_WS
                #define VARYINGS_NEED_TANGENT_TO_WORLD
    
                #define HAVE_MESH_MODIFICATION
    
    
                #define SHADERPASS SHADERPASS_DEPTH_ONLY
                #define RAYTRACING_SHADER_GRAPH_DEFAULT
    
    
                // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
                // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
                // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
                // to still allow us to rename the field and keyword of this node without breaking existing code.
                #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
                #endif
    
                #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
                #endif
                // end
    
                #ifndef SHADER_UNLIT
                // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
                // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
                #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                    #define VARYINGS_NEED_CULLFACE
                #endif
                #endif
    
                // Specific Material Define
            #define _AMBIENT_OCCLUSION 1
                #define _SPECULAR_OCCLUSION_FROM_AO 1
                #define _ENERGY_CONSERVING_SPECULAR 1
                
                // If we use subsurface scattering, enable output split lighting (for forward pass)
                #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
                    #define OUTPUT_SPLIT_LIGHTING
                #endif
                
                // This shader support recursive rendering for raytracing
                #define HAVE_RECURSIVE_RENDERING
                
                // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
    
                // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
                // we should have a code like this:
                // if !defined(_DISABLE_SSR_TRANSPARENT)
                // pragma multi_compile _ WRITE_NORMAL_BUFFER
                // endif
                // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
                // it based on if SSR transparent in frame settings and not (and stripper can strip it).
                // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
                // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
                // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
                #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                    #define WRITE_NORMAL_BUFFER
                #endif
                #endif
    
                #ifndef DEBUG_DISPLAY
                    // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                    // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                    #if !defined(_SURFACE_TYPE_TRANSPARENT)
                        #if SHADERPASS == SHADERPASS_FORWARD
                        #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                        #elif SHADERPASS == SHADERPASS_GBUFFER
                        #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                        #endif
                    #endif
                #endif
    
                // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
                #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                    #define _DEFERRED_CAPABLE_MATERIAL
                #endif
    
                // Translate transparent motion vector define
                #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                    #define _WRITE_TRANSPARENT_MOTION_VECTOR
                #endif
    
                // Dots Instancing
                // DotsInstancingOptions: <None>
    
                // Various properties
    
                // HybridV1InjectedBuiltinProperties: <None>
    
                // -- Graph Properties
                CBUFFER_START(UnityPerMaterial)
                float2 HeightRemap3;
                float2 HeightRemap2;
                float4 Tiling_Offset3;
                float4 Tiling_Offset0;
                float2 HeightRemap4;
                float4 Tiling_Offset2;
                float2 HeightRemap0;
                float4 LayerMask3_TexelSize;
                float4 LayerMask2_TexelSize;
                float4 LayerNormal3_TexelSize;
                float4 LayerNormal2_TexelSize;
                float2 HeightRemap1;
                float4 Tiling_Offset1;
                float4 Layer0_TexelSize;
                float4 Layer1_TexelSize;
                float4 Layer2_TexelSize;
                float4 Layer3_TexelSize;
                float UVXZScale;
                float4 LayerNormal1_TexelSize;
                float4 LayerNormal0_TexelSize;
                float4 LayerMask1_TexelSize;
                float4 LayerMask0_TexelSize;
                float heightTransition;
                float4 BaseTex_TexelSize;
                float4 BaseNormal_TexelSize;
                float4 BaseMask_TexelSize;
                float4 Tiling_Offset;
                float2 HeightRemap;
                float4 SlopeTex_TexelSize;
                float4 SlopeNormal_TexelSize;
                float4 SlopeMask_TexelSize;
                float4 Tiling_Offset4;
                float2 SlopeRemap;
                float SlopePow;
                float4 _EmissionColor;
                float _UseShadowThreshold;
                float4 _DoubleSidedConstants;
                float _BlendMode;
                float _EnableBlendModePreserveSpecularLighting;
                float _RayTracing;
                float _RefractionModel;
                CBUFFER_END
                
                // Object and Global properties
                SAMPLER(SamplerState_Linear_Repeat);
                TEXTURE2D(LayerMask3);
                SAMPLER(samplerLayerMask3);
                TEXTURE2D(LayerMask2);
                SAMPLER(samplerLayerMask2);
                TEXTURE2D(LayerNormal3);
                SAMPLER(samplerLayerNormal3);
                TEXTURE2D(LayerNormal2);
                SAMPLER(samplerLayerNormal2);
                TEXTURE2D(Layer0);
                SAMPLER(samplerLayer0);
                TEXTURE2D(Layer1);
                SAMPLER(samplerLayer1);
                TEXTURE2D(Layer2);
                SAMPLER(samplerLayer2);
                TEXTURE2D(Layer3);
                SAMPLER(samplerLayer3);
                TEXTURE2D(LayerNormal1);
                SAMPLER(samplerLayerNormal1);
                TEXTURE2D(LayerNormal0);
                SAMPLER(samplerLayerNormal0);
                TEXTURE2D(LayerMask1);
                SAMPLER(samplerLayerMask1);
                TEXTURE2D(LayerMask0);
                SAMPLER(samplerLayerMask0);
                TEXTURE2D(BaseTex);
                SAMPLER(samplerBaseTex);
                TEXTURE2D(BaseNormal);
                SAMPLER(samplerBaseNormal);
                TEXTURE2D(BaseMask);
                SAMPLER(samplerBaseMask);
                TEXTURE2D(SlopeTex);
                SAMPLER(samplerSlopeTex);
                TEXTURE2D(SlopeNormal);
                SAMPLER(samplerSlopeNormal);
                TEXTURE2D(SlopeMask);
                SAMPLER(samplerSlopeMask);
    
                // -- Property used by ScenePickingPass
                #ifdef SCENEPICKINGPASS
                float4 _SelectionID;
                #endif
    
                // -- Properties used by SceneSelectionPass
                #ifdef SCENESELECTIONPASS
                int _ObjectId;
                int _PassValue;
                #endif
    
                // Includes
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
            	#include "Assets/Shaders/GPUTerrainHeight/TerrainVertexPosition.hlsl"
                #include "Assets/Shaders/TerrainShading/HeightBlend.hlsl"
    
                // --------------------------------------------------
                // Structs and Packing
    
                struct AttributesMesh
                {
                     float3 positionOS : POSITION;
                     float3 normalOS : NORMAL;
                     float4 tangentOS : TANGENT;
                    #if UNITY_ANY_INSTANCING_ENABLED
                     uint instanceID : INSTANCEID_SEMANTIC;
                    #endif
                };
                struct VaryingsMeshToPS
                {
                    SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
                     float3 positionRWS;
                     float3 normalWS;
                     float4 tangentWS;
                    #if UNITY_ANY_INSTANCING_ENABLED
                     uint instanceID : CUSTOM_INSTANCE_ID;
                    #endif
                     float4 SplatMapColor;
                };
                struct VertexDescriptionInputs
                {
                     float3 ObjectSpaceNormal;
                     float3 ObjectSpaceTangent;
                     float3 ObjectSpacePosition;
                };
                struct SurfaceDescriptionInputs
                {
                     float3 ObjectSpaceNormal;
                     float3 WorldSpaceNormal;
                     float3 TangentSpaceNormal;
                     float3 ObjectSpacePosition;
                     float4 SplatMapColor;
                };
                struct PackedVaryingsMeshToPS
                {
                    SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
                    #if UNITY_ANY_INSTANCING_ENABLED
                     uint instanceID : CUSTOM_INSTANCE_ID;
                    #endif
                     float3 interp0 : INTERP0;
                     float3 interp1 : INTERP1;
                     float4 interp2 : INTERP2;
                     float4 interp3 : INTERP3;
                };
    
                PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
                {
                    PackedVaryingsMeshToPS output;
                    ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
                    output.positionCS = input.positionCS;
                    output.interp0.xyz =  input.positionRWS;
                    output.interp1.xyz =  input.normalWS;
                    output.interp2.xyzw =  input.tangentWS;
                    #if UNITY_ANY_INSTANCING_ENABLED
                    output.instanceID = input.instanceID;
                    #endif
                    output.interp3.xyzw =  input.SplatMapColor;
                    return output;
                }
                
                VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
                {
                    VaryingsMeshToPS output;
                    output.positionCS = input.positionCS;
                    output.positionRWS = input.interp0.xyz;
                    output.normalWS = input.interp1.xyz;
                    output.tangentWS = input.interp2.xyzw;
                    #if UNITY_ANY_INSTANCING_ENABLED
                    output.instanceID = input.instanceID;
                    #endif
                    output.SplatMapColor = input.interp3.xyzw;
                    return output;
                }
                
    
                // --------------------------------------------------
                // Graph
    
    
                // Graph Functions
                
                void UnityGetInstanceID_float(out float Out)
                {
                #if UNITY_ANY_INSTANCING_ENABLED
                    Out = unity_InstanceID;
                #else
                    Out = 0;
                #endif
                }
                
                void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
                {
                    RGBA = float4(R, G, B, A);
                    RGB = float3(R, G, B);
                    RG = float2(R, G);
                }
                
                void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
                {
                    Out = A / B;
                }
                
                void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
                {
                    Out = UV * Tiling + Offset;
                }
                
                struct Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float
                {
                };
                
                void SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(float4 Tiling_Offset, float2 Vector2, Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float IN, out float2 OutVector2_1)
                {
                    float2 _Property_5ea954dbdecc454b839a01badac3afd6_Out_0 = Vector2;
                    float4 _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0 = Tiling_Offset;
                    float _Split_c19978cb25c5413eaf23432179b0e3af_R_1 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[0];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_G_2 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[1];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_B_3 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[2];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_A_4 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[3];
                    float4 _Combine_387ca93b6841454bad52ea2f221d199f_RGBA_4;
                    float3 _Combine_387ca93b6841454bad52ea2f221d199f_RGB_5;
                    float2 _Combine_387ca93b6841454bad52ea2f221d199f_RG_6;
                    Unity_Combine_float(_Split_c19978cb25c5413eaf23432179b0e3af_R_1, _Split_c19978cb25c5413eaf23432179b0e3af_G_2, 0, 0, _Combine_387ca93b6841454bad52ea2f221d199f_RGBA_4, _Combine_387ca93b6841454bad52ea2f221d199f_RGB_5, _Combine_387ca93b6841454bad52ea2f221d199f_RG_6);
                    float4 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGBA_4;
                    float3 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGB_5;
                    float2 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6;
                    Unity_Combine_float(_Split_c19978cb25c5413eaf23432179b0e3af_B_3, _Split_c19978cb25c5413eaf23432179b0e3af_A_4, 0, 0, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGBA_4, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGB_5, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6);
                    float2 _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3;
                    Unity_TilingAndOffset_float(_Property_5ea954dbdecc454b839a01badac3afd6_Out_0, _Combine_387ca93b6841454bad52ea2f221d199f_RG_6, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6, _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3);
                    OutVector2_1 = _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3;
                }
                
                void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
                {
                    Out = A * B;
                }
                
                void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
                {
                    Out = A * B;
                }
                
                void Desaturate_float(float3 oldcolor, float k, out float3 newcolor){
                    float intensity = dot(oldcolor,float3(0.3,0.59,0.11));
                    newcolor.x = intensity*k + oldcolor.x*(1-k);
                    newcolor.y = intensity*k + oldcolor.y*(1-k);
                    newcolor.z = intensity*k + oldcolor.z*(1-k);
                }
                
                void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
                {
                    Out = A * B;
                }
                
                void Unity_Lerp_float(float A, float B, float T, out float Out)
                {
                    Out = lerp(A, B, T);
                }
                
                struct Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float
                {
                };
                
                void SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(UnityTexture2D Albedo, UnityTexture2D Normal, UnityTexture2D Mask, float DesaturationK, float BrightnessAtten, float2 UV, float2 HeightRemap, Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float IN, out float4 oAlbedo_0, out float4 oNormal_1, out float4 oMask_2)
                {
                    UnityTexture2D _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0 = Albedo;
                    float2 _Property_76ed35a32977448f8ea254bf6de06d33_Out_0 = UV;
                    float4 _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_R_4 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.r;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_G_5 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.g;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_B_6 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.b;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_A_7 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.a;
                    float _Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0 = BrightnessAtten;
                    float4 _Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2);
                    float _Float_f48d9dc0c16249fe8fe5b97c86e7f56c_Out_0 = -0.25;
                    float2 _Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2;
                    Unity_Multiply_float2_float2(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0, (_Float_f48d9dc0c16249fe8fe5b97c86e7f56c_Out_0.xx), _Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2);
                    float4 _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_R_4 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.r;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_G_5 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.g;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_B_6 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.b;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_A_7 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.a;
                    float4 _Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2);
                    float _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0 = DesaturationK;
                    float3 _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1;
                    Desaturate_float((_Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1);
                    float3 _Multiply_410af5ac81154a3aab73254ac228eccd_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2.xyz), _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1, _Multiply_410af5ac81154a3aab73254ac228eccd_Out_2);
                    UnityTexture2D _Property_d05972164bdd4e0189593b8dae00db03_Out_0 = Normal;
                    float4 _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0 = SAMPLE_TEXTURE2D(_Property_d05972164bdd4e0189593b8dae00db03_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d05972164bdd4e0189593b8dae00db03_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0);
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_R_4 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.r;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_G_5 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.g;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_B_6 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.b;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_A_7 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.a;
                    float4 _Multiply_4999f90cbd1848acaf20b253953c0963_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_4999f90cbd1848acaf20b253953c0963_Out_2);
                    float4 _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_d05972164bdd4e0189593b8dae00db03_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d05972164bdd4e0189593b8dae00db03_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0);
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_R_4 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.r;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_G_5 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.g;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_B_6 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.b;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_A_7 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.a;
                    float4 _Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2);
                    float3 _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1;
                    Desaturate_float((_Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1);
                    float3 _Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_4999f90cbd1848acaf20b253953c0963_Out_2.xyz), _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1, _Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2);
                    UnityTexture2D _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0 = Mask;
                    float4 _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0 = SAMPLE_TEXTURE2D(_Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_R_4 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.r;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_G_5 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.g;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_B_6 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.b;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_A_7 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.a;
                    float4 _Multiply_0b2356625aad40439a89b8519e36e62b_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_0b2356625aad40439a89b8519e36e62b_Out_2);
                    float4 _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0 = SAMPLE_TEXTURE2D(_Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_R_4 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.r;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_G_5 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.g;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_B_6 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.b;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_A_7 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.a;
                    float4 _Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2);
                    float3 _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1;
                    Desaturate_float((_Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1);
                    float3 _Multiply_3c8f32d2a057478e869493099765b841_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_0b2356625aad40439a89b8519e36e62b_Out_2.xyz), _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1, _Multiply_3c8f32d2a057478e869493099765b841_Out_2);
                    float _Split_77de2b1a3326407b985f625d91e2063b_R_1 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[0];
                    float _Split_77de2b1a3326407b985f625d91e2063b_G_2 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[1];
                    float _Split_77de2b1a3326407b985f625d91e2063b_B_3 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[2];
                    float _Split_77de2b1a3326407b985f625d91e2063b_A_4 = 0;
                    float2 _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0 = HeightRemap;
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_R_1 = _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0[0];
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_G_2 = _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0[1];
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_B_3 = 0;
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_A_4 = 0;
                    float _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3;
                    Unity_Lerp_float(_Split_0df13f6921fe4db99b01dcff93c3b978_R_1, _Split_0df13f6921fe4db99b01dcff93c3b978_G_2, _Split_77de2b1a3326407b985f625d91e2063b_B_3, _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3);
                    float4 _Combine_17dba591e95443299750f53a93613083_RGBA_4;
                    float3 _Combine_17dba591e95443299750f53a93613083_RGB_5;
                    float2 _Combine_17dba591e95443299750f53a93613083_RG_6;
                    Unity_Combine_float(_Split_77de2b1a3326407b985f625d91e2063b_R_1, _Split_77de2b1a3326407b985f625d91e2063b_G_2, _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3, _Split_77de2b1a3326407b985f625d91e2063b_A_4, _Combine_17dba591e95443299750f53a93613083_RGBA_4, _Combine_17dba591e95443299750f53a93613083_RGB_5, _Combine_17dba591e95443299750f53a93613083_RG_6);
                    oAlbedo_0 = (float4(_Multiply_410af5ac81154a3aab73254ac228eccd_Out_2, 1.0));
                    oNormal_1 = (float4(_Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2, 1.0));
                    oMask_2 = _Combine_17dba591e95443299750f53a93613083_RGBA_4;
                }
                
                void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
                {
                    Out = dot(A, B);
                }
                
                void Unity_Power_float(float A, float B, out float Out)
                {
                    Out = pow(A, B);
                }
                
                void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
                {
                    Out = smoothstep(Edge1, Edge2, In);
                }
                
                void Unity_OneMinus_float(float In, out float Out)
                {
                    Out = 1 - In;
                }
                
                void BlendByMask_float(float4 a, float4 b, float4 c, float4 d, float4 blend, out float4 ret){
                    ret = a*blend.x + b*blend.y + c*blend.z + d*blend.w;
                }
                
                void Unity_Add_float4(float4 A, float4 B, out float4 Out)
                {
                    Out = A + B;
                }
    
                // Graph Vertex
                struct VertexDescription
                {
                    float3 Position;
                    float3 Normal;
                    float3 Tangent;
                    float4 SplatMapColor;
                };
                
                VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
                {
                    VertexDescription description = (VertexDescription)0;
                    float _InstanceID_1b9fa912aec74e76aae6821c84f95467_Out_0;
                    UnityGetInstanceID_float(_InstanceID_1b9fa912aec74e76aae6821c84f95467_Out_0);
                    float3 _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_oposOS_2;
                    float4 _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_color_3;
                    float3 _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_normal_4;
                    GetTerrainVertex_float(_InstanceID_1b9fa912aec74e76aae6821c84f95467_Out_0, IN.ObjectSpacePosition, _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_oposOS_2, _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_color_3, _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_normal_4);
                    description.Position = _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_oposOS_2;
                    description.Normal = _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_normal_4;
                    description.Tangent = IN.ObjectSpaceTangent;
                    description.SplatMapColor = _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_color_3;
                    return description;
                }
    
                // Graph Pixel
                struct SurfaceDescription
                {
                    float3 BaseColor;
                    float3 Emission;
                    float Alpha;
                    float3 BentNormal;
                    float Smoothness;
                    float Occlusion;
                    float3 NormalTS;
                    float Metallic;
                };
                
                SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
                {
                    SurfaceDescription surface = (SurfaceDescription)0;
                    UnityTexture2D _Property_4e780cffb4044909a58e26eaff6361d1_Out_0 = UnityBuildTexture2DStructNoScale(BaseTex);
                    UnityTexture2D _Property_20a5bc7358e64fe8b3327adb9ce635ea_Out_0 = UnityBuildTexture2DStructNoScale(BaseNormal);
                    UnityTexture2D _Property_090d521163b9493189233a9f2e1cf5ed_Out_0 = UnityBuildTexture2DStructNoScale(BaseMask);
                    float4 _Property_6881ae016d754988b27811b95cc834ca_Out_0 = Tiling_Offset;
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_R_1 = IN.ObjectSpacePosition[0];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_G_2 = IN.ObjectSpacePosition[1];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_B_3 = IN.ObjectSpacePosition[2];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_A_4 = 0;
                    float4 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGBA_4;
                    float3 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGB_5;
                    float2 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6;
                    Unity_Combine_float(_Split_3335daa3a4b34f69a62c9c8a1c6f39b2_R_1, _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_B_3, 0, 0, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGBA_4, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGB_5, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6);
                    float _Property_8984e4bf1c26459280f9fece3c52167c_Out_0 = UVXZScale;
                    float2 _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2;
                    Unity_Divide_float2(_Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6, (_Property_8984e4bf1c26459280f9fece3c52167c_Out_0.xx), _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2);
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_737be3819d2c4f29853810a18717cae3;
                    float2 _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_6881ae016d754988b27811b95cc834ca_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1);
                    float2 _Property_dcc00367280c4dc6b11a52aa07754830_Out_0 = HeightRemap;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_6722d68456e84aecb015a07880cbbd46;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_4e780cffb4044909a58e26eaff6361d1_Out_0, _Property_20a5bc7358e64fe8b3327adb9ce635ea_Out_0, _Property_090d521163b9493189233a9f2e1cf5ed_Out_0, 0.25, 4, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1, _Property_dcc00367280c4dc6b11a52aa07754830_Out_0, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2);
                    UnityTexture2D _Property_3d7142ef79234a0ba6cda49555992a80_Out_0 = UnityBuildTexture2DStructNoScale(Layer0);
                    UnityTexture2D _Property_42e52c243a994f04944481ff3627fc2c_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal0);
                    UnityTexture2D _Property_e67647d6cf1b44bebf91845a255b522c_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask0);
                    float4 _Property_4e6c66ba03a842e482f7040c3fe163dc_Out_0 = Tiling_Offset0;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674;
                    float2 _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_4e6c66ba03a842e482f7040c3fe163dc_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1);
                    float2 _Property_8cf19c3a22e64f0a85a51c8cbf5085e7_Out_0 = HeightRemap0;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_3d7142ef79234a0ba6cda49555992a80_Out_0, _Property_42e52c243a994f04944481ff3627fc2c_Out_0, _Property_e67647d6cf1b44bebf91845a255b522c_Out_0, 0.25, 4, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1, _Property_8cf19c3a22e64f0a85a51c8cbf5085e7_Out_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2);
                    UnityTexture2D _Property_1bce6ca387e847e1a43a4534686b655f_Out_0 = UnityBuildTexture2DStructNoScale(Layer1);
                    UnityTexture2D _Property_1e7513acda3b4b20a5a028d0da4bcfb0_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal1);
                    UnityTexture2D _Property_75d4521a27cb403399759cefa7be71f2_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask1);
                    float4 _Property_e17bf3be22544a639340ddea65766b89_Out_0 = Tiling_Offset1;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_df825eb885d947429ce6daf495a641a7;
                    float2 _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_e17bf3be22544a639340ddea65766b89_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1);
                    float2 _Property_d682537de1054cf4b1eddd1680d152fb_Out_0 = HeightRemap1;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_1bce6ca387e847e1a43a4534686b655f_Out_0, _Property_1e7513acda3b4b20a5a028d0da4bcfb0_Out_0, _Property_75d4521a27cb403399759cefa7be71f2_Out_0, 0.25, 4, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1, _Property_d682537de1054cf4b1eddd1680d152fb_Out_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2);
                    UnityTexture2D _Property_b79fba6b5b1f40b88b38803dad2bb2e5_Out_0 = UnityBuildTexture2DStructNoScale(Layer2);
                    UnityTexture2D _Property_a787f1642c6d4570af8ae47ea63a59ed_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal2);
                    UnityTexture2D _Property_f4ae055a87ef48cb8df5c603ca6f72b0_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask2);
                    float4 _Property_e12db1a96427478999d081afcb59d771_Out_0 = Tiling_Offset2;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d;
                    float2 _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_e12db1a96427478999d081afcb59d771_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1);
                    float2 _Property_3be82515dad24d76b9af558757032f30_Out_0 = HeightRemap2;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_b79fba6b5b1f40b88b38803dad2bb2e5_Out_0, _Property_a787f1642c6d4570af8ae47ea63a59ed_Out_0, _Property_f4ae055a87ef48cb8df5c603ca6f72b0_Out_0, 0.25, 4, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1, _Property_3be82515dad24d76b9af558757032f30_Out_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2);
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_R_1 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[0];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_G_2 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[1];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_B_3 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[2];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_A_4 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[3];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_R_1 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[0];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_G_2 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[1];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_B_3 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[2];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_A_4 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[3];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_R_1 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[0];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_G_2 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[1];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_B_3 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[2];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_A_4 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[3];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_R_1 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[0];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_G_2 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[1];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_B_3 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[2];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_A_4 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[3];
                    float4 _Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4;
                    float3 _Combine_f97595cb40654c9a8d82c0297e7280f3_RGB_5;
                    float2 _Combine_f97595cb40654c9a8d82c0297e7280f3_RG_6;
                    Unity_Combine_float(_Split_d81e33a0495c4ac09042d2d39dd09ba5_B_3, _Split_d2ed4cee74e042da88b7348fcfe80cab_B_3, _Split_b3522eb5287e4b28baab87cc1fa16589_B_3, _Split_a4f15428b23a40ef8f25398e9cff2d7c_B_3, _Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4, _Combine_f97595cb40654c9a8d82c0297e7280f3_RGB_5, _Combine_f97595cb40654c9a8d82c0297e7280f3_RG_6);
                    UnityTexture2D _Property_8e8b4d9a2dfc42148eb69519397ecebc_Out_0 = UnityBuildTexture2DStructNoScale(Layer3);
                    UnityTexture2D _Property_1443e12ec6544d2c8e8dcc71d67adb04_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal3);
                    UnityTexture2D _Property_b8f1cfb1112b4d2e8e2fe919f5003fb3_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask3);
                    float4 _Property_d9e7ba461b95446db56c0b99fce9de5d_Out_0 = Tiling_Offset3;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13;
                    float2 _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_d9e7ba461b95446db56c0b99fce9de5d_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1);
                    float2 _Property_e5d43ace4a66401faff3165675d44af0_Out_0 = HeightRemap3;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_8e8b4d9a2dfc42148eb69519397ecebc_Out_0, _Property_1443e12ec6544d2c8e8dcc71d67adb04_Out_0, _Property_b8f1cfb1112b4d2e8e2fe919f5003fb3_Out_0, 0.25, 4, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1, _Property_e5d43ace4a66401faff3165675d44af0_Out_0, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2);
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_R_1 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[0];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_G_2 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[1];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_B_3 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[2];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_A_4 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[3];
                    UnityTexture2D _Property_edf497c59ff340a5897695b2e8e9ed68_Out_0 = UnityBuildTexture2DStructNoScale(SlopeTex);
                    UnityTexture2D _Property_ae03f8d1bb284168ae1cb40c2c8d7dce_Out_0 = UnityBuildTexture2DStructNoScale(SlopeNormal);
                    UnityTexture2D _Property_35050279a32b481b878853831820cb33_Out_0 = UnityBuildTexture2DStructNoScale(SlopeMask);
                    float4 _Property_a3c340f0d1f647858c0d27fc6fa0d127_Out_0 = Tiling_Offset4;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67;
                    float2 _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_a3c340f0d1f647858c0d27fc6fa0d127_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1);
                    float2 _Property_8a3f864a5b9c469b92480bb635123790_Out_0 = HeightRemap4;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_edf497c59ff340a5897695b2e8e9ed68_Out_0, _Property_ae03f8d1bb284168ae1cb40c2c8d7dce_Out_0, _Property_35050279a32b481b878853831820cb33_Out_0, 0.25, 4, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1, _Property_8a3f864a5b9c469b92480bb635123790_Out_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2);
                    float _Split_015a6ee9887b47abb21193d18e609740_R_1 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[0];
                    float _Split_015a6ee9887b47abb21193d18e609740_G_2 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[1];
                    float _Split_015a6ee9887b47abb21193d18e609740_B_3 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[2];
                    float _Split_015a6ee9887b47abb21193d18e609740_A_4 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[3];
                    float4 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4;
                    float3 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGB_5;
                    float2 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RG_6;
                    Unity_Combine_float(_Split_d87c9f86d0a94f8b9b66cbcb29d89dde_B_3, _Split_015a6ee9887b47abb21193d18e609740_B_3, 0, 0, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGB_5, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RG_6);
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_R_1 = IN.SplatMapColor[0];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_G_2 = IN.SplatMapColor[1];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_B_3 = IN.SplatMapColor[2];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_A_4 = IN.SplatMapColor[3];
                    float4 _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4;
                    float3 _Combine_7b79ed205a4b435d8742217505a4c51d_RGB_5;
                    float2 _Combine_7b79ed205a4b435d8742217505a4c51d_RG_6;
                    Unity_Combine_float(1, _Split_ea099c0905af42a6804ca0dc2f58dc2f_R_1, _Split_ea099c0905af42a6804ca0dc2f58dc2f_G_2, _Split_ea099c0905af42a6804ca0dc2f58dc2f_B_3, _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4, _Combine_7b79ed205a4b435d8742217505a4c51d_RGB_5, _Combine_7b79ed205a4b435d8742217505a4c51d_RG_6);
                    float2 _Property_5538a1bac07f487589432be4f79dd05e_Out_0 = SlopeRemap;
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_R_1 = _Property_5538a1bac07f487589432be4f79dd05e_Out_0[0];
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_G_2 = _Property_5538a1bac07f487589432be4f79dd05e_Out_0[1];
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_B_3 = 0;
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_A_4 = 0;
                    float _DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2;
                    Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(0, 1, 0), _DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2);
                    float _Property_795a1803a8484214b987093ec034ab6a_Out_0 = SlopePow;
                    float _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2;
                    Unity_Power_float(_DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2, _Property_795a1803a8484214b987093ec034ab6a_Out_0, _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2);
                    float _Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3;
                    Unity_Smoothstep_float(_Split_03a4c3769cad421fb634dee3fa2beefb_R_1, _Split_03a4c3769cad421fb634dee3fa2beefb_G_2, _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2, _Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3);
                    float _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1;
                    Unity_OneMinus_float(_Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3, _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1);
                    float4 _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4;
                    float3 _Combine_9702e823fbe443b4b07afb499b6912a4_RGB_5;
                    float2 _Combine_9702e823fbe443b4b07afb499b6912a4_RG_6;
                    Unity_Combine_float(_Split_ea099c0905af42a6804ca0dc2f58dc2f_A_4, _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1, 0, 0, _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4, _Combine_9702e823fbe443b4b07afb499b6912a4_RGB_5, _Combine_9702e823fbe443b4b07afb499b6912a4_RG_6);
                    float _Property_d5cf363bc21a4f92a00fac464b9b11cf_Out_0 = heightTransition;
                    float4 _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5;
                    float4 _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6;
                    HeightBlend8Layers_float(_Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4, _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4, _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4, _Property_d5cf363bc21a4f92a00fac464b9b11cf_Out_0, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6);
                    float4 _BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5);
                    float4 _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5);
                    float4 _Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5, _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5, _Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2);
                    float4 _BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5);
                    float4 _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5);
                    float4 _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5, _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5, _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2);
                    float _Split_d9a7a90627444523a2cda58b36d68116_R_1 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[0];
                    float _Split_d9a7a90627444523a2cda58b36d68116_G_2 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[1];
                    float _Split_d9a7a90627444523a2cda58b36d68116_B_3 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[2];
                    float _Split_d9a7a90627444523a2cda58b36d68116_A_4 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[3];
                    float4 _BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5);
                    float4 _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5);
                    float4 _Add_090184f4bd18493ca37179ea1a8364d0_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5, _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5, _Add_090184f4bd18493ca37179ea1a8364d0_Out_2);
                    surface.BaseColor = (_Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2.xyz);
                    surface.Emission = float3(0, 0, 0);
                    surface.Alpha = 1;
                    surface.BentNormal = IN.TangentSpaceNormal;
                    surface.Smoothness = _Split_d9a7a90627444523a2cda58b36d68116_A_4;
                    surface.Occlusion = _Split_d9a7a90627444523a2cda58b36d68116_G_2;
                    surface.NormalTS = (_Add_090184f4bd18493ca37179ea1a8364d0_Out_2.xyz);
                    surface.Metallic = _Split_d9a7a90627444523a2cda58b36d68116_R_1;
                    return surface;
                }
    
                // --------------------------------------------------
                // Build Graph Inputs
    
                
                VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
                {
                    VertexDescriptionInputs output;
                    ZERO_INITIALIZE(VertexDescriptionInputs, output);
                
                    output.ObjectSpaceNormal =           input.normalOS;
                    output.ObjectSpaceTangent =          input.tangentOS.xyz;
                    output.ObjectSpacePosition =         input.positionOS;
                
                    return output;
                }
                
                AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
                #ifdef USE_CUSTOMINTERP_SUBSTRUCT
                    #ifdef TESSELLATION_ON
                    , inout VaryingsMeshToDS varyings
                    #else
                    , inout VaryingsMeshToPS varyings
                    #endif
                #endif
                #ifdef HAVE_VFX_MODIFICATION
                        , AttributesElement element
                #endif
                    )
                {
                    // build graph inputs
                    VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
                    // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
                
                    // evaluate vertex graph
                #ifdef HAVE_VFX_MODIFICATION
                    GraphProperties properties;
                    ZERO_INITIALIZE(GraphProperties, properties);
                
                    // Fetch the vertex graph properties for the particle instance.
                    GetElementVertexProperties(element, properties);
                
                    VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
                #else
                    VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
                #endif
                
                    // copy graph output to the results
                    input.positionOS = vertexDescription.Position;
                    input.normalOS = vertexDescription.Normal;
                    input.tangentOS.xyz = vertexDescription.Tangent;
                
                    varyings.SplatMapColor = vertexDescription.SplatMapColor;
                
                    return input;
                }
                
                FragInputs BuildFragInputs(VaryingsMeshToPS input)
                {
                    FragInputs output;
                    ZERO_INITIALIZE(FragInputs, output);
                
                    // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
                    // TODO: this is a really poor workaround, but the variable is used in a bunch of places
                    // to compute normals which are then passed on elsewhere to compute other values...
                    output.tangentToWorld = k_identity3x3;
                    output.positionSS = input.positionCS;       // input.positionCS is SV_Position
                
                    output.positionRWS = input.positionRWS;
                    output.tangentToWorld = BuildTangentToWorld(input.tangentWS, input.normalWS);
                
                #ifdef HAVE_VFX_MODIFICATION
                    // FragInputs from VFX come from two places: Interpolator or CBuffer.
                    /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
                
                #endif
                
                    // splice point to copy custom interpolator fields from varyings to frag inputs
                    output.customInterpolators.SplatMapColor = input.SplatMapColor;
                
                    return output;
                }
                
                // existing HDRP code uses the combined function to go directly from packed to frag inputs
                FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
                {
                    UNITY_SETUP_INSTANCE_ID(input);
                    VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
                    return BuildFragInputs(unpacked);
                }
                
                SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
                {
                    SurfaceDescriptionInputs output;
                    ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
                
                    output.WorldSpaceNormal =            normalize(input.tangentToWorld[2].xyz);
                    #if defined(SHADER_STAGE_RAY_TRACING)
                    output.ObjectSpaceNormal =           mul(output.WorldSpaceNormal, (float3x3) ObjectToWorld3x4());
                    #else
                    output.ObjectSpaceNormal =           normalize(mul(output.WorldSpaceNormal, (float3x3) UNITY_MATRIX_M));           // transposed multiplication by inverse matrix to handle normal scale
                    #endif
                    output.TangentSpaceNormal =          float3(0.0f, 0.0f, 1.0f);
                    output.ObjectSpacePosition =         TransformWorldToObject(input.positionRWS);
                
                    // splice point to copy frag inputs custom interpolator pack into the SDI
                    output.SplatMapColor = input.customInterpolators.SplatMapColor;
                
                    return output;
                }
                
    
                // --------------------------------------------------
                // Build Surface Data (Specific Material)
    
            void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
                {
                    ZERO_INITIALIZE(SurfaceData, surfaceData);
                
                    // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
                    // however specularOcclusion can come from the graph, so need to be init here so it can be override.
                    surfaceData.specularOcclusion = 1.0;
                
                    surfaceData.baseColor =                 surfaceDescription.BaseColor;
                    surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
                    surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
                    surfaceData.metallic =                  surfaceDescription.Metallic;
                
                    #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                        if (_EnableSSRefraction)
                        {
                
                            surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                            surfaceDescription.Alpha = 1.0;
                        }
                        else
                        {
                            surfaceData.ior = 1.0;
                            surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                            surfaceData.atDistance = 1.0;
                            surfaceData.transmittanceMask = 0.0;
                            surfaceDescription.Alpha = 1.0;
                        }
                    #else
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                    #endif
                
                    // These static material feature allow compile time optimization
                    surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
                    #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_TRANSMISSION
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_ANISOTROPY
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
                    #endif
                
                    #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                        // Require to have setup baseColor
                        // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                        surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
                    #endif
                
                    #ifdef _DOUBLESIDED_ON
                        float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                    #else
                        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                    #endif
                
                    // normal delivered to master node
                    GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
                
                    surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                
                    surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
                
                
                    #if HAVE_DECALS
                        if (_EnableDecals)
                        {
                            float alpha = 1.0;
                            alpha = surfaceDescription.Alpha;
                
                            // Both uses and modifies 'surfaceData.normalWS'.
                            DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                            ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                        }
                    #endif
                
                    bentNormalWS = surfaceData.normalWS;
                
                    surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
                
                    #ifdef DEBUG_DISPLAY
                        if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                        {
                            // TODO: need to update mip info
                            surfaceData.metallic = 0;
                        }
                
                        // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                        // as it can modify attribute use for static lighting
                        ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
                    #endif
                
                    // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
                    // If user provide bent normal then we process a better term
                    #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                        // Just use the value passed through via the slot (not active otherwise)
                    #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                        // If we have bent normal and ambient occlusion, process a specular occlusion
                        surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                    #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                        surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                    #endif
                
                    #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                        surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                    #endif
                }
                
    
                // --------------------------------------------------
                // Get Surface And BuiltinData
    
                void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
                {
                    // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                    #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                    #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                    #endif
                    #endif
    
                    #ifndef SHADER_UNLIT
                    #ifdef _DOUBLESIDED_ON
                        float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                    #else
                        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                    #endif
    
                    ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                    #endif // SHADER_UNLIT
    
                    SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
    
                    #if defined(HAVE_VFX_MODIFICATION)
                    GraphProperties properties;
                    ZERO_INITIALIZE(GraphProperties, properties);
    
                    GetElementPixelProperties(fragInputs, properties);
    
                    SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                    #else
                    SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                    #endif
    
                    // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                    // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                    #ifdef _ALPHATEST_ON
                        float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                        #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                        // The TransparentDepthPrepass is also used with SSR transparent.
                        // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                        // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                        #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                        // DepthPostpass always use its own alpha threshold
                        alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                        #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                        // If use shadow threshold isn't enable we don't allow any test
                        #endif
    
                        GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                    #endif
    
                    #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                    #endif
    
                    #ifndef SHADER_UNLIT
                    float3 bentNormalWS;
                    BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
    
                    // Builtin Data
                    // For back lighting we use the oposite vertex normal
                    InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
    
                    #else
                    BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
    
                    ZERO_INITIALIZE(BuiltinData, builtinData); // No call to InitBuiltinData as we don't have any lighting
                    builtinData.opacity = surfaceDescription.Alpha;
    
                    #if defined(DEBUG_DISPLAY)
                        // Light Layers are currently not used for the Unlit shader (because it is not lit)
                        // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                        // display in the light layers visualization mode, therefore we need the renderingLayers
                        builtinData.renderingLayers = GetMeshRenderingLightLayer();
                    #endif
    
                    #endif // SHADER_UNLIT
    
                    #ifdef _ALPHATEST_ON
                        // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                        builtinData.alphaClipTreshold = alphaCutoff;
                    #endif
    
                    // override sampleBakedGI - not used by Unlit
    
            		// If we want to force forward emissive and we have GBuffer pass, don't do anything
            		#if !(SHADERPASS == SHADERPASS_GBUFFER && defined(_FORCE_FORWARD_EMISSIVE))
                    builtinData.emissiveColor = surfaceDescription.Emission;
            		#endif
    
                    // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                    // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                    // This is a limitation of the current MRT approach.
    
                    #if _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
                    #endif
    
                    // TODO: We should generate distortion / distortionBlur for non distortion pass
                    #if (SHADERPASS == SHADERPASS_DISTORTION)
                    builtinData.distortion = surfaceDescription.Distortion;
                    builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                    #endif
    
                    #ifndef SHADER_UNLIT
                    // PostInitBuiltinData call ApplyDebugToBuiltinData
                    PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                    #else
                    ApplyDebugToBuiltinData(builtinData);
                    #endif
    
                    RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
                }
    
                // --------------------------------------------------
                // Main
    
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
    
                // --------------------------------------------------
                // Visual Effect Vertex Invocations
    
            	#ifdef HAVE_VFX_MODIFICATION
            	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
            	#endif
    
                ENDHLSL
            }
            Pass
            {
                Name "GBuffer"
                Tags
                {
                    "LightMode" = "GBuffer"
                }
    
                // Render State
                Cull [_CullMode]
                ZTest [_ZTestGBuffer]
                Stencil
                    {
                        WriteMask [_StencilWriteMaskGBuffer]
                        Ref [_StencilRefGBuffer]
                        CompFront Always
                        PassFront Replace
                        CompBack Always
                        PassBack Replace
                    }
    
                // Debug
                // <None>
    
                // --------------------------------------------------
                // Pass
    
                HLSLPROGRAM
    
                // Pragmas
                #pragma instancing_options renderinglayer
                #pragma target 4.5
                #pragma vertex Vert
                #pragma fragment Frag
                #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
                #pragma multi_compile_instancing
                #pragma instancing_options procedural:setupProcedural
    
                // Keywords
                #pragma multi_compile_fragment _ LIGHT_LAYERS
                #pragma multi_compile_raytracing _ LIGHT_LAYERS
                #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
                #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
                #pragma shader_feature_local _ _DOUBLESIDED_ON
                #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
                #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
                #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
                #pragma multi_compile _ DEBUG_DISPLAY
                #pragma shader_feature_local_fragment _ _DISABLE_DECALS
                #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
                #pragma shader_feature_local_fragment _ _DISABLE_SSR
                #pragma shader_feature_local_raytracing _ _DISABLE_SSR
                #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
                #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
                #pragma multi_compile_fragment _ LIGHTMAP_ON
                #pragma multi_compile_raytracing _ LIGHTMAP_ON
                #pragma multi_compile_fragment _ DIRLIGHTMAP_COMBINED
                #pragma multi_compile_raytracing _ DIRLIGHTMAP_COMBINED
                #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
                #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
                #pragma multi_compile _ DYNAMICLIGHTMAP_ON
                #pragma multi_compile_fragment _ SHADOWS_SHADOWMASK
                #pragma multi_compile_raytracing _ SHADOWS_SHADOWMASK
                #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
                #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT
                #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
                #pragma shader_feature _ _FORCE_FORWARD_EMISSIVE
                // GraphKeywords: <None>
    
                // For custom interpolators to inject a substruct definition before FragInputs definition,
                // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
                struct CustomInterpolators
                {
                    float4 SplatMapColor;
                };
                #define USE_CUSTOMINTERP_SUBSTRUCT
                
    
    
                // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
            	#ifdef HAVE_VFX_MODIFICATION
            	struct FragInputsVFX
                {
                    /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
                };
                #endif
    
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
            	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
    
                // --------------------------------------------------
                // Defines
    
                // Attribute
                #define ATTRIBUTES_NEED_NORMAL
                #define ATTRIBUTES_NEED_TANGENT
                #define ATTRIBUTES_NEED_TEXCOORD1
                #define ATTRIBUTES_NEED_TEXCOORD2
                #define VARYINGS_NEED_POSITION_WS
                #define VARYINGS_NEED_TANGENT_TO_WORLD
                #define VARYINGS_NEED_TEXCOORD1
                #define VARYINGS_NEED_TEXCOORD2
    
                #define HAVE_MESH_MODIFICATION
    
    
                #define SHADERPASS SHADERPASS_GBUFFER
                #define RAYTRACING_SHADER_GRAPH_DEFAULT
    
    
                // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
                // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
                // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
                // to still allow us to rename the field and keyword of this node without breaking existing code.
                #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
                #endif
    
                #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
                #endif
                // end
    
                #ifndef SHADER_UNLIT
                // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
                // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
                #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                    #define VARYINGS_NEED_CULLFACE
                #endif
                #endif
    
                // Specific Material Define
            #define _AMBIENT_OCCLUSION 1
                #define _SPECULAR_OCCLUSION_FROM_AO 1
                #define _ENERGY_CONSERVING_SPECULAR 1
                
                // If we use subsurface scattering, enable output split lighting (for forward pass)
                #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
                    #define OUTPUT_SPLIT_LIGHTING
                #endif
                
                // This shader support recursive rendering for raytracing
                #define HAVE_RECURSIVE_RENDERING
                
                // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
    
                // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
                // we should have a code like this:
                // if !defined(_DISABLE_SSR_TRANSPARENT)
                // pragma multi_compile _ WRITE_NORMAL_BUFFER
                // endif
                // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
                // it based on if SSR transparent in frame settings and not (and stripper can strip it).
                // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
                // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
                // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
                #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                    #define WRITE_NORMAL_BUFFER
                #endif
                #endif
    
                #ifndef DEBUG_DISPLAY
                    // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                    // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                    #if !defined(_SURFACE_TYPE_TRANSPARENT)
                        #if SHADERPASS == SHADERPASS_FORWARD
                        #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                        #elif SHADERPASS == SHADERPASS_GBUFFER
                        #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                        #endif
                    #endif
                #endif
    
                // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
                #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                    #define _DEFERRED_CAPABLE_MATERIAL
                #endif
    
                // Translate transparent motion vector define
                #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                    #define _WRITE_TRANSPARENT_MOTION_VECTOR
                #endif
    
                // Dots Instancing
                // DotsInstancingOptions: <None>
    
                // Various properties
    
                // HybridV1InjectedBuiltinProperties: <None>
    
                // -- Graph Properties
                CBUFFER_START(UnityPerMaterial)
                float2 HeightRemap3;
                float2 HeightRemap2;
                float4 Tiling_Offset3;
                float4 Tiling_Offset0;
                float2 HeightRemap4;
                float4 Tiling_Offset2;
                float2 HeightRemap0;
                float4 LayerMask3_TexelSize;
                float4 LayerMask2_TexelSize;
                float4 LayerNormal3_TexelSize;
                float4 LayerNormal2_TexelSize;
                float2 HeightRemap1;
                float4 Tiling_Offset1;
                float4 Layer0_TexelSize;
                float4 Layer1_TexelSize;
                float4 Layer2_TexelSize;
                float4 Layer3_TexelSize;
                float UVXZScale;
                float4 LayerNormal1_TexelSize;
                float4 LayerNormal0_TexelSize;
                float4 LayerMask1_TexelSize;
                float4 LayerMask0_TexelSize;
                float heightTransition;
                float4 BaseTex_TexelSize;
                float4 BaseNormal_TexelSize;
                float4 BaseMask_TexelSize;
                float4 Tiling_Offset;
                float2 HeightRemap;
                float4 SlopeTex_TexelSize;
                float4 SlopeNormal_TexelSize;
                float4 SlopeMask_TexelSize;
                float4 Tiling_Offset4;
                float2 SlopeRemap;
                float SlopePow;
                float4 _EmissionColor;
                float _UseShadowThreshold;
                float4 _DoubleSidedConstants;
                float _BlendMode;
                float _EnableBlendModePreserveSpecularLighting;
                float _RayTracing;
                float _RefractionModel;
                CBUFFER_END
                
                // Object and Global properties
                SAMPLER(SamplerState_Linear_Repeat);
                TEXTURE2D(LayerMask3);
                SAMPLER(samplerLayerMask3);
                TEXTURE2D(LayerMask2);
                SAMPLER(samplerLayerMask2);
                TEXTURE2D(LayerNormal3);
                SAMPLER(samplerLayerNormal3);
                TEXTURE2D(LayerNormal2);
                SAMPLER(samplerLayerNormal2);
                TEXTURE2D(Layer0);
                SAMPLER(samplerLayer0);
                TEXTURE2D(Layer1);
                SAMPLER(samplerLayer1);
                TEXTURE2D(Layer2);
                SAMPLER(samplerLayer2);
                TEXTURE2D(Layer3);
                SAMPLER(samplerLayer3);
                TEXTURE2D(LayerNormal1);
                SAMPLER(samplerLayerNormal1);
                TEXTURE2D(LayerNormal0);
                SAMPLER(samplerLayerNormal0);
                TEXTURE2D(LayerMask1);
                SAMPLER(samplerLayerMask1);
                TEXTURE2D(LayerMask0);
                SAMPLER(samplerLayerMask0);
                TEXTURE2D(BaseTex);
                SAMPLER(samplerBaseTex);
                TEXTURE2D(BaseNormal);
                SAMPLER(samplerBaseNormal);
                TEXTURE2D(BaseMask);
                SAMPLER(samplerBaseMask);
                TEXTURE2D(SlopeTex);
                SAMPLER(samplerSlopeTex);
                TEXTURE2D(SlopeNormal);
                SAMPLER(samplerSlopeNormal);
                TEXTURE2D(SlopeMask);
                SAMPLER(samplerSlopeMask);
    
                // -- Property used by ScenePickingPass
                #ifdef SCENEPICKINGPASS
                float4 _SelectionID;
                #endif
    
                // -- Properties used by SceneSelectionPass
                #ifdef SCENESELECTIONPASS
                int _ObjectId;
                int _PassValue;
                #endif
    
                // Includes
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
            	#include "Assets/Shaders/GPUTerrainHeight/TerrainVertexPosition.hlsl"
                #include "Assets/Shaders/TerrainShading/HeightBlend.hlsl"
    
                // --------------------------------------------------
                // Structs and Packing
    
                struct AttributesMesh
                {
                     float3 positionOS : POSITION;
                     float3 normalOS : NORMAL;
                     float4 tangentOS : TANGENT;
                     float4 uv1 : TEXCOORD1;
                     float4 uv2 : TEXCOORD2;
                    #if UNITY_ANY_INSTANCING_ENABLED
                     uint instanceID : INSTANCEID_SEMANTIC;
                    #endif
                };
                struct VaryingsMeshToPS
                {
                    SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
                     float3 positionRWS;
                     float3 normalWS;
                     float4 tangentWS;
                     float4 texCoord1;
                     float4 texCoord2;
                    #if UNITY_ANY_INSTANCING_ENABLED
                     uint instanceID : CUSTOM_INSTANCE_ID;
                    #endif
                     float4 SplatMapColor;
                };
                struct VertexDescriptionInputs
                {
                     float3 ObjectSpaceNormal;
                     float3 ObjectSpaceTangent;
                     float3 ObjectSpacePosition;
                };
                struct SurfaceDescriptionInputs
                {
                     float3 ObjectSpaceNormal;
                     float3 WorldSpaceNormal;
                     float3 TangentSpaceNormal;
                     float3 ObjectSpacePosition;
                     float4 SplatMapColor;
                };
                struct PackedVaryingsMeshToPS
                {
                    SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
                    #if UNITY_ANY_INSTANCING_ENABLED
                     uint instanceID : CUSTOM_INSTANCE_ID;
                    #endif
                     float3 interp0 : INTERP0;
                     float3 interp1 : INTERP1;
                     float4 interp2 : INTERP2;
                     float4 interp3 : INTERP3;
                     float4 interp4 : INTERP4;
                     float4 interp5 : INTERP5;
                };
    
                PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
                {
                    PackedVaryingsMeshToPS output;
                    ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
                    output.positionCS = input.positionCS;
                    output.interp0.xyz =  input.positionRWS;
                    output.interp1.xyz =  input.normalWS;
                    output.interp2.xyzw =  input.tangentWS;
                    output.interp3.xyzw =  input.texCoord1;
                    output.interp4.xyzw =  input.texCoord2;
                    #if UNITY_ANY_INSTANCING_ENABLED
                    output.instanceID = input.instanceID;
                    #endif
                    output.interp5.xyzw =  input.SplatMapColor;
                    return output;
                }
                
                VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
                {
                    VaryingsMeshToPS output;
                    output.positionCS = input.positionCS;
                    output.positionRWS = input.interp0.xyz;
                    output.normalWS = input.interp1.xyz;
                    output.tangentWS = input.interp2.xyzw;
                    output.texCoord1 = input.interp3.xyzw;
                    output.texCoord2 = input.interp4.xyzw;
                    #if UNITY_ANY_INSTANCING_ENABLED
                    output.instanceID = input.instanceID;
                    #endif
                    output.SplatMapColor = input.interp5.xyzw;
                    return output;
                }
                
    
                // --------------------------------------------------
                // Graph
    
    
                // Graph Functions
                
                void UnityGetInstanceID_float(out float Out)
                {
                #if UNITY_ANY_INSTANCING_ENABLED
                    Out = unity_InstanceID;
                #else
                    Out = 0;
                #endif
                }
                
                void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
                {
                    RGBA = float4(R, G, B, A);
                    RGB = float3(R, G, B);
                    RG = float2(R, G);
                }
                
                void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
                {
                    Out = A / B;
                }
                
                void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
                {
                    Out = UV * Tiling + Offset;
                }
                
                struct Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float
                {
                };
                
                void SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(float4 Tiling_Offset, float2 Vector2, Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float IN, out float2 OutVector2_1)
                {
                    float2 _Property_5ea954dbdecc454b839a01badac3afd6_Out_0 = Vector2;
                    float4 _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0 = Tiling_Offset;
                    float _Split_c19978cb25c5413eaf23432179b0e3af_R_1 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[0];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_G_2 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[1];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_B_3 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[2];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_A_4 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[3];
                    float4 _Combine_387ca93b6841454bad52ea2f221d199f_RGBA_4;
                    float3 _Combine_387ca93b6841454bad52ea2f221d199f_RGB_5;
                    float2 _Combine_387ca93b6841454bad52ea2f221d199f_RG_6;
                    Unity_Combine_float(_Split_c19978cb25c5413eaf23432179b0e3af_R_1, _Split_c19978cb25c5413eaf23432179b0e3af_G_2, 0, 0, _Combine_387ca93b6841454bad52ea2f221d199f_RGBA_4, _Combine_387ca93b6841454bad52ea2f221d199f_RGB_5, _Combine_387ca93b6841454bad52ea2f221d199f_RG_6);
                    float4 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGBA_4;
                    float3 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGB_5;
                    float2 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6;
                    Unity_Combine_float(_Split_c19978cb25c5413eaf23432179b0e3af_B_3, _Split_c19978cb25c5413eaf23432179b0e3af_A_4, 0, 0, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGBA_4, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGB_5, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6);
                    float2 _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3;
                    Unity_TilingAndOffset_float(_Property_5ea954dbdecc454b839a01badac3afd6_Out_0, _Combine_387ca93b6841454bad52ea2f221d199f_RG_6, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6, _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3);
                    OutVector2_1 = _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3;
                }
                
                void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
                {
                    Out = A * B;
                }
                
                void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
                {
                    Out = A * B;
                }
                
                void Desaturate_float(float3 oldcolor, float k, out float3 newcolor){
                    float intensity = dot(oldcolor,float3(0.3,0.59,0.11));
                    newcolor.x = intensity*k + oldcolor.x*(1-k);
                    newcolor.y = intensity*k + oldcolor.y*(1-k);
                    newcolor.z = intensity*k + oldcolor.z*(1-k);
                }
                
                void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
                {
                    Out = A * B;
                }
                
                void Unity_Lerp_float(float A, float B, float T, out float Out)
                {
                    Out = lerp(A, B, T);
                }
                
                struct Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float
                {
                };
                
                void SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(UnityTexture2D Albedo, UnityTexture2D Normal, UnityTexture2D Mask, float DesaturationK, float BrightnessAtten, float2 UV, float2 HeightRemap, Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float IN, out float4 oAlbedo_0, out float4 oNormal_1, out float4 oMask_2)
                {
                    UnityTexture2D _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0 = Albedo;
                    float2 _Property_76ed35a32977448f8ea254bf6de06d33_Out_0 = UV;
                    float4 _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_R_4 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.r;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_G_5 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.g;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_B_6 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.b;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_A_7 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.a;
                    float _Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0 = BrightnessAtten;
                    float4 _Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2);
                    float _Float_f48d9dc0c16249fe8fe5b97c86e7f56c_Out_0 = -0.25;
                    float2 _Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2;
                    Unity_Multiply_float2_float2(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0, (_Float_f48d9dc0c16249fe8fe5b97c86e7f56c_Out_0.xx), _Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2);
                    float4 _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_R_4 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.r;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_G_5 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.g;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_B_6 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.b;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_A_7 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.a;
                    float4 _Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2);
                    float _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0 = DesaturationK;
                    float3 _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1;
                    Desaturate_float((_Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1);
                    float3 _Multiply_410af5ac81154a3aab73254ac228eccd_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2.xyz), _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1, _Multiply_410af5ac81154a3aab73254ac228eccd_Out_2);
                    UnityTexture2D _Property_d05972164bdd4e0189593b8dae00db03_Out_0 = Normal;
                    float4 _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0 = SAMPLE_TEXTURE2D(_Property_d05972164bdd4e0189593b8dae00db03_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d05972164bdd4e0189593b8dae00db03_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0);
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_R_4 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.r;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_G_5 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.g;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_B_6 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.b;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_A_7 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.a;
                    float4 _Multiply_4999f90cbd1848acaf20b253953c0963_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_4999f90cbd1848acaf20b253953c0963_Out_2);
                    float4 _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_d05972164bdd4e0189593b8dae00db03_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d05972164bdd4e0189593b8dae00db03_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0);
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_R_4 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.r;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_G_5 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.g;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_B_6 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.b;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_A_7 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.a;
                    float4 _Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2);
                    float3 _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1;
                    Desaturate_float((_Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1);
                    float3 _Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_4999f90cbd1848acaf20b253953c0963_Out_2.xyz), _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1, _Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2);
                    UnityTexture2D _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0 = Mask;
                    float4 _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0 = SAMPLE_TEXTURE2D(_Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_R_4 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.r;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_G_5 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.g;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_B_6 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.b;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_A_7 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.a;
                    float4 _Multiply_0b2356625aad40439a89b8519e36e62b_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_0b2356625aad40439a89b8519e36e62b_Out_2);
                    float4 _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0 = SAMPLE_TEXTURE2D(_Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_R_4 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.r;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_G_5 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.g;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_B_6 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.b;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_A_7 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.a;
                    float4 _Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2);
                    float3 _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1;
                    Desaturate_float((_Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1);
                    float3 _Multiply_3c8f32d2a057478e869493099765b841_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_0b2356625aad40439a89b8519e36e62b_Out_2.xyz), _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1, _Multiply_3c8f32d2a057478e869493099765b841_Out_2);
                    float _Split_77de2b1a3326407b985f625d91e2063b_R_1 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[0];
                    float _Split_77de2b1a3326407b985f625d91e2063b_G_2 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[1];
                    float _Split_77de2b1a3326407b985f625d91e2063b_B_3 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[2];
                    float _Split_77de2b1a3326407b985f625d91e2063b_A_4 = 0;
                    float2 _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0 = HeightRemap;
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_R_1 = _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0[0];
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_G_2 = _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0[1];
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_B_3 = 0;
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_A_4 = 0;
                    float _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3;
                    Unity_Lerp_float(_Split_0df13f6921fe4db99b01dcff93c3b978_R_1, _Split_0df13f6921fe4db99b01dcff93c3b978_G_2, _Split_77de2b1a3326407b985f625d91e2063b_B_3, _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3);
                    float4 _Combine_17dba591e95443299750f53a93613083_RGBA_4;
                    float3 _Combine_17dba591e95443299750f53a93613083_RGB_5;
                    float2 _Combine_17dba591e95443299750f53a93613083_RG_6;
                    Unity_Combine_float(_Split_77de2b1a3326407b985f625d91e2063b_R_1, _Split_77de2b1a3326407b985f625d91e2063b_G_2, _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3, _Split_77de2b1a3326407b985f625d91e2063b_A_4, _Combine_17dba591e95443299750f53a93613083_RGBA_4, _Combine_17dba591e95443299750f53a93613083_RGB_5, _Combine_17dba591e95443299750f53a93613083_RG_6);
                    oAlbedo_0 = (float4(_Multiply_410af5ac81154a3aab73254ac228eccd_Out_2, 1.0));
                    oNormal_1 = (float4(_Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2, 1.0));
                    oMask_2 = _Combine_17dba591e95443299750f53a93613083_RGBA_4;
                }
                
                void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
                {
                    Out = dot(A, B);
                }
                
                void Unity_Power_float(float A, float B, out float Out)
                {
                    Out = pow(A, B);
                }
                
                void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
                {
                    Out = smoothstep(Edge1, Edge2, In);
                }
                
                void Unity_OneMinus_float(float In, out float Out)
                {
                    Out = 1 - In;
                }
                
                void BlendByMask_float(float4 a, float4 b, float4 c, float4 d, float4 blend, out float4 ret){
                    ret = a*blend.x + b*blend.y + c*blend.z + d*blend.w;
                }
                
                void Unity_Add_float4(float4 A, float4 B, out float4 Out)
                {
                    Out = A + B;
                }
    
                // Graph Vertex
                struct VertexDescription
                {
                    float3 Position;
                    float3 Normal;
                    float3 Tangent;
                    float4 SplatMapColor;
                };
                
                VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
                {
                    VertexDescription description = (VertexDescription)0;
                    float _InstanceID_1b9fa912aec74e76aae6821c84f95467_Out_0;
                    UnityGetInstanceID_float(_InstanceID_1b9fa912aec74e76aae6821c84f95467_Out_0);
                    float3 _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_oposOS_2;
                    float4 _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_color_3;
                    float3 _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_normal_4;
                    GetTerrainVertex_float(_InstanceID_1b9fa912aec74e76aae6821c84f95467_Out_0, IN.ObjectSpacePosition, _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_oposOS_2, _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_color_3, _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_normal_4);
                    description.Position = _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_oposOS_2;
                    description.Normal = _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_normal_4;
                    description.Tangent = IN.ObjectSpaceTangent;
                    description.SplatMapColor = _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_color_3;
                    return description;
                }
    
                // Graph Pixel
                struct SurfaceDescription
                {
                    float3 BaseColor;
                    float3 Emission;
                    float Alpha;
                    float3 BentNormal;
                    float Smoothness;
                    float Occlusion;
                    float3 NormalTS;
                    float Metallic;
                    float4 VTPackedFeedback;
                };
                
                SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
                {
                    SurfaceDescription surface = (SurfaceDescription)0;
                    UnityTexture2D _Property_4e780cffb4044909a58e26eaff6361d1_Out_0 = UnityBuildTexture2DStructNoScale(BaseTex);
                    UnityTexture2D _Property_20a5bc7358e64fe8b3327adb9ce635ea_Out_0 = UnityBuildTexture2DStructNoScale(BaseNormal);
                    UnityTexture2D _Property_090d521163b9493189233a9f2e1cf5ed_Out_0 = UnityBuildTexture2DStructNoScale(BaseMask);
                    float4 _Property_6881ae016d754988b27811b95cc834ca_Out_0 = Tiling_Offset;
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_R_1 = IN.ObjectSpacePosition[0];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_G_2 = IN.ObjectSpacePosition[1];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_B_3 = IN.ObjectSpacePosition[2];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_A_4 = 0;
                    float4 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGBA_4;
                    float3 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGB_5;
                    float2 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6;
                    Unity_Combine_float(_Split_3335daa3a4b34f69a62c9c8a1c6f39b2_R_1, _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_B_3, 0, 0, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGBA_4, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGB_5, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6);
                    float _Property_8984e4bf1c26459280f9fece3c52167c_Out_0 = UVXZScale;
                    float2 _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2;
                    Unity_Divide_float2(_Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6, (_Property_8984e4bf1c26459280f9fece3c52167c_Out_0.xx), _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2);
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_737be3819d2c4f29853810a18717cae3;
                    float2 _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_6881ae016d754988b27811b95cc834ca_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1);
                    float2 _Property_dcc00367280c4dc6b11a52aa07754830_Out_0 = HeightRemap;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_6722d68456e84aecb015a07880cbbd46;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_4e780cffb4044909a58e26eaff6361d1_Out_0, _Property_20a5bc7358e64fe8b3327adb9ce635ea_Out_0, _Property_090d521163b9493189233a9f2e1cf5ed_Out_0, 0.25, 4, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1, _Property_dcc00367280c4dc6b11a52aa07754830_Out_0, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2);
                    UnityTexture2D _Property_3d7142ef79234a0ba6cda49555992a80_Out_0 = UnityBuildTexture2DStructNoScale(Layer0);
                    UnityTexture2D _Property_42e52c243a994f04944481ff3627fc2c_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal0);
                    UnityTexture2D _Property_e67647d6cf1b44bebf91845a255b522c_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask0);
                    float4 _Property_4e6c66ba03a842e482f7040c3fe163dc_Out_0 = Tiling_Offset0;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674;
                    float2 _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_4e6c66ba03a842e482f7040c3fe163dc_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1);
                    float2 _Property_8cf19c3a22e64f0a85a51c8cbf5085e7_Out_0 = HeightRemap0;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_3d7142ef79234a0ba6cda49555992a80_Out_0, _Property_42e52c243a994f04944481ff3627fc2c_Out_0, _Property_e67647d6cf1b44bebf91845a255b522c_Out_0, 0.25, 4, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1, _Property_8cf19c3a22e64f0a85a51c8cbf5085e7_Out_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2);
                    UnityTexture2D _Property_1bce6ca387e847e1a43a4534686b655f_Out_0 = UnityBuildTexture2DStructNoScale(Layer1);
                    UnityTexture2D _Property_1e7513acda3b4b20a5a028d0da4bcfb0_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal1);
                    UnityTexture2D _Property_75d4521a27cb403399759cefa7be71f2_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask1);
                    float4 _Property_e17bf3be22544a639340ddea65766b89_Out_0 = Tiling_Offset1;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_df825eb885d947429ce6daf495a641a7;
                    float2 _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_e17bf3be22544a639340ddea65766b89_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1);
                    float2 _Property_d682537de1054cf4b1eddd1680d152fb_Out_0 = HeightRemap1;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_1bce6ca387e847e1a43a4534686b655f_Out_0, _Property_1e7513acda3b4b20a5a028d0da4bcfb0_Out_0, _Property_75d4521a27cb403399759cefa7be71f2_Out_0, 0.25, 4, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1, _Property_d682537de1054cf4b1eddd1680d152fb_Out_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2);
                    UnityTexture2D _Property_b79fba6b5b1f40b88b38803dad2bb2e5_Out_0 = UnityBuildTexture2DStructNoScale(Layer2);
                    UnityTexture2D _Property_a787f1642c6d4570af8ae47ea63a59ed_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal2);
                    UnityTexture2D _Property_f4ae055a87ef48cb8df5c603ca6f72b0_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask2);
                    float4 _Property_e12db1a96427478999d081afcb59d771_Out_0 = Tiling_Offset2;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d;
                    float2 _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_e12db1a96427478999d081afcb59d771_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1);
                    float2 _Property_3be82515dad24d76b9af558757032f30_Out_0 = HeightRemap2;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_b79fba6b5b1f40b88b38803dad2bb2e5_Out_0, _Property_a787f1642c6d4570af8ae47ea63a59ed_Out_0, _Property_f4ae055a87ef48cb8df5c603ca6f72b0_Out_0, 0.25, 4, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1, _Property_3be82515dad24d76b9af558757032f30_Out_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2);
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_R_1 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[0];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_G_2 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[1];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_B_3 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[2];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_A_4 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[3];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_R_1 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[0];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_G_2 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[1];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_B_3 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[2];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_A_4 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[3];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_R_1 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[0];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_G_2 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[1];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_B_3 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[2];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_A_4 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[3];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_R_1 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[0];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_G_2 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[1];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_B_3 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[2];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_A_4 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[3];
                    float4 _Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4;
                    float3 _Combine_f97595cb40654c9a8d82c0297e7280f3_RGB_5;
                    float2 _Combine_f97595cb40654c9a8d82c0297e7280f3_RG_6;
                    Unity_Combine_float(_Split_d81e33a0495c4ac09042d2d39dd09ba5_B_3, _Split_d2ed4cee74e042da88b7348fcfe80cab_B_3, _Split_b3522eb5287e4b28baab87cc1fa16589_B_3, _Split_a4f15428b23a40ef8f25398e9cff2d7c_B_3, _Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4, _Combine_f97595cb40654c9a8d82c0297e7280f3_RGB_5, _Combine_f97595cb40654c9a8d82c0297e7280f3_RG_6);
                    UnityTexture2D _Property_8e8b4d9a2dfc42148eb69519397ecebc_Out_0 = UnityBuildTexture2DStructNoScale(Layer3);
                    UnityTexture2D _Property_1443e12ec6544d2c8e8dcc71d67adb04_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal3);
                    UnityTexture2D _Property_b8f1cfb1112b4d2e8e2fe919f5003fb3_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask3);
                    float4 _Property_d9e7ba461b95446db56c0b99fce9de5d_Out_0 = Tiling_Offset3;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13;
                    float2 _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_d9e7ba461b95446db56c0b99fce9de5d_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1);
                    float2 _Property_e5d43ace4a66401faff3165675d44af0_Out_0 = HeightRemap3;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_8e8b4d9a2dfc42148eb69519397ecebc_Out_0, _Property_1443e12ec6544d2c8e8dcc71d67adb04_Out_0, _Property_b8f1cfb1112b4d2e8e2fe919f5003fb3_Out_0, 0.25, 4, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1, _Property_e5d43ace4a66401faff3165675d44af0_Out_0, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2);
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_R_1 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[0];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_G_2 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[1];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_B_3 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[2];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_A_4 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[3];
                    UnityTexture2D _Property_edf497c59ff340a5897695b2e8e9ed68_Out_0 = UnityBuildTexture2DStructNoScale(SlopeTex);
                    UnityTexture2D _Property_ae03f8d1bb284168ae1cb40c2c8d7dce_Out_0 = UnityBuildTexture2DStructNoScale(SlopeNormal);
                    UnityTexture2D _Property_35050279a32b481b878853831820cb33_Out_0 = UnityBuildTexture2DStructNoScale(SlopeMask);
                    float4 _Property_a3c340f0d1f647858c0d27fc6fa0d127_Out_0 = Tiling_Offset4;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67;
                    float2 _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_a3c340f0d1f647858c0d27fc6fa0d127_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1);
                    float2 _Property_8a3f864a5b9c469b92480bb635123790_Out_0 = HeightRemap4;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_edf497c59ff340a5897695b2e8e9ed68_Out_0, _Property_ae03f8d1bb284168ae1cb40c2c8d7dce_Out_0, _Property_35050279a32b481b878853831820cb33_Out_0, 0.25, 4, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1, _Property_8a3f864a5b9c469b92480bb635123790_Out_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2);
                    float _Split_015a6ee9887b47abb21193d18e609740_R_1 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[0];
                    float _Split_015a6ee9887b47abb21193d18e609740_G_2 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[1];
                    float _Split_015a6ee9887b47abb21193d18e609740_B_3 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[2];
                    float _Split_015a6ee9887b47abb21193d18e609740_A_4 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[3];
                    float4 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4;
                    float3 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGB_5;
                    float2 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RG_6;
                    Unity_Combine_float(_Split_d87c9f86d0a94f8b9b66cbcb29d89dde_B_3, _Split_015a6ee9887b47abb21193d18e609740_B_3, 0, 0, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGB_5, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RG_6);
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_R_1 = IN.SplatMapColor[0];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_G_2 = IN.SplatMapColor[1];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_B_3 = IN.SplatMapColor[2];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_A_4 = IN.SplatMapColor[3];
                    float4 _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4;
                    float3 _Combine_7b79ed205a4b435d8742217505a4c51d_RGB_5;
                    float2 _Combine_7b79ed205a4b435d8742217505a4c51d_RG_6;
                    Unity_Combine_float(1, _Split_ea099c0905af42a6804ca0dc2f58dc2f_R_1, _Split_ea099c0905af42a6804ca0dc2f58dc2f_G_2, _Split_ea099c0905af42a6804ca0dc2f58dc2f_B_3, _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4, _Combine_7b79ed205a4b435d8742217505a4c51d_RGB_5, _Combine_7b79ed205a4b435d8742217505a4c51d_RG_6);
                    float2 _Property_5538a1bac07f487589432be4f79dd05e_Out_0 = SlopeRemap;
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_R_1 = _Property_5538a1bac07f487589432be4f79dd05e_Out_0[0];
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_G_2 = _Property_5538a1bac07f487589432be4f79dd05e_Out_0[1];
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_B_3 = 0;
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_A_4 = 0;
                    float _DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2;
                    Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(0, 1, 0), _DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2);
                    float _Property_795a1803a8484214b987093ec034ab6a_Out_0 = SlopePow;
                    float _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2;
                    Unity_Power_float(_DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2, _Property_795a1803a8484214b987093ec034ab6a_Out_0, _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2);
                    float _Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3;
                    Unity_Smoothstep_float(_Split_03a4c3769cad421fb634dee3fa2beefb_R_1, _Split_03a4c3769cad421fb634dee3fa2beefb_G_2, _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2, _Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3);
                    float _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1;
                    Unity_OneMinus_float(_Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3, _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1);
                    float4 _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4;
                    float3 _Combine_9702e823fbe443b4b07afb499b6912a4_RGB_5;
                    float2 _Combine_9702e823fbe443b4b07afb499b6912a4_RG_6;
                    Unity_Combine_float(_Split_ea099c0905af42a6804ca0dc2f58dc2f_A_4, _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1, 0, 0, _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4, _Combine_9702e823fbe443b4b07afb499b6912a4_RGB_5, _Combine_9702e823fbe443b4b07afb499b6912a4_RG_6);
                    float _Property_d5cf363bc21a4f92a00fac464b9b11cf_Out_0 = heightTransition;
                    float4 _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5;
                    float4 _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6;
                    HeightBlend8Layers_float(_Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4, _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4, _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4, _Property_d5cf363bc21a4f92a00fac464b9b11cf_Out_0, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6);
                    float4 _BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5);
                    float4 _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5);
                    float4 _Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5, _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5, _Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2);
                    float4 _BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5);
                    float4 _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5);
                    float4 _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5, _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5, _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2);
                    float _Split_d9a7a90627444523a2cda58b36d68116_R_1 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[0];
                    float _Split_d9a7a90627444523a2cda58b36d68116_G_2 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[1];
                    float _Split_d9a7a90627444523a2cda58b36d68116_B_3 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[2];
                    float _Split_d9a7a90627444523a2cda58b36d68116_A_4 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[3];
                    float4 _BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5);
                    float4 _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5);
                    float4 _Add_090184f4bd18493ca37179ea1a8364d0_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5, _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5, _Add_090184f4bd18493ca37179ea1a8364d0_Out_2);
                    surface.BaseColor = (_Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2.xyz);
                    surface.Emission = float3(0, 0, 0);
                    surface.Alpha = 1;
                    surface.BentNormal = IN.TangentSpaceNormal;
                    surface.Smoothness = _Split_d9a7a90627444523a2cda58b36d68116_A_4;
                    surface.Occlusion = _Split_d9a7a90627444523a2cda58b36d68116_G_2;
                    surface.NormalTS = (_Add_090184f4bd18493ca37179ea1a8364d0_Out_2.xyz);
                    surface.Metallic = _Split_d9a7a90627444523a2cda58b36d68116_R_1;
                    {
                        surface.VTPackedFeedback = float4(1.0f,1.0f,1.0f,.0f);
                    }
                    return surface;
                }
    
                // --------------------------------------------------
                // Build Graph Inputs
    
                
                VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
                {
                    VertexDescriptionInputs output;
                    ZERO_INITIALIZE(VertexDescriptionInputs, output);
                
                    output.ObjectSpaceNormal =           input.normalOS;
                    output.ObjectSpaceTangent =          input.tangentOS.xyz;
                    output.ObjectSpacePosition =         input.positionOS;
                
                    return output;
                }
                
                AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
                #ifdef USE_CUSTOMINTERP_SUBSTRUCT
                    #ifdef TESSELLATION_ON
                    , inout VaryingsMeshToDS varyings
                    #else
                    , inout VaryingsMeshToPS varyings
                    #endif
                #endif
                #ifdef HAVE_VFX_MODIFICATION
                        , AttributesElement element
                #endif
                    )
                {
                    // build graph inputs
                    VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
                    // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
                
                    // evaluate vertex graph
                #ifdef HAVE_VFX_MODIFICATION
                    GraphProperties properties;
                    ZERO_INITIALIZE(GraphProperties, properties);
                
                    // Fetch the vertex graph properties for the particle instance.
                    GetElementVertexProperties(element, properties);
                
                    VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
                #else
                    VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
                #endif
                
                    // copy graph output to the results
                    input.positionOS = vertexDescription.Position;
                    input.normalOS = vertexDescription.Normal;
                    input.tangentOS.xyz = vertexDescription.Tangent;
                
                    varyings.SplatMapColor = vertexDescription.SplatMapColor;
                
                    return input;
                }
                
                FragInputs BuildFragInputs(VaryingsMeshToPS input)
                {
                    FragInputs output;
                    ZERO_INITIALIZE(FragInputs, output);
                
                    // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
                    // TODO: this is a really poor workaround, but the variable is used in a bunch of places
                    // to compute normals which are then passed on elsewhere to compute other values...
                    output.tangentToWorld = k_identity3x3;
                    output.positionSS = input.positionCS;       // input.positionCS is SV_Position
                
                    output.positionRWS = input.positionRWS;
                    output.tangentToWorld = BuildTangentToWorld(input.tangentWS, input.normalWS);
                    output.texCoord1 = input.texCoord1;
                    output.texCoord2 = input.texCoord2;
                
                #ifdef HAVE_VFX_MODIFICATION
                    // FragInputs from VFX come from two places: Interpolator or CBuffer.
                    /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
                
                #endif
                
                    // splice point to copy custom interpolator fields from varyings to frag inputs
                    output.customInterpolators.SplatMapColor = input.SplatMapColor;
                
                    return output;
                }
                
                // existing HDRP code uses the combined function to go directly from packed to frag inputs
                FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
                {
                    UNITY_SETUP_INSTANCE_ID(input);
                    VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
                    return BuildFragInputs(unpacked);
                }
                
                SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
                {
                    SurfaceDescriptionInputs output;
                    ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
                
                    output.WorldSpaceNormal =            normalize(input.tangentToWorld[2].xyz);
                    #if defined(SHADER_STAGE_RAY_TRACING)
                    output.ObjectSpaceNormal =           mul(output.WorldSpaceNormal, (float3x3) ObjectToWorld3x4());
                    #else
                    output.ObjectSpaceNormal =           normalize(mul(output.WorldSpaceNormal, (float3x3) UNITY_MATRIX_M));           // transposed multiplication by inverse matrix to handle normal scale
                    #endif
                    output.TangentSpaceNormal =          float3(0.0f, 0.0f, 1.0f);
                    output.ObjectSpacePosition =         TransformWorldToObject(input.positionRWS);
                
                    // splice point to copy frag inputs custom interpolator pack into the SDI
                    output.SplatMapColor = input.customInterpolators.SplatMapColor;
                
                    return output;
                }
                
    
                // --------------------------------------------------
                // Build Surface Data (Specific Material)
    
            void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
                {
                    ZERO_INITIALIZE(SurfaceData, surfaceData);
                
                    // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
                    // however specularOcclusion can come from the graph, so need to be init here so it can be override.
                    surfaceData.specularOcclusion = 1.0;
                
                    surfaceData.baseColor =                 surfaceDescription.BaseColor;
                    surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
                    surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
                    surfaceData.metallic =                  surfaceDescription.Metallic;
                
                    #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                        if (_EnableSSRefraction)
                        {
                
                            surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                            surfaceDescription.Alpha = 1.0;
                        }
                        else
                        {
                            surfaceData.ior = 1.0;
                            surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                            surfaceData.atDistance = 1.0;
                            surfaceData.transmittanceMask = 0.0;
                            surfaceDescription.Alpha = 1.0;
                        }
                    #else
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                    #endif
                
                    // These static material feature allow compile time optimization
                    surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
                    #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_TRANSMISSION
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_ANISOTROPY
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
                    #endif
                
                    #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                        // Require to have setup baseColor
                        // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                        surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
                    #endif
                
                    #ifdef _DOUBLESIDED_ON
                        float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                    #else
                        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                    #endif
                
                    // normal delivered to master node
                    GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
                
                    surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                
                    surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
                
                
                    #if HAVE_DECALS
                        if (_EnableDecals)
                        {
                            float alpha = 1.0;
                            alpha = surfaceDescription.Alpha;
                
                            // Both uses and modifies 'surfaceData.normalWS'.
                            DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                            ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                        }
                    #endif
                
                    bentNormalWS = surfaceData.normalWS;
                
                    surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
                
                    #ifdef DEBUG_DISPLAY
                        if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                        {
                            // TODO: need to update mip info
                            surfaceData.metallic = 0;
                        }
                
                        // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                        // as it can modify attribute use for static lighting
                        ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
                    #endif
                
                    // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
                    // If user provide bent normal then we process a better term
                    #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                        // Just use the value passed through via the slot (not active otherwise)
                    #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                        // If we have bent normal and ambient occlusion, process a specular occlusion
                        surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                    #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                        surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                    #endif
                
                    #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                        surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                    #endif
                }
                
    
                // --------------------------------------------------
                // Get Surface And BuiltinData
    
                void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
                {
                    // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                    #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                    #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                    #endif
                    #endif
    
                    #ifndef SHADER_UNLIT
                    #ifdef _DOUBLESIDED_ON
                        float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                    #else
                        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                    #endif
    
                    ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                    #endif // SHADER_UNLIT
    
                    SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
    
                    #if defined(HAVE_VFX_MODIFICATION)
                    GraphProperties properties;
                    ZERO_INITIALIZE(GraphProperties, properties);
    
                    GetElementPixelProperties(fragInputs, properties);
    
                    SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                    #else
                    SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                    #endif
    
                    // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                    // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                    #ifdef _ALPHATEST_ON
                        float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                        #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                        // The TransparentDepthPrepass is also used with SSR transparent.
                        // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                        // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                        #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                        // DepthPostpass always use its own alpha threshold
                        alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                        #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                        // If use shadow threshold isn't enable we don't allow any test
                        #endif
    
                        GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                    #endif
    
                    #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                    #endif
    
                    #ifndef SHADER_UNLIT
                    float3 bentNormalWS;
                    BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
    
                    // Builtin Data
                    // For back lighting we use the oposite vertex normal
                    InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
    
                    #else
                    BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
    
                    ZERO_INITIALIZE(BuiltinData, builtinData); // No call to InitBuiltinData as we don't have any lighting
                    builtinData.opacity = surfaceDescription.Alpha;
    
                    #if defined(DEBUG_DISPLAY)
                        // Light Layers are currently not used for the Unlit shader (because it is not lit)
                        // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                        // display in the light layers visualization mode, therefore we need the renderingLayers
                        builtinData.renderingLayers = GetMeshRenderingLightLayer();
                    #endif
    
                    #endif // SHADER_UNLIT
    
                    #ifdef _ALPHATEST_ON
                        // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                        builtinData.alphaClipTreshold = alphaCutoff;
                    #endif
    
                    // override sampleBakedGI - not used by Unlit
    
            		// If we want to force forward emissive and we have GBuffer pass, don't do anything
            		#if !(SHADERPASS == SHADERPASS_GBUFFER && defined(_FORCE_FORWARD_EMISSIVE))
                    builtinData.emissiveColor = surfaceDescription.Emission;
            		#endif
    
                    // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                    // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                    // This is a limitation of the current MRT approach.
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
    
                    #if _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
                    #endif
    
                    // TODO: We should generate distortion / distortionBlur for non distortion pass
                    #if (SHADERPASS == SHADERPASS_DISTORTION)
                    builtinData.distortion = surfaceDescription.Distortion;
                    builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                    #endif
    
                    #ifndef SHADER_UNLIT
                    // PostInitBuiltinData call ApplyDebugToBuiltinData
                    PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                    #else
                    ApplyDebugToBuiltinData(builtinData);
                    #endif
    
                    RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
                }
    
                // --------------------------------------------------
                // Main
    
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassGBuffer.hlsl"
    
                // --------------------------------------------------
                // Visual Effect Vertex Invocations
    
            	#ifdef HAVE_VFX_MODIFICATION
            	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
            	#endif
    
                ENDHLSL
            }
            Pass
            {
                Name "Forward"
                Tags
                {
                    "LightMode" = "Forward"
                }
    
                // Render State
                Cull [_CullModeForward]
                Blend [_SrcBlend] [_DstBlend], [_AlphaSrcBlend] [_AlphaDstBlend]
                ZTest [_ZTestDepthEqualForOpaque]
                ZWrite [_ZWrite]
                ColorMask [_ColorMaskTransparentVel] 1
                Stencil
                    {
                        WriteMask [_StencilWriteMask]
                        Ref [_StencilRef]
                        CompFront Always
                        PassFront Replace
                        CompBack Always
                        PassBack Replace
                    }
    
                // Debug
                // <None>
    
                // --------------------------------------------------
                // Pass
    
                HLSLPROGRAM
    
                // Pragmas
                #pragma instancing_options renderinglayer
                #pragma target 4.5
                #pragma vertex Vert
                #pragma fragment Frag
                #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
                #pragma multi_compile_instancing
                #pragma instancing_options procedural:setupProcedural
    
                // Keywords
                #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
                #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
                #pragma shader_feature_local _ _DOUBLESIDED_ON
                #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
                #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
                #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
                #pragma multi_compile _ DEBUG_DISPLAY
                #pragma shader_feature_local_fragment _ _DISABLE_DECALS
                #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
                #pragma shader_feature_local_fragment _ _DISABLE_SSR
                #pragma shader_feature_local_raytracing _ _DISABLE_SSR
                #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
                #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
                #pragma multi_compile_fragment _ LIGHTMAP_ON
                #pragma multi_compile_raytracing _ LIGHTMAP_ON
                #pragma multi_compile_fragment _ DIRLIGHTMAP_COMBINED
                #pragma multi_compile_raytracing _ DIRLIGHTMAP_COMBINED
                #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
                #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
                #pragma multi_compile _ DYNAMICLIGHTMAP_ON
                #pragma multi_compile_fragment _ SHADOWS_SHADOWMASK
                #pragma multi_compile_raytracing _ SHADOWS_SHADOWMASK
                #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
                #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT
                #pragma multi_compile_fragment SHADOW_LOW SHADOW_MEDIUM SHADOW_HIGH SHADOW_VERY_HIGH
                #pragma multi_compile_fragment SCREEN_SPACE_SHADOWS_OFF SCREEN_SPACE_SHADOWS_ON
                #pragma multi_compile_fragment USE_FPTL_LIGHTLIST USE_CLUSTERED_LIGHTLIST
                #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
                #pragma shader_feature _ _FORCE_FORWARD_EMISSIVE
                // GraphKeywords: <None>
    
                // For custom interpolators to inject a substruct definition before FragInputs definition,
                // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
                struct CustomInterpolators
                {
                    float4 SplatMapColor;
                };
                #define USE_CUSTOMINTERP_SUBSTRUCT
                
    
    
                // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
            	#ifdef HAVE_VFX_MODIFICATION
            	struct FragInputsVFX
                {
                    /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
                };
                #endif
    
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
            	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
    
                // --------------------------------------------------
                // Defines
    
                // Attribute
                #define ATTRIBUTES_NEED_NORMAL
                #define ATTRIBUTES_NEED_TANGENT
                #define ATTRIBUTES_NEED_TEXCOORD1
                #define ATTRIBUTES_NEED_TEXCOORD2
                #define VARYINGS_NEED_POSITION_WS
                #define VARYINGS_NEED_TANGENT_TO_WORLD
                #define VARYINGS_NEED_TEXCOORD1
                #define VARYINGS_NEED_TEXCOORD2
    
                #define HAVE_MESH_MODIFICATION
    
    
                #define SHADERPASS SHADERPASS_FORWARD
                #define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING 1
                #define HAS_LIGHTLOOP 1
                #define RAYTRACING_SHADER_GRAPH_DEFAULT
                #define SHADER_LIT 1
    
    
                // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
                // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
                // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
                // to still allow us to rename the field and keyword of this node without breaking existing code.
                #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
                #endif
    
                #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
                #endif
                // end
    
                #ifndef SHADER_UNLIT
                // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
                // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
                #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                    #define VARYINGS_NEED_CULLFACE
                #endif
                #endif
    
                // Specific Material Define
            #define _AMBIENT_OCCLUSION 1
                #define _SPECULAR_OCCLUSION_FROM_AO 1
                #define _ENERGY_CONSERVING_SPECULAR 1
                
                // If we use subsurface scattering, enable output split lighting (for forward pass)
                #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
                    #define OUTPUT_SPLIT_LIGHTING
                #endif
                
                // This shader support recursive rendering for raytracing
                #define HAVE_RECURSIVE_RENDERING
                
                // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
    
                // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
                // we should have a code like this:
                // if !defined(_DISABLE_SSR_TRANSPARENT)
                // pragma multi_compile _ WRITE_NORMAL_BUFFER
                // endif
                // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
                // it based on if SSR transparent in frame settings and not (and stripper can strip it).
                // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
                // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
                // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
                #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                    #define WRITE_NORMAL_BUFFER
                #endif
                #endif
    
                #ifndef DEBUG_DISPLAY
                    // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                    // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                    #if !defined(_SURFACE_TYPE_TRANSPARENT)
                        #if SHADERPASS == SHADERPASS_FORWARD
                        #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                        #elif SHADERPASS == SHADERPASS_GBUFFER
                        #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                        #endif
                    #endif
                #endif
    
                // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
                #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                    #define _DEFERRED_CAPABLE_MATERIAL
                #endif
    
                // Translate transparent motion vector define
                #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                    #define _WRITE_TRANSPARENT_MOTION_VECTOR
                #endif
    
                // Dots Instancing
                // DotsInstancingOptions: <None>
    
                // Various properties
    
                // HybridV1InjectedBuiltinProperties: <None>
    
                // -- Graph Properties
                CBUFFER_START(UnityPerMaterial)
                float2 HeightRemap3;
                float2 HeightRemap2;
                float4 Tiling_Offset3;
                float4 Tiling_Offset0;
                float2 HeightRemap4;
                float4 Tiling_Offset2;
                float2 HeightRemap0;
                float4 LayerMask3_TexelSize;
                float4 LayerMask2_TexelSize;
                float4 LayerNormal3_TexelSize;
                float4 LayerNormal2_TexelSize;
                float2 HeightRemap1;
                float4 Tiling_Offset1;
                float4 Layer0_TexelSize;
                float4 Layer1_TexelSize;
                float4 Layer2_TexelSize;
                float4 Layer3_TexelSize;
                float UVXZScale;
                float4 LayerNormal1_TexelSize;
                float4 LayerNormal0_TexelSize;
                float4 LayerMask1_TexelSize;
                float4 LayerMask0_TexelSize;
                float heightTransition;
                float4 BaseTex_TexelSize;
                float4 BaseNormal_TexelSize;
                float4 BaseMask_TexelSize;
                float4 Tiling_Offset;
                float2 HeightRemap;
                float4 SlopeTex_TexelSize;
                float4 SlopeNormal_TexelSize;
                float4 SlopeMask_TexelSize;
                float4 Tiling_Offset4;
                float2 SlopeRemap;
                float SlopePow;
                float4 _EmissionColor;
                float _UseShadowThreshold;
                float4 _DoubleSidedConstants;
                float _BlendMode;
                float _EnableBlendModePreserveSpecularLighting;
                float _RayTracing;
                float _RefractionModel;
                CBUFFER_END
                
                // Object and Global properties
                SAMPLER(SamplerState_Linear_Repeat);
                TEXTURE2D(LayerMask3);
                SAMPLER(samplerLayerMask3);
                TEXTURE2D(LayerMask2);
                SAMPLER(samplerLayerMask2);
                TEXTURE2D(LayerNormal3);
                SAMPLER(samplerLayerNormal3);
                TEXTURE2D(LayerNormal2);
                SAMPLER(samplerLayerNormal2);
                TEXTURE2D(Layer0);
                SAMPLER(samplerLayer0);
                TEXTURE2D(Layer1);
                SAMPLER(samplerLayer1);
                TEXTURE2D(Layer2);
                SAMPLER(samplerLayer2);
                TEXTURE2D(Layer3);
                SAMPLER(samplerLayer3);
                TEXTURE2D(LayerNormal1);
                SAMPLER(samplerLayerNormal1);
                TEXTURE2D(LayerNormal0);
                SAMPLER(samplerLayerNormal0);
                TEXTURE2D(LayerMask1);
                SAMPLER(samplerLayerMask1);
                TEXTURE2D(LayerMask0);
                SAMPLER(samplerLayerMask0);
                TEXTURE2D(BaseTex);
                SAMPLER(samplerBaseTex);
                TEXTURE2D(BaseNormal);
                SAMPLER(samplerBaseNormal);
                TEXTURE2D(BaseMask);
                SAMPLER(samplerBaseMask);
                TEXTURE2D(SlopeTex);
                SAMPLER(samplerSlopeTex);
                TEXTURE2D(SlopeNormal);
                SAMPLER(samplerSlopeNormal);
                TEXTURE2D(SlopeMask);
                SAMPLER(samplerSlopeMask);
    
                // -- Property used by ScenePickingPass
                #ifdef SCENEPICKINGPASS
                float4 _SelectionID;
                #endif
    
                // -- Properties used by SceneSelectionPass
                #ifdef SCENESELECTIONPASS
                int _ObjectId;
                int _PassValue;
                #endif
    
                // Includes
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoop.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
            	#include "Assets/Shaders/GPUTerrainHeight/TerrainVertexPosition.hlsl"
                #include "Assets/Shaders/TerrainShading/HeightBlend.hlsl"
    
                // --------------------------------------------------
                // Structs and Packing
    
                struct AttributesMesh
                {
                     float3 positionOS : POSITION;
                     float3 normalOS : NORMAL;
                     float4 tangentOS : TANGENT;
                     float4 uv1 : TEXCOORD1;
                     float4 uv2 : TEXCOORD2;
                    #if UNITY_ANY_INSTANCING_ENABLED
                     uint instanceID : INSTANCEID_SEMANTIC;
                    #endif
                };
                struct VaryingsMeshToPS
                {
                    SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
                     float3 positionRWS;
                     float3 normalWS;
                     float4 tangentWS;
                     float4 texCoord1;
                     float4 texCoord2;
                    #if UNITY_ANY_INSTANCING_ENABLED
                     uint instanceID : CUSTOM_INSTANCE_ID;
                    #endif
                     float4 SplatMapColor;
                };
                struct VertexDescriptionInputs
                {
                     float3 ObjectSpaceNormal;
                     float3 ObjectSpaceTangent;
                     float3 ObjectSpacePosition;
                };
                struct SurfaceDescriptionInputs
                {
                     float3 ObjectSpaceNormal;
                     float3 WorldSpaceNormal;
                     float3 TangentSpaceNormal;
                     float3 ObjectSpacePosition;
                     float4 SplatMapColor;
                };
                struct PackedVaryingsMeshToPS
                {
                    SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
                    #if UNITY_ANY_INSTANCING_ENABLED
                     uint instanceID : CUSTOM_INSTANCE_ID;
                    #endif
                     float3 interp0 : INTERP0;
                     float3 interp1 : INTERP1;
                     float4 interp2 : INTERP2;
                     float4 interp3 : INTERP3;
                     float4 interp4 : INTERP4;
                     float4 interp5 : INTERP5;
                };
    
                PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
                {
                    PackedVaryingsMeshToPS output;
                    ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
                    output.positionCS = input.positionCS;
                    output.interp0.xyz =  input.positionRWS;
                    output.interp1.xyz =  input.normalWS;
                    output.interp2.xyzw =  input.tangentWS;
                    output.interp3.xyzw =  input.texCoord1;
                    output.interp4.xyzw =  input.texCoord2;
                    #if UNITY_ANY_INSTANCING_ENABLED
                    output.instanceID = input.instanceID;
                    #endif
                    output.interp5.xyzw =  input.SplatMapColor;
                    return output;
                }
                
                VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
                {
                    VaryingsMeshToPS output;
                    output.positionCS = input.positionCS;
                    output.positionRWS = input.interp0.xyz;
                    output.normalWS = input.interp1.xyz;
                    output.tangentWS = input.interp2.xyzw;
                    output.texCoord1 = input.interp3.xyzw;
                    output.texCoord2 = input.interp4.xyzw;
                    #if UNITY_ANY_INSTANCING_ENABLED
                    output.instanceID = input.instanceID;
                    #endif
                    output.SplatMapColor = input.interp5.xyzw;
                    return output;
                }
                
    
                // --------------------------------------------------
                // Graph
    
    
                // Graph Functions
                
                void UnityGetInstanceID_float(out float Out)
                {
                #if UNITY_ANY_INSTANCING_ENABLED
                    Out = unity_InstanceID;
                #else
                    Out = 0;
                #endif
                }
                
                void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
                {
                    RGBA = float4(R, G, B, A);
                    RGB = float3(R, G, B);
                    RG = float2(R, G);
                }
                
                void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
                {
                    Out = A / B;
                }
                
                void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
                {
                    Out = UV * Tiling + Offset;
                }
                
                struct Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float
                {
                };
                
                void SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(float4 Tiling_Offset, float2 Vector2, Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float IN, out float2 OutVector2_1)
                {
                    float2 _Property_5ea954dbdecc454b839a01badac3afd6_Out_0 = Vector2;
                    float4 _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0 = Tiling_Offset;
                    float _Split_c19978cb25c5413eaf23432179b0e3af_R_1 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[0];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_G_2 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[1];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_B_3 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[2];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_A_4 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[3];
                    float4 _Combine_387ca93b6841454bad52ea2f221d199f_RGBA_4;
                    float3 _Combine_387ca93b6841454bad52ea2f221d199f_RGB_5;
                    float2 _Combine_387ca93b6841454bad52ea2f221d199f_RG_6;
                    Unity_Combine_float(_Split_c19978cb25c5413eaf23432179b0e3af_R_1, _Split_c19978cb25c5413eaf23432179b0e3af_G_2, 0, 0, _Combine_387ca93b6841454bad52ea2f221d199f_RGBA_4, _Combine_387ca93b6841454bad52ea2f221d199f_RGB_5, _Combine_387ca93b6841454bad52ea2f221d199f_RG_6);
                    float4 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGBA_4;
                    float3 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGB_5;
                    float2 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6;
                    Unity_Combine_float(_Split_c19978cb25c5413eaf23432179b0e3af_B_3, _Split_c19978cb25c5413eaf23432179b0e3af_A_4, 0, 0, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGBA_4, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGB_5, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6);
                    float2 _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3;
                    Unity_TilingAndOffset_float(_Property_5ea954dbdecc454b839a01badac3afd6_Out_0, _Combine_387ca93b6841454bad52ea2f221d199f_RG_6, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6, _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3);
                    OutVector2_1 = _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3;
                }
                
                void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
                {
                    Out = A * B;
                }
                
                void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
                {
                    Out = A * B;
                }
                
                void Desaturate_float(float3 oldcolor, float k, out float3 newcolor){
                    float intensity = dot(oldcolor,float3(0.3,0.59,0.11));
                    newcolor.x = intensity*k + oldcolor.x*(1-k);
                    newcolor.y = intensity*k + oldcolor.y*(1-k);
                    newcolor.z = intensity*k + oldcolor.z*(1-k);
                }
                
                void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
                {
                    Out = A * B;
                }
                
                void Unity_Lerp_float(float A, float B, float T, out float Out)
                {
                    Out = lerp(A, B, T);
                }
                
                struct Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float
                {
                };
                
                void SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(UnityTexture2D Albedo, UnityTexture2D Normal, UnityTexture2D Mask, float DesaturationK, float BrightnessAtten, float2 UV, float2 HeightRemap, Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float IN, out float4 oAlbedo_0, out float4 oNormal_1, out float4 oMask_2)
                {
                    UnityTexture2D _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0 = Albedo;
                    float2 _Property_76ed35a32977448f8ea254bf6de06d33_Out_0 = UV;
                    float4 _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_R_4 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.r;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_G_5 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.g;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_B_6 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.b;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_A_7 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.a;
                    float _Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0 = BrightnessAtten;
                    float4 _Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2);
                    float _Float_f48d9dc0c16249fe8fe5b97c86e7f56c_Out_0 = -0.25;
                    float2 _Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2;
                    Unity_Multiply_float2_float2(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0, (_Float_f48d9dc0c16249fe8fe5b97c86e7f56c_Out_0.xx), _Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2);
                    float4 _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_R_4 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.r;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_G_5 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.g;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_B_6 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.b;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_A_7 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.a;
                    float4 _Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2);
                    float _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0 = DesaturationK;
                    float3 _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1;
                    Desaturate_float((_Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1);
                    float3 _Multiply_410af5ac81154a3aab73254ac228eccd_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2.xyz), _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1, _Multiply_410af5ac81154a3aab73254ac228eccd_Out_2);
                    UnityTexture2D _Property_d05972164bdd4e0189593b8dae00db03_Out_0 = Normal;
                    float4 _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0 = SAMPLE_TEXTURE2D(_Property_d05972164bdd4e0189593b8dae00db03_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d05972164bdd4e0189593b8dae00db03_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0);
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_R_4 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.r;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_G_5 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.g;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_B_6 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.b;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_A_7 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.a;
                    float4 _Multiply_4999f90cbd1848acaf20b253953c0963_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_4999f90cbd1848acaf20b253953c0963_Out_2);
                    float4 _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_d05972164bdd4e0189593b8dae00db03_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d05972164bdd4e0189593b8dae00db03_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0);
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_R_4 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.r;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_G_5 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.g;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_B_6 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.b;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_A_7 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.a;
                    float4 _Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2);
                    float3 _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1;
                    Desaturate_float((_Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1);
                    float3 _Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_4999f90cbd1848acaf20b253953c0963_Out_2.xyz), _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1, _Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2);
                    UnityTexture2D _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0 = Mask;
                    float4 _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0 = SAMPLE_TEXTURE2D(_Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_R_4 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.r;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_G_5 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.g;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_B_6 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.b;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_A_7 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.a;
                    float4 _Multiply_0b2356625aad40439a89b8519e36e62b_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_0b2356625aad40439a89b8519e36e62b_Out_2);
                    float4 _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0 = SAMPLE_TEXTURE2D(_Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_R_4 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.r;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_G_5 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.g;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_B_6 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.b;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_A_7 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.a;
                    float4 _Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2);
                    float3 _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1;
                    Desaturate_float((_Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1);
                    float3 _Multiply_3c8f32d2a057478e869493099765b841_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_0b2356625aad40439a89b8519e36e62b_Out_2.xyz), _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1, _Multiply_3c8f32d2a057478e869493099765b841_Out_2);
                    float _Split_77de2b1a3326407b985f625d91e2063b_R_1 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[0];
                    float _Split_77de2b1a3326407b985f625d91e2063b_G_2 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[1];
                    float _Split_77de2b1a3326407b985f625d91e2063b_B_3 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[2];
                    float _Split_77de2b1a3326407b985f625d91e2063b_A_4 = 0;
                    float2 _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0 = HeightRemap;
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_R_1 = _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0[0];
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_G_2 = _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0[1];
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_B_3 = 0;
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_A_4 = 0;
                    float _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3;
                    Unity_Lerp_float(_Split_0df13f6921fe4db99b01dcff93c3b978_R_1, _Split_0df13f6921fe4db99b01dcff93c3b978_G_2, _Split_77de2b1a3326407b985f625d91e2063b_B_3, _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3);
                    float4 _Combine_17dba591e95443299750f53a93613083_RGBA_4;
                    float3 _Combine_17dba591e95443299750f53a93613083_RGB_5;
                    float2 _Combine_17dba591e95443299750f53a93613083_RG_6;
                    Unity_Combine_float(_Split_77de2b1a3326407b985f625d91e2063b_R_1, _Split_77de2b1a3326407b985f625d91e2063b_G_2, _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3, _Split_77de2b1a3326407b985f625d91e2063b_A_4, _Combine_17dba591e95443299750f53a93613083_RGBA_4, _Combine_17dba591e95443299750f53a93613083_RGB_5, _Combine_17dba591e95443299750f53a93613083_RG_6);
                    oAlbedo_0 = (float4(_Multiply_410af5ac81154a3aab73254ac228eccd_Out_2, 1.0));
                    oNormal_1 = (float4(_Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2, 1.0));
                    oMask_2 = _Combine_17dba591e95443299750f53a93613083_RGBA_4;
                }
                
                void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
                {
                    Out = dot(A, B);
                }
                
                void Unity_Power_float(float A, float B, out float Out)
                {
                    Out = pow(A, B);
                }
                
                void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
                {
                    Out = smoothstep(Edge1, Edge2, In);
                }
                
                void Unity_OneMinus_float(float In, out float Out)
                {
                    Out = 1 - In;
                }
                
                void BlendByMask_float(float4 a, float4 b, float4 c, float4 d, float4 blend, out float4 ret){
                    ret = a*blend.x + b*blend.y + c*blend.z + d*blend.w;
                }
                
                void Unity_Add_float4(float4 A, float4 B, out float4 Out)
                {
                    Out = A + B;
                }
    
                // Graph Vertex
                struct VertexDescription
                {
                    float3 Position;
                    float3 Normal;
                    float3 Tangent;
                    float4 SplatMapColor;
                };
                
                VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
                {
                    VertexDescription description = (VertexDescription)0;
                    float _InstanceID_1b9fa912aec74e76aae6821c84f95467_Out_0;
                    UnityGetInstanceID_float(_InstanceID_1b9fa912aec74e76aae6821c84f95467_Out_0);
                    float3 _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_oposOS_2;
                    float4 _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_color_3;
                    float3 _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_normal_4;
                    GetTerrainVertex_float(_InstanceID_1b9fa912aec74e76aae6821c84f95467_Out_0, IN.ObjectSpacePosition, _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_oposOS_2, _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_color_3, _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_normal_4);
                    description.Position = _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_oposOS_2;
                    description.Normal = _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_normal_4;
                    description.Tangent = IN.ObjectSpaceTangent;
                    description.SplatMapColor = _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_color_3;
                    return description;
                }
    
                // Graph Pixel
                struct SurfaceDescription
                {
                    float3 BaseColor;
                    float3 Emission;
                    float Alpha;
                    float3 BentNormal;
                    float Smoothness;
                    float Occlusion;
                    float3 NormalTS;
                    float Metallic;
                    float4 VTPackedFeedback;
                };
                
                SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
                {
                    SurfaceDescription surface = (SurfaceDescription)0;
                    UnityTexture2D _Property_4e780cffb4044909a58e26eaff6361d1_Out_0 = UnityBuildTexture2DStructNoScale(BaseTex);
                    UnityTexture2D _Property_20a5bc7358e64fe8b3327adb9ce635ea_Out_0 = UnityBuildTexture2DStructNoScale(BaseNormal);
                    UnityTexture2D _Property_090d521163b9493189233a9f2e1cf5ed_Out_0 = UnityBuildTexture2DStructNoScale(BaseMask);
                    float4 _Property_6881ae016d754988b27811b95cc834ca_Out_0 = Tiling_Offset;
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_R_1 = IN.ObjectSpacePosition[0];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_G_2 = IN.ObjectSpacePosition[1];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_B_3 = IN.ObjectSpacePosition[2];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_A_4 = 0;
                    float4 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGBA_4;
                    float3 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGB_5;
                    float2 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6;
                    Unity_Combine_float(_Split_3335daa3a4b34f69a62c9c8a1c6f39b2_R_1, _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_B_3, 0, 0, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGBA_4, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGB_5, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6);
                    float _Property_8984e4bf1c26459280f9fece3c52167c_Out_0 = UVXZScale;
                    float2 _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2;
                    Unity_Divide_float2(_Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6, (_Property_8984e4bf1c26459280f9fece3c52167c_Out_0.xx), _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2);
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_737be3819d2c4f29853810a18717cae3;
                    float2 _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_6881ae016d754988b27811b95cc834ca_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1);
                    float2 _Property_dcc00367280c4dc6b11a52aa07754830_Out_0 = HeightRemap;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_6722d68456e84aecb015a07880cbbd46;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_4e780cffb4044909a58e26eaff6361d1_Out_0, _Property_20a5bc7358e64fe8b3327adb9ce635ea_Out_0, _Property_090d521163b9493189233a9f2e1cf5ed_Out_0, 0.25, 4, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1, _Property_dcc00367280c4dc6b11a52aa07754830_Out_0, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2);
                    UnityTexture2D _Property_3d7142ef79234a0ba6cda49555992a80_Out_0 = UnityBuildTexture2DStructNoScale(Layer0);
                    UnityTexture2D _Property_42e52c243a994f04944481ff3627fc2c_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal0);
                    UnityTexture2D _Property_e67647d6cf1b44bebf91845a255b522c_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask0);
                    float4 _Property_4e6c66ba03a842e482f7040c3fe163dc_Out_0 = Tiling_Offset0;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674;
                    float2 _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_4e6c66ba03a842e482f7040c3fe163dc_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1);
                    float2 _Property_8cf19c3a22e64f0a85a51c8cbf5085e7_Out_0 = HeightRemap0;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_3d7142ef79234a0ba6cda49555992a80_Out_0, _Property_42e52c243a994f04944481ff3627fc2c_Out_0, _Property_e67647d6cf1b44bebf91845a255b522c_Out_0, 0.25, 4, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1, _Property_8cf19c3a22e64f0a85a51c8cbf5085e7_Out_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2);
                    UnityTexture2D _Property_1bce6ca387e847e1a43a4534686b655f_Out_0 = UnityBuildTexture2DStructNoScale(Layer1);
                    UnityTexture2D _Property_1e7513acda3b4b20a5a028d0da4bcfb0_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal1);
                    UnityTexture2D _Property_75d4521a27cb403399759cefa7be71f2_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask1);
                    float4 _Property_e17bf3be22544a639340ddea65766b89_Out_0 = Tiling_Offset1;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_df825eb885d947429ce6daf495a641a7;
                    float2 _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_e17bf3be22544a639340ddea65766b89_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1);
                    float2 _Property_d682537de1054cf4b1eddd1680d152fb_Out_0 = HeightRemap1;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_1bce6ca387e847e1a43a4534686b655f_Out_0, _Property_1e7513acda3b4b20a5a028d0da4bcfb0_Out_0, _Property_75d4521a27cb403399759cefa7be71f2_Out_0, 0.25, 4, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1, _Property_d682537de1054cf4b1eddd1680d152fb_Out_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2);
                    UnityTexture2D _Property_b79fba6b5b1f40b88b38803dad2bb2e5_Out_0 = UnityBuildTexture2DStructNoScale(Layer2);
                    UnityTexture2D _Property_a787f1642c6d4570af8ae47ea63a59ed_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal2);
                    UnityTexture2D _Property_f4ae055a87ef48cb8df5c603ca6f72b0_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask2);
                    float4 _Property_e12db1a96427478999d081afcb59d771_Out_0 = Tiling_Offset2;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d;
                    float2 _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_e12db1a96427478999d081afcb59d771_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1);
                    float2 _Property_3be82515dad24d76b9af558757032f30_Out_0 = HeightRemap2;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_b79fba6b5b1f40b88b38803dad2bb2e5_Out_0, _Property_a787f1642c6d4570af8ae47ea63a59ed_Out_0, _Property_f4ae055a87ef48cb8df5c603ca6f72b0_Out_0, 0.25, 4, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1, _Property_3be82515dad24d76b9af558757032f30_Out_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2);
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_R_1 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[0];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_G_2 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[1];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_B_3 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[2];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_A_4 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[3];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_R_1 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[0];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_G_2 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[1];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_B_3 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[2];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_A_4 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[3];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_R_1 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[0];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_G_2 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[1];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_B_3 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[2];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_A_4 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[3];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_R_1 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[0];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_G_2 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[1];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_B_3 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[2];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_A_4 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[3];
                    float4 _Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4;
                    float3 _Combine_f97595cb40654c9a8d82c0297e7280f3_RGB_5;
                    float2 _Combine_f97595cb40654c9a8d82c0297e7280f3_RG_6;
                    Unity_Combine_float(_Split_d81e33a0495c4ac09042d2d39dd09ba5_B_3, _Split_d2ed4cee74e042da88b7348fcfe80cab_B_3, _Split_b3522eb5287e4b28baab87cc1fa16589_B_3, _Split_a4f15428b23a40ef8f25398e9cff2d7c_B_3, _Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4, _Combine_f97595cb40654c9a8d82c0297e7280f3_RGB_5, _Combine_f97595cb40654c9a8d82c0297e7280f3_RG_6);
                    UnityTexture2D _Property_8e8b4d9a2dfc42148eb69519397ecebc_Out_0 = UnityBuildTexture2DStructNoScale(Layer3);
                    UnityTexture2D _Property_1443e12ec6544d2c8e8dcc71d67adb04_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal3);
                    UnityTexture2D _Property_b8f1cfb1112b4d2e8e2fe919f5003fb3_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask3);
                    float4 _Property_d9e7ba461b95446db56c0b99fce9de5d_Out_0 = Tiling_Offset3;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13;
                    float2 _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_d9e7ba461b95446db56c0b99fce9de5d_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1);
                    float2 _Property_e5d43ace4a66401faff3165675d44af0_Out_0 = HeightRemap3;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_8e8b4d9a2dfc42148eb69519397ecebc_Out_0, _Property_1443e12ec6544d2c8e8dcc71d67adb04_Out_0, _Property_b8f1cfb1112b4d2e8e2fe919f5003fb3_Out_0, 0.25, 4, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1, _Property_e5d43ace4a66401faff3165675d44af0_Out_0, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2);
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_R_1 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[0];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_G_2 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[1];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_B_3 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[2];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_A_4 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[3];
                    UnityTexture2D _Property_edf497c59ff340a5897695b2e8e9ed68_Out_0 = UnityBuildTexture2DStructNoScale(SlopeTex);
                    UnityTexture2D _Property_ae03f8d1bb284168ae1cb40c2c8d7dce_Out_0 = UnityBuildTexture2DStructNoScale(SlopeNormal);
                    UnityTexture2D _Property_35050279a32b481b878853831820cb33_Out_0 = UnityBuildTexture2DStructNoScale(SlopeMask);
                    float4 _Property_a3c340f0d1f647858c0d27fc6fa0d127_Out_0 = Tiling_Offset4;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67;
                    float2 _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_a3c340f0d1f647858c0d27fc6fa0d127_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1);
                    float2 _Property_8a3f864a5b9c469b92480bb635123790_Out_0 = HeightRemap4;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_edf497c59ff340a5897695b2e8e9ed68_Out_0, _Property_ae03f8d1bb284168ae1cb40c2c8d7dce_Out_0, _Property_35050279a32b481b878853831820cb33_Out_0, 0.25, 4, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1, _Property_8a3f864a5b9c469b92480bb635123790_Out_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2);
                    float _Split_015a6ee9887b47abb21193d18e609740_R_1 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[0];
                    float _Split_015a6ee9887b47abb21193d18e609740_G_2 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[1];
                    float _Split_015a6ee9887b47abb21193d18e609740_B_3 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[2];
                    float _Split_015a6ee9887b47abb21193d18e609740_A_4 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[3];
                    float4 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4;
                    float3 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGB_5;
                    float2 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RG_6;
                    Unity_Combine_float(_Split_d87c9f86d0a94f8b9b66cbcb29d89dde_B_3, _Split_015a6ee9887b47abb21193d18e609740_B_3, 0, 0, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGB_5, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RG_6);
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_R_1 = IN.SplatMapColor[0];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_G_2 = IN.SplatMapColor[1];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_B_3 = IN.SplatMapColor[2];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_A_4 = IN.SplatMapColor[3];
                    float4 _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4;
                    float3 _Combine_7b79ed205a4b435d8742217505a4c51d_RGB_5;
                    float2 _Combine_7b79ed205a4b435d8742217505a4c51d_RG_6;
                    Unity_Combine_float(1, _Split_ea099c0905af42a6804ca0dc2f58dc2f_R_1, _Split_ea099c0905af42a6804ca0dc2f58dc2f_G_2, _Split_ea099c0905af42a6804ca0dc2f58dc2f_B_3, _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4, _Combine_7b79ed205a4b435d8742217505a4c51d_RGB_5, _Combine_7b79ed205a4b435d8742217505a4c51d_RG_6);
                    float2 _Property_5538a1bac07f487589432be4f79dd05e_Out_0 = SlopeRemap;
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_R_1 = _Property_5538a1bac07f487589432be4f79dd05e_Out_0[0];
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_G_2 = _Property_5538a1bac07f487589432be4f79dd05e_Out_0[1];
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_B_3 = 0;
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_A_4 = 0;
                    float _DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2;
                    Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(0, 1, 0), _DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2);
                    float _Property_795a1803a8484214b987093ec034ab6a_Out_0 = SlopePow;
                    float _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2;
                    Unity_Power_float(_DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2, _Property_795a1803a8484214b987093ec034ab6a_Out_0, _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2);
                    float _Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3;
                    Unity_Smoothstep_float(_Split_03a4c3769cad421fb634dee3fa2beefb_R_1, _Split_03a4c3769cad421fb634dee3fa2beefb_G_2, _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2, _Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3);
                    float _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1;
                    Unity_OneMinus_float(_Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3, _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1);
                    float4 _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4;
                    float3 _Combine_9702e823fbe443b4b07afb499b6912a4_RGB_5;
                    float2 _Combine_9702e823fbe443b4b07afb499b6912a4_RG_6;
                    Unity_Combine_float(_Split_ea099c0905af42a6804ca0dc2f58dc2f_A_4, _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1, 0, 0, _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4, _Combine_9702e823fbe443b4b07afb499b6912a4_RGB_5, _Combine_9702e823fbe443b4b07afb499b6912a4_RG_6);
                    float _Property_d5cf363bc21a4f92a00fac464b9b11cf_Out_0 = heightTransition;
                    float4 _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5;
                    float4 _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6;
                    HeightBlend8Layers_float(_Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4, _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4, _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4, _Property_d5cf363bc21a4f92a00fac464b9b11cf_Out_0, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6);
                    float4 _BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5);
                    float4 _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5);
                    float4 _Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5, _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5, _Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2);
                    float4 _BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5);
                    float4 _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5);
                    float4 _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5, _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5, _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2);
                    float _Split_d9a7a90627444523a2cda58b36d68116_R_1 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[0];
                    float _Split_d9a7a90627444523a2cda58b36d68116_G_2 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[1];
                    float _Split_d9a7a90627444523a2cda58b36d68116_B_3 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[2];
                    float _Split_d9a7a90627444523a2cda58b36d68116_A_4 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[3];
                    float4 _BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5);
                    float4 _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5);
                    float4 _Add_090184f4bd18493ca37179ea1a8364d0_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5, _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5, _Add_090184f4bd18493ca37179ea1a8364d0_Out_2);
                    surface.BaseColor = (_Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2.xyz);
                    surface.Emission = float3(0, 0, 0);
                    surface.Alpha = 1;
                    surface.BentNormal = IN.TangentSpaceNormal;
                    surface.Smoothness = _Split_d9a7a90627444523a2cda58b36d68116_A_4;
                    surface.Occlusion = _Split_d9a7a90627444523a2cda58b36d68116_G_2;
                    surface.NormalTS = (_Add_090184f4bd18493ca37179ea1a8364d0_Out_2.xyz);
                    surface.Metallic = _Split_d9a7a90627444523a2cda58b36d68116_R_1;
                    {
                        surface.VTPackedFeedback = float4(1.0f,1.0f,1.0f,.0f);
                    }
                    return surface;
                }
    
                // --------------------------------------------------
                // Build Graph Inputs
    
                
                VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
                {
                    VertexDescriptionInputs output;
                    ZERO_INITIALIZE(VertexDescriptionInputs, output);
                
                    output.ObjectSpaceNormal =           input.normalOS;
                    output.ObjectSpaceTangent =          input.tangentOS.xyz;
                    output.ObjectSpacePosition =         input.positionOS;
                
                    return output;
                }
                
                AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
                #ifdef USE_CUSTOMINTERP_SUBSTRUCT
                    #ifdef TESSELLATION_ON
                    , inout VaryingsMeshToDS varyings
                    #else
                    , inout VaryingsMeshToPS varyings
                    #endif
                #endif
                #ifdef HAVE_VFX_MODIFICATION
                        , AttributesElement element
                #endif
                    )
                {
                    // build graph inputs
                    VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
                    // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
                
                    // evaluate vertex graph
                #ifdef HAVE_VFX_MODIFICATION
                    GraphProperties properties;
                    ZERO_INITIALIZE(GraphProperties, properties);
                
                    // Fetch the vertex graph properties for the particle instance.
                    GetElementVertexProperties(element, properties);
                
                    VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
                #else
                    VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
                #endif
                
                    // copy graph output to the results
                    input.positionOS = vertexDescription.Position;
                    input.normalOS = vertexDescription.Normal;
                    input.tangentOS.xyz = vertexDescription.Tangent;
                
                    varyings.SplatMapColor = vertexDescription.SplatMapColor;
                
                    return input;
                }
                
                FragInputs BuildFragInputs(VaryingsMeshToPS input)
                {
                    FragInputs output;
                    ZERO_INITIALIZE(FragInputs, output);
                
                    // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
                    // TODO: this is a really poor workaround, but the variable is used in a bunch of places
                    // to compute normals which are then passed on elsewhere to compute other values...
                    output.tangentToWorld = k_identity3x3;
                    output.positionSS = input.positionCS;       // input.positionCS is SV_Position
                
                    output.positionRWS = input.positionRWS;
                    output.tangentToWorld = BuildTangentToWorld(input.tangentWS, input.normalWS);
                    output.texCoord1 = input.texCoord1;
                    output.texCoord2 = input.texCoord2;
                
                #ifdef HAVE_VFX_MODIFICATION
                    // FragInputs from VFX come from two places: Interpolator or CBuffer.
                    /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
                
                #endif
                
                    // splice point to copy custom interpolator fields from varyings to frag inputs
                    output.customInterpolators.SplatMapColor = input.SplatMapColor;
                
                    return output;
                }
                
                // existing HDRP code uses the combined function to go directly from packed to frag inputs
                FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
                {
                    UNITY_SETUP_INSTANCE_ID(input);
                    VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
                    return BuildFragInputs(unpacked);
                }
                
                SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
                {
                    SurfaceDescriptionInputs output;
                    ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
                
                    output.WorldSpaceNormal =            normalize(input.tangentToWorld[2].xyz);
                    #if defined(SHADER_STAGE_RAY_TRACING)
                    output.ObjectSpaceNormal =           mul(output.WorldSpaceNormal, (float3x3) ObjectToWorld3x4());
                    #else
                    output.ObjectSpaceNormal =           normalize(mul(output.WorldSpaceNormal, (float3x3) UNITY_MATRIX_M));           // transposed multiplication by inverse matrix to handle normal scale
                    #endif
                    output.TangentSpaceNormal =          float3(0.0f, 0.0f, 1.0f);
                    output.ObjectSpacePosition =         TransformWorldToObject(input.positionRWS);
                
                    // splice point to copy frag inputs custom interpolator pack into the SDI
                    output.SplatMapColor = input.customInterpolators.SplatMapColor;
                
                    return output;
                }
                
    
                // --------------------------------------------------
                // Build Surface Data (Specific Material)
    
            void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
                {
                    ZERO_INITIALIZE(SurfaceData, surfaceData);
                
                    // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
                    // however specularOcclusion can come from the graph, so need to be init here so it can be override.
                    surfaceData.specularOcclusion = 1.0;
                
                    surfaceData.baseColor =                 surfaceDescription.BaseColor;
                    surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
                    surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
                    surfaceData.metallic =                  surfaceDescription.Metallic;
                
                    #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                        if (_EnableSSRefraction)
                        {
                
                            surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                            surfaceDescription.Alpha = 1.0;
                        }
                        else
                        {
                            surfaceData.ior = 1.0;
                            surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                            surfaceData.atDistance = 1.0;
                            surfaceData.transmittanceMask = 0.0;
                            surfaceDescription.Alpha = 1.0;
                        }
                    #else
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                    #endif
                
                    // These static material feature allow compile time optimization
                    surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
                    #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_TRANSMISSION
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_ANISOTROPY
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
                    #endif
                
                    #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                        // Require to have setup baseColor
                        // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                        surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
                    #endif
                
                    #ifdef _DOUBLESIDED_ON
                        float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                    #else
                        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                    #endif
                
                    // normal delivered to master node
                    GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
                
                    surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                
                    surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
                
                
                    #if HAVE_DECALS
                        if (_EnableDecals)
                        {
                            float alpha = 1.0;
                            alpha = surfaceDescription.Alpha;
                
                            // Both uses and modifies 'surfaceData.normalWS'.
                            DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                            ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                        }
                    #endif
                
                    bentNormalWS = surfaceData.normalWS;
                
                    surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
                
                    #ifdef DEBUG_DISPLAY
                        if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                        {
                            // TODO: need to update mip info
                            surfaceData.metallic = 0;
                        }
                
                        // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                        // as it can modify attribute use for static lighting
                        ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
                    #endif
                
                    // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
                    // If user provide bent normal then we process a better term
                    #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                        // Just use the value passed through via the slot (not active otherwise)
                    #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                        // If we have bent normal and ambient occlusion, process a specular occlusion
                        surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                    #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                        surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                    #endif
                
                    #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                        surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                    #endif
                }
                
    
                // --------------------------------------------------
                // Get Surface And BuiltinData
    
                void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
                {
                    // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                    #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                    #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                    #endif
                    #endif
    
                    #ifndef SHADER_UNLIT
                    #ifdef _DOUBLESIDED_ON
                        float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                    #else
                        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                    #endif
    
                    ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                    #endif // SHADER_UNLIT
    
                    SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
    
                    #if defined(HAVE_VFX_MODIFICATION)
                    GraphProperties properties;
                    ZERO_INITIALIZE(GraphProperties, properties);
    
                    GetElementPixelProperties(fragInputs, properties);
    
                    SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                    #else
                    SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                    #endif
    
                    // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                    // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                    #ifdef _ALPHATEST_ON
                        float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                        #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                        // The TransparentDepthPrepass is also used with SSR transparent.
                        // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                        // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                        #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                        // DepthPostpass always use its own alpha threshold
                        alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                        #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                        // If use shadow threshold isn't enable we don't allow any test
                        #endif
    
                        GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                    #endif
    
                    #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                    #endif
    
                    #ifndef SHADER_UNLIT
                    float3 bentNormalWS;
                    BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
    
                    // Builtin Data
                    // For back lighting we use the oposite vertex normal
                    InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
    
                    #else
                    BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
    
                    ZERO_INITIALIZE(BuiltinData, builtinData); // No call to InitBuiltinData as we don't have any lighting
                    builtinData.opacity = surfaceDescription.Alpha;
    
                    #if defined(DEBUG_DISPLAY)
                        // Light Layers are currently not used for the Unlit shader (because it is not lit)
                        // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                        // display in the light layers visualization mode, therefore we need the renderingLayers
                        builtinData.renderingLayers = GetMeshRenderingLightLayer();
                    #endif
    
                    #endif // SHADER_UNLIT
    
                    #ifdef _ALPHATEST_ON
                        // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                        builtinData.alphaClipTreshold = alphaCutoff;
                    #endif
    
                    // override sampleBakedGI - not used by Unlit
    
            		// If we want to force forward emissive and we have GBuffer pass, don't do anything
            		#if !(SHADERPASS == SHADERPASS_GBUFFER && defined(_FORCE_FORWARD_EMISSIVE))
                    builtinData.emissiveColor = surfaceDescription.Emission;
            		#endif
    
                    // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                    // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                    // This is a limitation of the current MRT approach.
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
    
                    #if _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
                    #endif
    
                    // TODO: We should generate distortion / distortionBlur for non distortion pass
                    #if (SHADERPASS == SHADERPASS_DISTORTION)
                    builtinData.distortion = surfaceDescription.Distortion;
                    builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                    #endif
    
                    #ifndef SHADER_UNLIT
                    // PostInitBuiltinData call ApplyDebugToBuiltinData
                    PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                    #else
                    ApplyDebugToBuiltinData(builtinData);
                    #endif
    
                    RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
                }
    
                // --------------------------------------------------
                // Main
    
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassForward.hlsl"
    
                // --------------------------------------------------
                // Visual Effect Vertex Invocations
    
            	#ifdef HAVE_VFX_MODIFICATION
            	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
            	#endif
    
                ENDHLSL
            }
            Pass
            {
                Name "RayTracingPrepass"
                Tags
                {
                    "LightMode" = "RayTracingPrepass"
                }
    
                // Render State
                Cull [_CullMode]
                Blend One Zero
                ZWrite On
    
                // Debug
                // <None>
    
                // --------------------------------------------------
                // Pass
    
                HLSLPROGRAM
    
                // Pragmas
                #pragma target 4.5
                #pragma vertex Vert
                #pragma fragment Frag
                #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
                #pragma multi_compile_instancing
                #pragma instancing_options procedural:setupProcedural
    
                // Keywords
                #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
                #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
                #pragma shader_feature_local _ _DOUBLESIDED_ON
                #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
                #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
                #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
                #pragma shader_feature_local_fragment _ _DISABLE_DECALS
                #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
                #pragma shader_feature_local_fragment _ _DISABLE_SSR
                #pragma shader_feature_local_raytracing _ _DISABLE_SSR
                #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
                #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
                #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
                #pragma shader_feature _ _FORCE_FORWARD_EMISSIVE
                // GraphKeywords: <None>
    
                // For custom interpolators to inject a substruct definition before FragInputs definition,
                // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
                struct CustomInterpolators
                {
                    float4 SplatMapColor;
                };
                #define USE_CUSTOMINTERP_SUBSTRUCT
                
    
    
                // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
            	#ifdef HAVE_VFX_MODIFICATION
            	struct FragInputsVFX
                {
                    /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
                };
                #endif
    
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
            	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
    
                // --------------------------------------------------
                // Defines
    
                // Attribute
                #define ATTRIBUTES_NEED_NORMAL
                #define ATTRIBUTES_NEED_TANGENT
                #define VARYINGS_NEED_POSITION_WS
                #define VARYINGS_NEED_TANGENT_TO_WORLD
    
                #define HAVE_MESH_MODIFICATION
    
    
                #define SHADERPASS SHADERPASS_CONSTANT
                #define RAYTRACING_SHADER_GRAPH_DEFAULT
    
    
                // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
                // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
                // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
                // to still allow us to rename the field and keyword of this node without breaking existing code.
                #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
                #endif
    
                #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
                #endif
                // end
    
                #ifndef SHADER_UNLIT
                // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
                // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
                #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                    #define VARYINGS_NEED_CULLFACE
                #endif
                #endif
    
                // Specific Material Define
            #define _AMBIENT_OCCLUSION 1
                #define _SPECULAR_OCCLUSION_FROM_AO 1
                #define _ENERGY_CONSERVING_SPECULAR 1
                
                // If we use subsurface scattering, enable output split lighting (for forward pass)
                #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
                    #define OUTPUT_SPLIT_LIGHTING
                #endif
                
                // This shader support recursive rendering for raytracing
                #define HAVE_RECURSIVE_RENDERING
                
                // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
    
                // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
                // we should have a code like this:
                // if !defined(_DISABLE_SSR_TRANSPARENT)
                // pragma multi_compile _ WRITE_NORMAL_BUFFER
                // endif
                // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
                // it based on if SSR transparent in frame settings and not (and stripper can strip it).
                // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
                // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
                // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
                #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                    #define WRITE_NORMAL_BUFFER
                #endif
                #endif
    
                #ifndef DEBUG_DISPLAY
                    // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                    // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                    #if !defined(_SURFACE_TYPE_TRANSPARENT)
                        #if SHADERPASS == SHADERPASS_FORWARD
                        #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                        #elif SHADERPASS == SHADERPASS_GBUFFER
                        #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                        #endif
                    #endif
                #endif
    
                // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
                #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                    #define _DEFERRED_CAPABLE_MATERIAL
                #endif
    
                // Translate transparent motion vector define
                #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                    #define _WRITE_TRANSPARENT_MOTION_VECTOR
                #endif
    
                // Dots Instancing
                // DotsInstancingOptions: <None>
    
                // Various properties
    
                // HybridV1InjectedBuiltinProperties: <None>
    
                // -- Graph Properties
                CBUFFER_START(UnityPerMaterial)
                float2 HeightRemap3;
                float2 HeightRemap2;
                float4 Tiling_Offset3;
                float4 Tiling_Offset0;
                float2 HeightRemap4;
                float4 Tiling_Offset2;
                float2 HeightRemap0;
                float4 LayerMask3_TexelSize;
                float4 LayerMask2_TexelSize;
                float4 LayerNormal3_TexelSize;
                float4 LayerNormal2_TexelSize;
                float2 HeightRemap1;
                float4 Tiling_Offset1;
                float4 Layer0_TexelSize;
                float4 Layer1_TexelSize;
                float4 Layer2_TexelSize;
                float4 Layer3_TexelSize;
                float UVXZScale;
                float4 LayerNormal1_TexelSize;
                float4 LayerNormal0_TexelSize;
                float4 LayerMask1_TexelSize;
                float4 LayerMask0_TexelSize;
                float heightTransition;
                float4 BaseTex_TexelSize;
                float4 BaseNormal_TexelSize;
                float4 BaseMask_TexelSize;
                float4 Tiling_Offset;
                float2 HeightRemap;
                float4 SlopeTex_TexelSize;
                float4 SlopeNormal_TexelSize;
                float4 SlopeMask_TexelSize;
                float4 Tiling_Offset4;
                float2 SlopeRemap;
                float SlopePow;
                float4 _EmissionColor;
                float _UseShadowThreshold;
                float4 _DoubleSidedConstants;
                float _BlendMode;
                float _EnableBlendModePreserveSpecularLighting;
                float _RayTracing;
                float _RefractionModel;
                CBUFFER_END
                
                // Object and Global properties
                SAMPLER(SamplerState_Linear_Repeat);
                TEXTURE2D(LayerMask3);
                SAMPLER(samplerLayerMask3);
                TEXTURE2D(LayerMask2);
                SAMPLER(samplerLayerMask2);
                TEXTURE2D(LayerNormal3);
                SAMPLER(samplerLayerNormal3);
                TEXTURE2D(LayerNormal2);
                SAMPLER(samplerLayerNormal2);
                TEXTURE2D(Layer0);
                SAMPLER(samplerLayer0);
                TEXTURE2D(Layer1);
                SAMPLER(samplerLayer1);
                TEXTURE2D(Layer2);
                SAMPLER(samplerLayer2);
                TEXTURE2D(Layer3);
                SAMPLER(samplerLayer3);
                TEXTURE2D(LayerNormal1);
                SAMPLER(samplerLayerNormal1);
                TEXTURE2D(LayerNormal0);
                SAMPLER(samplerLayerNormal0);
                TEXTURE2D(LayerMask1);
                SAMPLER(samplerLayerMask1);
                TEXTURE2D(LayerMask0);
                SAMPLER(samplerLayerMask0);
                TEXTURE2D(BaseTex);
                SAMPLER(samplerBaseTex);
                TEXTURE2D(BaseNormal);
                SAMPLER(samplerBaseNormal);
                TEXTURE2D(BaseMask);
                SAMPLER(samplerBaseMask);
                TEXTURE2D(SlopeTex);
                SAMPLER(samplerSlopeTex);
                TEXTURE2D(SlopeNormal);
                SAMPLER(samplerSlopeNormal);
                TEXTURE2D(SlopeMask);
                SAMPLER(samplerSlopeMask);
    
                // -- Property used by ScenePickingPass
                #ifdef SCENEPICKINGPASS
                float4 _SelectionID;
                #endif
    
                // -- Properties used by SceneSelectionPass
                #ifdef SCENESELECTIONPASS
                int _ObjectId;
                int _PassValue;
                #endif
    
                // Includes
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
            	#include "Assets/Shaders/GPUTerrainHeight/TerrainVertexPosition.hlsl"
                #include "Assets/Shaders/TerrainShading/HeightBlend.hlsl"
    
                // --------------------------------------------------
                // Structs and Packing
    
                struct AttributesMesh
                {
                     float3 positionOS : POSITION;
                     float3 normalOS : NORMAL;
                     float4 tangentOS : TANGENT;
                    #if UNITY_ANY_INSTANCING_ENABLED
                     uint instanceID : INSTANCEID_SEMANTIC;
                    #endif
                };
                struct VaryingsMeshToPS
                {
                    SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
                     float3 positionRWS;
                     float3 normalWS;
                     float4 tangentWS;
                    #if UNITY_ANY_INSTANCING_ENABLED
                     uint instanceID : CUSTOM_INSTANCE_ID;
                    #endif
                     float4 SplatMapColor;
                };
                struct VertexDescriptionInputs
                {
                     float3 ObjectSpaceNormal;
                     float3 ObjectSpaceTangent;
                     float3 ObjectSpacePosition;
                };
                struct SurfaceDescriptionInputs
                {
                     float3 ObjectSpaceNormal;
                     float3 WorldSpaceNormal;
                     float3 TangentSpaceNormal;
                     float3 ObjectSpacePosition;
                     float4 SplatMapColor;
                };
                struct PackedVaryingsMeshToPS
                {
                    SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
                    #if UNITY_ANY_INSTANCING_ENABLED
                     uint instanceID : CUSTOM_INSTANCE_ID;
                    #endif
                     float3 interp0 : INTERP0;
                     float3 interp1 : INTERP1;
                     float4 interp2 : INTERP2;
                     float4 interp3 : INTERP3;
                };
    
                PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
                {
                    PackedVaryingsMeshToPS output;
                    ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
                    output.positionCS = input.positionCS;
                    output.interp0.xyz =  input.positionRWS;
                    output.interp1.xyz =  input.normalWS;
                    output.interp2.xyzw =  input.tangentWS;
                    #if UNITY_ANY_INSTANCING_ENABLED
                    output.instanceID = input.instanceID;
                    #endif
                    output.interp3.xyzw =  input.SplatMapColor;
                    return output;
                }
                
                VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
                {
                    VaryingsMeshToPS output;
                    output.positionCS = input.positionCS;
                    output.positionRWS = input.interp0.xyz;
                    output.normalWS = input.interp1.xyz;
                    output.tangentWS = input.interp2.xyzw;
                    #if UNITY_ANY_INSTANCING_ENABLED
                    output.instanceID = input.instanceID;
                    #endif
                    output.SplatMapColor = input.interp3.xyzw;
                    return output;
                }
                
    
                // --------------------------------------------------
                // Graph
    
    
                // Graph Functions
                
                void UnityGetInstanceID_float(out float Out)
                {
                #if UNITY_ANY_INSTANCING_ENABLED
                    Out = unity_InstanceID;
                #else
                    Out = 0;
                #endif
                }
                
                void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
                {
                    RGBA = float4(R, G, B, A);
                    RGB = float3(R, G, B);
                    RG = float2(R, G);
                }
                
                void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
                {
                    Out = A / B;
                }
                
                void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
                {
                    Out = UV * Tiling + Offset;
                }
                
                struct Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float
                {
                };
                
                void SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(float4 Tiling_Offset, float2 Vector2, Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float IN, out float2 OutVector2_1)
                {
                    float2 _Property_5ea954dbdecc454b839a01badac3afd6_Out_0 = Vector2;
                    float4 _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0 = Tiling_Offset;
                    float _Split_c19978cb25c5413eaf23432179b0e3af_R_1 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[0];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_G_2 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[1];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_B_3 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[2];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_A_4 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[3];
                    float4 _Combine_387ca93b6841454bad52ea2f221d199f_RGBA_4;
                    float3 _Combine_387ca93b6841454bad52ea2f221d199f_RGB_5;
                    float2 _Combine_387ca93b6841454bad52ea2f221d199f_RG_6;
                    Unity_Combine_float(_Split_c19978cb25c5413eaf23432179b0e3af_R_1, _Split_c19978cb25c5413eaf23432179b0e3af_G_2, 0, 0, _Combine_387ca93b6841454bad52ea2f221d199f_RGBA_4, _Combine_387ca93b6841454bad52ea2f221d199f_RGB_5, _Combine_387ca93b6841454bad52ea2f221d199f_RG_6);
                    float4 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGBA_4;
                    float3 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGB_5;
                    float2 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6;
                    Unity_Combine_float(_Split_c19978cb25c5413eaf23432179b0e3af_B_3, _Split_c19978cb25c5413eaf23432179b0e3af_A_4, 0, 0, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGBA_4, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGB_5, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6);
                    float2 _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3;
                    Unity_TilingAndOffset_float(_Property_5ea954dbdecc454b839a01badac3afd6_Out_0, _Combine_387ca93b6841454bad52ea2f221d199f_RG_6, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6, _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3);
                    OutVector2_1 = _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3;
                }
                
                void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
                {
                    Out = A * B;
                }
                
                void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
                {
                    Out = A * B;
                }
                
                void Desaturate_float(float3 oldcolor, float k, out float3 newcolor){
                    float intensity = dot(oldcolor,float3(0.3,0.59,0.11));
                    newcolor.x = intensity*k + oldcolor.x*(1-k);
                    newcolor.y = intensity*k + oldcolor.y*(1-k);
                    newcolor.z = intensity*k + oldcolor.z*(1-k);
                }
                
                void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
                {
                    Out = A * B;
                }
                
                void Unity_Lerp_float(float A, float B, float T, out float Out)
                {
                    Out = lerp(A, B, T);
                }
                
                struct Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float
                {
                };
                
                void SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(UnityTexture2D Albedo, UnityTexture2D Normal, UnityTexture2D Mask, float DesaturationK, float BrightnessAtten, float2 UV, float2 HeightRemap, Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float IN, out float4 oAlbedo_0, out float4 oNormal_1, out float4 oMask_2)
                {
                    UnityTexture2D _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0 = Albedo;
                    float2 _Property_76ed35a32977448f8ea254bf6de06d33_Out_0 = UV;
                    float4 _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_R_4 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.r;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_G_5 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.g;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_B_6 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.b;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_A_7 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.a;
                    float _Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0 = BrightnessAtten;
                    float4 _Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2);
                    float _Float_f48d9dc0c16249fe8fe5b97c86e7f56c_Out_0 = -0.25;
                    float2 _Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2;
                    Unity_Multiply_float2_float2(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0, (_Float_f48d9dc0c16249fe8fe5b97c86e7f56c_Out_0.xx), _Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2);
                    float4 _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_R_4 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.r;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_G_5 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.g;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_B_6 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.b;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_A_7 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.a;
                    float4 _Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2);
                    float _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0 = DesaturationK;
                    float3 _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1;
                    Desaturate_float((_Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1);
                    float3 _Multiply_410af5ac81154a3aab73254ac228eccd_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2.xyz), _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1, _Multiply_410af5ac81154a3aab73254ac228eccd_Out_2);
                    UnityTexture2D _Property_d05972164bdd4e0189593b8dae00db03_Out_0 = Normal;
                    float4 _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0 = SAMPLE_TEXTURE2D(_Property_d05972164bdd4e0189593b8dae00db03_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d05972164bdd4e0189593b8dae00db03_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0);
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_R_4 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.r;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_G_5 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.g;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_B_6 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.b;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_A_7 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.a;
                    float4 _Multiply_4999f90cbd1848acaf20b253953c0963_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_4999f90cbd1848acaf20b253953c0963_Out_2);
                    float4 _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_d05972164bdd4e0189593b8dae00db03_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d05972164bdd4e0189593b8dae00db03_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0);
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_R_4 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.r;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_G_5 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.g;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_B_6 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.b;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_A_7 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.a;
                    float4 _Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2);
                    float3 _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1;
                    Desaturate_float((_Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1);
                    float3 _Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_4999f90cbd1848acaf20b253953c0963_Out_2.xyz), _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1, _Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2);
                    UnityTexture2D _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0 = Mask;
                    float4 _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0 = SAMPLE_TEXTURE2D(_Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_R_4 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.r;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_G_5 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.g;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_B_6 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.b;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_A_7 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.a;
                    float4 _Multiply_0b2356625aad40439a89b8519e36e62b_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_0b2356625aad40439a89b8519e36e62b_Out_2);
                    float4 _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0 = SAMPLE_TEXTURE2D(_Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_R_4 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.r;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_G_5 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.g;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_B_6 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.b;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_A_7 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.a;
                    float4 _Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2);
                    float3 _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1;
                    Desaturate_float((_Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1);
                    float3 _Multiply_3c8f32d2a057478e869493099765b841_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_0b2356625aad40439a89b8519e36e62b_Out_2.xyz), _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1, _Multiply_3c8f32d2a057478e869493099765b841_Out_2);
                    float _Split_77de2b1a3326407b985f625d91e2063b_R_1 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[0];
                    float _Split_77de2b1a3326407b985f625d91e2063b_G_2 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[1];
                    float _Split_77de2b1a3326407b985f625d91e2063b_B_3 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[2];
                    float _Split_77de2b1a3326407b985f625d91e2063b_A_4 = 0;
                    float2 _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0 = HeightRemap;
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_R_1 = _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0[0];
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_G_2 = _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0[1];
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_B_3 = 0;
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_A_4 = 0;
                    float _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3;
                    Unity_Lerp_float(_Split_0df13f6921fe4db99b01dcff93c3b978_R_1, _Split_0df13f6921fe4db99b01dcff93c3b978_G_2, _Split_77de2b1a3326407b985f625d91e2063b_B_3, _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3);
                    float4 _Combine_17dba591e95443299750f53a93613083_RGBA_4;
                    float3 _Combine_17dba591e95443299750f53a93613083_RGB_5;
                    float2 _Combine_17dba591e95443299750f53a93613083_RG_6;
                    Unity_Combine_float(_Split_77de2b1a3326407b985f625d91e2063b_R_1, _Split_77de2b1a3326407b985f625d91e2063b_G_2, _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3, _Split_77de2b1a3326407b985f625d91e2063b_A_4, _Combine_17dba591e95443299750f53a93613083_RGBA_4, _Combine_17dba591e95443299750f53a93613083_RGB_5, _Combine_17dba591e95443299750f53a93613083_RG_6);
                    oAlbedo_0 = (float4(_Multiply_410af5ac81154a3aab73254ac228eccd_Out_2, 1.0));
                    oNormal_1 = (float4(_Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2, 1.0));
                    oMask_2 = _Combine_17dba591e95443299750f53a93613083_RGBA_4;
                }
                
                void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
                {
                    Out = dot(A, B);
                }
                
                void Unity_Power_float(float A, float B, out float Out)
                {
                    Out = pow(A, B);
                }
                
                void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
                {
                    Out = smoothstep(Edge1, Edge2, In);
                }
                
                void Unity_OneMinus_float(float In, out float Out)
                {
                    Out = 1 - In;
                }
                
                void BlendByMask_float(float4 a, float4 b, float4 c, float4 d, float4 blend, out float4 ret){
                    ret = a*blend.x + b*blend.y + c*blend.z + d*blend.w;
                }
                
                void Unity_Add_float4(float4 A, float4 B, out float4 Out)
                {
                    Out = A + B;
                }
    
                // Graph Vertex
                struct VertexDescription
                {
                    float3 Position;
                    float3 Normal;
                    float3 Tangent;
                    float4 SplatMapColor;
                };
                
                VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
                {
                    VertexDescription description = (VertexDescription)0;
                    float _InstanceID_1b9fa912aec74e76aae6821c84f95467_Out_0;
                    UnityGetInstanceID_float(_InstanceID_1b9fa912aec74e76aae6821c84f95467_Out_0);
                    float3 _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_oposOS_2;
                    float4 _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_color_3;
                    float3 _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_normal_4;
                    GetTerrainVertex_float(_InstanceID_1b9fa912aec74e76aae6821c84f95467_Out_0, IN.ObjectSpacePosition, _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_oposOS_2, _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_color_3, _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_normal_4);
                    description.Position = _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_oposOS_2;
                    description.Normal = _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_normal_4;
                    description.Tangent = IN.ObjectSpaceTangent;
                    description.SplatMapColor = _GetTerrainVertexCustomFunction_e97874afe0464ab3bad388ede37423f5_color_3;
                    return description;
                }
    
                // Graph Pixel
                struct SurfaceDescription
                {
                    float3 BaseColor;
                    float3 Emission;
                    float Alpha;
                    float3 BentNormal;
                    float Smoothness;
                    float Occlusion;
                    float3 NormalTS;
                    float Metallic;
                };
                
                SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
                {
                    SurfaceDescription surface = (SurfaceDescription)0;
                    UnityTexture2D _Property_4e780cffb4044909a58e26eaff6361d1_Out_0 = UnityBuildTexture2DStructNoScale(BaseTex);
                    UnityTexture2D _Property_20a5bc7358e64fe8b3327adb9ce635ea_Out_0 = UnityBuildTexture2DStructNoScale(BaseNormal);
                    UnityTexture2D _Property_090d521163b9493189233a9f2e1cf5ed_Out_0 = UnityBuildTexture2DStructNoScale(BaseMask);
                    float4 _Property_6881ae016d754988b27811b95cc834ca_Out_0 = Tiling_Offset;
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_R_1 = IN.ObjectSpacePosition[0];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_G_2 = IN.ObjectSpacePosition[1];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_B_3 = IN.ObjectSpacePosition[2];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_A_4 = 0;
                    float4 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGBA_4;
                    float3 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGB_5;
                    float2 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6;
                    Unity_Combine_float(_Split_3335daa3a4b34f69a62c9c8a1c6f39b2_R_1, _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_B_3, 0, 0, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGBA_4, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGB_5, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6);
                    float _Property_8984e4bf1c26459280f9fece3c52167c_Out_0 = UVXZScale;
                    float2 _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2;
                    Unity_Divide_float2(_Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6, (_Property_8984e4bf1c26459280f9fece3c52167c_Out_0.xx), _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2);
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_737be3819d2c4f29853810a18717cae3;
                    float2 _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_6881ae016d754988b27811b95cc834ca_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1);
                    float2 _Property_dcc00367280c4dc6b11a52aa07754830_Out_0 = HeightRemap;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_6722d68456e84aecb015a07880cbbd46;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_4e780cffb4044909a58e26eaff6361d1_Out_0, _Property_20a5bc7358e64fe8b3327adb9ce635ea_Out_0, _Property_090d521163b9493189233a9f2e1cf5ed_Out_0, 0.25, 4, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1, _Property_dcc00367280c4dc6b11a52aa07754830_Out_0, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2);
                    UnityTexture2D _Property_3d7142ef79234a0ba6cda49555992a80_Out_0 = UnityBuildTexture2DStructNoScale(Layer0);
                    UnityTexture2D _Property_42e52c243a994f04944481ff3627fc2c_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal0);
                    UnityTexture2D _Property_e67647d6cf1b44bebf91845a255b522c_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask0);
                    float4 _Property_4e6c66ba03a842e482f7040c3fe163dc_Out_0 = Tiling_Offset0;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674;
                    float2 _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_4e6c66ba03a842e482f7040c3fe163dc_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1);
                    float2 _Property_8cf19c3a22e64f0a85a51c8cbf5085e7_Out_0 = HeightRemap0;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_3d7142ef79234a0ba6cda49555992a80_Out_0, _Property_42e52c243a994f04944481ff3627fc2c_Out_0, _Property_e67647d6cf1b44bebf91845a255b522c_Out_0, 0.25, 4, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1, _Property_8cf19c3a22e64f0a85a51c8cbf5085e7_Out_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2);
                    UnityTexture2D _Property_1bce6ca387e847e1a43a4534686b655f_Out_0 = UnityBuildTexture2DStructNoScale(Layer1);
                    UnityTexture2D _Property_1e7513acda3b4b20a5a028d0da4bcfb0_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal1);
                    UnityTexture2D _Property_75d4521a27cb403399759cefa7be71f2_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask1);
                    float4 _Property_e17bf3be22544a639340ddea65766b89_Out_0 = Tiling_Offset1;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_df825eb885d947429ce6daf495a641a7;
                    float2 _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_e17bf3be22544a639340ddea65766b89_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1);
                    float2 _Property_d682537de1054cf4b1eddd1680d152fb_Out_0 = HeightRemap1;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_1bce6ca387e847e1a43a4534686b655f_Out_0, _Property_1e7513acda3b4b20a5a028d0da4bcfb0_Out_0, _Property_75d4521a27cb403399759cefa7be71f2_Out_0, 0.25, 4, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1, _Property_d682537de1054cf4b1eddd1680d152fb_Out_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2);
                    UnityTexture2D _Property_b79fba6b5b1f40b88b38803dad2bb2e5_Out_0 = UnityBuildTexture2DStructNoScale(Layer2);
                    UnityTexture2D _Property_a787f1642c6d4570af8ae47ea63a59ed_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal2);
                    UnityTexture2D _Property_f4ae055a87ef48cb8df5c603ca6f72b0_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask2);
                    float4 _Property_e12db1a96427478999d081afcb59d771_Out_0 = Tiling_Offset2;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d;
                    float2 _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_e12db1a96427478999d081afcb59d771_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1);
                    float2 _Property_3be82515dad24d76b9af558757032f30_Out_0 = HeightRemap2;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_b79fba6b5b1f40b88b38803dad2bb2e5_Out_0, _Property_a787f1642c6d4570af8ae47ea63a59ed_Out_0, _Property_f4ae055a87ef48cb8df5c603ca6f72b0_Out_0, 0.25, 4, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1, _Property_3be82515dad24d76b9af558757032f30_Out_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2);
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_R_1 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[0];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_G_2 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[1];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_B_3 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[2];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_A_4 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[3];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_R_1 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[0];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_G_2 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[1];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_B_3 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[2];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_A_4 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[3];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_R_1 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[0];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_G_2 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[1];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_B_3 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[2];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_A_4 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[3];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_R_1 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[0];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_G_2 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[1];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_B_3 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[2];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_A_4 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[3];
                    float4 _Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4;
                    float3 _Combine_f97595cb40654c9a8d82c0297e7280f3_RGB_5;
                    float2 _Combine_f97595cb40654c9a8d82c0297e7280f3_RG_6;
                    Unity_Combine_float(_Split_d81e33a0495c4ac09042d2d39dd09ba5_B_3, _Split_d2ed4cee74e042da88b7348fcfe80cab_B_3, _Split_b3522eb5287e4b28baab87cc1fa16589_B_3, _Split_a4f15428b23a40ef8f25398e9cff2d7c_B_3, _Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4, _Combine_f97595cb40654c9a8d82c0297e7280f3_RGB_5, _Combine_f97595cb40654c9a8d82c0297e7280f3_RG_6);
                    UnityTexture2D _Property_8e8b4d9a2dfc42148eb69519397ecebc_Out_0 = UnityBuildTexture2DStructNoScale(Layer3);
                    UnityTexture2D _Property_1443e12ec6544d2c8e8dcc71d67adb04_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal3);
                    UnityTexture2D _Property_b8f1cfb1112b4d2e8e2fe919f5003fb3_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask3);
                    float4 _Property_d9e7ba461b95446db56c0b99fce9de5d_Out_0 = Tiling_Offset3;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13;
                    float2 _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_d9e7ba461b95446db56c0b99fce9de5d_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1);
                    float2 _Property_e5d43ace4a66401faff3165675d44af0_Out_0 = HeightRemap3;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_8e8b4d9a2dfc42148eb69519397ecebc_Out_0, _Property_1443e12ec6544d2c8e8dcc71d67adb04_Out_0, _Property_b8f1cfb1112b4d2e8e2fe919f5003fb3_Out_0, 0.25, 4, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1, _Property_e5d43ace4a66401faff3165675d44af0_Out_0, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2);
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_R_1 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[0];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_G_2 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[1];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_B_3 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[2];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_A_4 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[3];
                    UnityTexture2D _Property_edf497c59ff340a5897695b2e8e9ed68_Out_0 = UnityBuildTexture2DStructNoScale(SlopeTex);
                    UnityTexture2D _Property_ae03f8d1bb284168ae1cb40c2c8d7dce_Out_0 = UnityBuildTexture2DStructNoScale(SlopeNormal);
                    UnityTexture2D _Property_35050279a32b481b878853831820cb33_Out_0 = UnityBuildTexture2DStructNoScale(SlopeMask);
                    float4 _Property_a3c340f0d1f647858c0d27fc6fa0d127_Out_0 = Tiling_Offset4;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67;
                    float2 _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_a3c340f0d1f647858c0d27fc6fa0d127_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1);
                    float2 _Property_8a3f864a5b9c469b92480bb635123790_Out_0 = HeightRemap4;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_edf497c59ff340a5897695b2e8e9ed68_Out_0, _Property_ae03f8d1bb284168ae1cb40c2c8d7dce_Out_0, _Property_35050279a32b481b878853831820cb33_Out_0, 0.25, 4, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1, _Property_8a3f864a5b9c469b92480bb635123790_Out_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2);
                    float _Split_015a6ee9887b47abb21193d18e609740_R_1 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[0];
                    float _Split_015a6ee9887b47abb21193d18e609740_G_2 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[1];
                    float _Split_015a6ee9887b47abb21193d18e609740_B_3 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[2];
                    float _Split_015a6ee9887b47abb21193d18e609740_A_4 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[3];
                    float4 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4;
                    float3 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGB_5;
                    float2 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RG_6;
                    Unity_Combine_float(_Split_d87c9f86d0a94f8b9b66cbcb29d89dde_B_3, _Split_015a6ee9887b47abb21193d18e609740_B_3, 0, 0, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGB_5, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RG_6);
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_R_1 = IN.SplatMapColor[0];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_G_2 = IN.SplatMapColor[1];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_B_3 = IN.SplatMapColor[2];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_A_4 = IN.SplatMapColor[3];
                    float4 _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4;
                    float3 _Combine_7b79ed205a4b435d8742217505a4c51d_RGB_5;
                    float2 _Combine_7b79ed205a4b435d8742217505a4c51d_RG_6;
                    Unity_Combine_float(1, _Split_ea099c0905af42a6804ca0dc2f58dc2f_R_1, _Split_ea099c0905af42a6804ca0dc2f58dc2f_G_2, _Split_ea099c0905af42a6804ca0dc2f58dc2f_B_3, _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4, _Combine_7b79ed205a4b435d8742217505a4c51d_RGB_5, _Combine_7b79ed205a4b435d8742217505a4c51d_RG_6);
                    float2 _Property_5538a1bac07f487589432be4f79dd05e_Out_0 = SlopeRemap;
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_R_1 = _Property_5538a1bac07f487589432be4f79dd05e_Out_0[0];
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_G_2 = _Property_5538a1bac07f487589432be4f79dd05e_Out_0[1];
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_B_3 = 0;
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_A_4 = 0;
                    float _DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2;
                    Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(0, 1, 0), _DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2);
                    float _Property_795a1803a8484214b987093ec034ab6a_Out_0 = SlopePow;
                    float _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2;
                    Unity_Power_float(_DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2, _Property_795a1803a8484214b987093ec034ab6a_Out_0, _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2);
                    float _Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3;
                    Unity_Smoothstep_float(_Split_03a4c3769cad421fb634dee3fa2beefb_R_1, _Split_03a4c3769cad421fb634dee3fa2beefb_G_2, _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2, _Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3);
                    float _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1;
                    Unity_OneMinus_float(_Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3, _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1);
                    float4 _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4;
                    float3 _Combine_9702e823fbe443b4b07afb499b6912a4_RGB_5;
                    float2 _Combine_9702e823fbe443b4b07afb499b6912a4_RG_6;
                    Unity_Combine_float(_Split_ea099c0905af42a6804ca0dc2f58dc2f_A_4, _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1, 0, 0, _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4, _Combine_9702e823fbe443b4b07afb499b6912a4_RGB_5, _Combine_9702e823fbe443b4b07afb499b6912a4_RG_6);
                    float _Property_d5cf363bc21a4f92a00fac464b9b11cf_Out_0 = heightTransition;
                    float4 _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5;
                    float4 _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6;
                    HeightBlend8Layers_float(_Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4, _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4, _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4, _Property_d5cf363bc21a4f92a00fac464b9b11cf_Out_0, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6);
                    float4 _BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5);
                    float4 _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5);
                    float4 _Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5, _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5, _Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2);
                    float4 _BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5);
                    float4 _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5);
                    float4 _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5, _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5, _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2);
                    float _Split_d9a7a90627444523a2cda58b36d68116_R_1 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[0];
                    float _Split_d9a7a90627444523a2cda58b36d68116_G_2 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[1];
                    float _Split_d9a7a90627444523a2cda58b36d68116_B_3 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[2];
                    float _Split_d9a7a90627444523a2cda58b36d68116_A_4 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[3];
                    float4 _BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5);
                    float4 _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5);
                    float4 _Add_090184f4bd18493ca37179ea1a8364d0_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5, _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5, _Add_090184f4bd18493ca37179ea1a8364d0_Out_2);
                    surface.BaseColor = (_Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2.xyz);
                    surface.Emission = float3(0, 0, 0);
                    surface.Alpha = 1;
                    surface.BentNormal = IN.TangentSpaceNormal;
                    surface.Smoothness = _Split_d9a7a90627444523a2cda58b36d68116_A_4;
                    surface.Occlusion = _Split_d9a7a90627444523a2cda58b36d68116_G_2;
                    surface.NormalTS = (_Add_090184f4bd18493ca37179ea1a8364d0_Out_2.xyz);
                    surface.Metallic = _Split_d9a7a90627444523a2cda58b36d68116_R_1;
                    return surface;
                }
    
                // --------------------------------------------------
                // Build Graph Inputs
    
                
                VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
                {
                    VertexDescriptionInputs output;
                    ZERO_INITIALIZE(VertexDescriptionInputs, output);
                
                    output.ObjectSpaceNormal =           input.normalOS;
                    output.ObjectSpaceTangent =          input.tangentOS.xyz;
                    output.ObjectSpacePosition =         input.positionOS;
                
                    return output;
                }
                
                AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
                #ifdef USE_CUSTOMINTERP_SUBSTRUCT
                    #ifdef TESSELLATION_ON
                    , inout VaryingsMeshToDS varyings
                    #else
                    , inout VaryingsMeshToPS varyings
                    #endif
                #endif
                #ifdef HAVE_VFX_MODIFICATION
                        , AttributesElement element
                #endif
                    )
                {
                    // build graph inputs
                    VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
                    // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
                
                    // evaluate vertex graph
                #ifdef HAVE_VFX_MODIFICATION
                    GraphProperties properties;
                    ZERO_INITIALIZE(GraphProperties, properties);
                
                    // Fetch the vertex graph properties for the particle instance.
                    GetElementVertexProperties(element, properties);
                
                    VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
                #else
                    VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
                #endif
                
                    // copy graph output to the results
                    input.positionOS = vertexDescription.Position;
                    input.normalOS = vertexDescription.Normal;
                    input.tangentOS.xyz = vertexDescription.Tangent;
                
                    varyings.SplatMapColor = vertexDescription.SplatMapColor;
                
                    return input;
                }
                
                FragInputs BuildFragInputs(VaryingsMeshToPS input)
                {
                    FragInputs output;
                    ZERO_INITIALIZE(FragInputs, output);
                
                    // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
                    // TODO: this is a really poor workaround, but the variable is used in a bunch of places
                    // to compute normals which are then passed on elsewhere to compute other values...
                    output.tangentToWorld = k_identity3x3;
                    output.positionSS = input.positionCS;       // input.positionCS is SV_Position
                
                    output.positionRWS = input.positionRWS;
                    output.tangentToWorld = BuildTangentToWorld(input.tangentWS, input.normalWS);
                
                #ifdef HAVE_VFX_MODIFICATION
                    // FragInputs from VFX come from two places: Interpolator or CBuffer.
                    /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
                
                #endif
                
                    // splice point to copy custom interpolator fields from varyings to frag inputs
                    output.customInterpolators.SplatMapColor = input.SplatMapColor;
                
                    return output;
                }
                
                // existing HDRP code uses the combined function to go directly from packed to frag inputs
                FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
                {
                    UNITY_SETUP_INSTANCE_ID(input);
                    VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
                    return BuildFragInputs(unpacked);
                }
                
                SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
                {
                    SurfaceDescriptionInputs output;
                    ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
                
                    output.WorldSpaceNormal =            normalize(input.tangentToWorld[2].xyz);
                    #if defined(SHADER_STAGE_RAY_TRACING)
                    output.ObjectSpaceNormal =           mul(output.WorldSpaceNormal, (float3x3) ObjectToWorld3x4());
                    #else
                    output.ObjectSpaceNormal =           normalize(mul(output.WorldSpaceNormal, (float3x3) UNITY_MATRIX_M));           // transposed multiplication by inverse matrix to handle normal scale
                    #endif
                    output.TangentSpaceNormal =          float3(0.0f, 0.0f, 1.0f);
                    output.ObjectSpacePosition =         TransformWorldToObject(input.positionRWS);
                
                    // splice point to copy frag inputs custom interpolator pack into the SDI
                    output.SplatMapColor = input.customInterpolators.SplatMapColor;
                
                    return output;
                }
                
    
                // --------------------------------------------------
                // Build Surface Data (Specific Material)
    
            void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
                {
                    ZERO_INITIALIZE(SurfaceData, surfaceData);
                
                    // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
                    // however specularOcclusion can come from the graph, so need to be init here so it can be override.
                    surfaceData.specularOcclusion = 1.0;
                
                    surfaceData.baseColor =                 surfaceDescription.BaseColor;
                    surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
                    surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
                    surfaceData.metallic =                  surfaceDescription.Metallic;
                
                    #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                        if (_EnableSSRefraction)
                        {
                
                            surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                            surfaceDescription.Alpha = 1.0;
                        }
                        else
                        {
                            surfaceData.ior = 1.0;
                            surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                            surfaceData.atDistance = 1.0;
                            surfaceData.transmittanceMask = 0.0;
                            surfaceDescription.Alpha = 1.0;
                        }
                    #else
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                    #endif
                
                    // These static material feature allow compile time optimization
                    surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
                    #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_TRANSMISSION
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_ANISOTROPY
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
                    #endif
                
                    #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                        // Require to have setup baseColor
                        // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                        surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
                    #endif
                
                    #ifdef _DOUBLESIDED_ON
                        float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                    #else
                        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                    #endif
                
                    // normal delivered to master node
                    GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
                
                    surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                
                    surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
                
                
                    #if HAVE_DECALS
                        if (_EnableDecals)
                        {
                            float alpha = 1.0;
                            alpha = surfaceDescription.Alpha;
                
                            // Both uses and modifies 'surfaceData.normalWS'.
                            DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                            ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                        }
                    #endif
                
                    bentNormalWS = surfaceData.normalWS;
                
                    surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
                
                    #ifdef DEBUG_DISPLAY
                        if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                        {
                            // TODO: need to update mip info
                            surfaceData.metallic = 0;
                        }
                
                        // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                        // as it can modify attribute use for static lighting
                        ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
                    #endif
                
                    // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
                    // If user provide bent normal then we process a better term
                    #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                        // Just use the value passed through via the slot (not active otherwise)
                    #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                        // If we have bent normal and ambient occlusion, process a specular occlusion
                        surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                    #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                        surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                    #endif
                
                    #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                        surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                    #endif
                }
                
    
                // --------------------------------------------------
                // Get Surface And BuiltinData
    
                void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
                {
                    // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                    #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                    #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                    #endif
                    #endif
    
                    #ifndef SHADER_UNLIT
                    #ifdef _DOUBLESIDED_ON
                        float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                    #else
                        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                    #endif
    
                    ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                    #endif // SHADER_UNLIT
    
                    SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
    
                    #if defined(HAVE_VFX_MODIFICATION)
                    GraphProperties properties;
                    ZERO_INITIALIZE(GraphProperties, properties);
    
                    GetElementPixelProperties(fragInputs, properties);
    
                    SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                    #else
                    SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                    #endif
    
                    // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                    // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                    #ifdef _ALPHATEST_ON
                        float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                        #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                        // The TransparentDepthPrepass is also used with SSR transparent.
                        // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                        // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                        #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                        // DepthPostpass always use its own alpha threshold
                        alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                        #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                        // If use shadow threshold isn't enable we don't allow any test
                        #endif
    
                        GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                    #endif
    
                    #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                    #endif
    
                    #ifndef SHADER_UNLIT
                    float3 bentNormalWS;
                    BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
    
                    // Builtin Data
                    // For back lighting we use the oposite vertex normal
                    InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
    
                    #else
                    BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
    
                    ZERO_INITIALIZE(BuiltinData, builtinData); // No call to InitBuiltinData as we don't have any lighting
                    builtinData.opacity = surfaceDescription.Alpha;
    
                    #if defined(DEBUG_DISPLAY)
                        // Light Layers are currently not used for the Unlit shader (because it is not lit)
                        // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                        // display in the light layers visualization mode, therefore we need the renderingLayers
                        builtinData.renderingLayers = GetMeshRenderingLightLayer();
                    #endif
    
                    #endif // SHADER_UNLIT
    
                    #ifdef _ALPHATEST_ON
                        // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                        builtinData.alphaClipTreshold = alphaCutoff;
                    #endif
    
                    // override sampleBakedGI - not used by Unlit
    
            		// If we want to force forward emissive and we have GBuffer pass, don't do anything
            		#if !(SHADERPASS == SHADERPASS_GBUFFER && defined(_FORCE_FORWARD_EMISSIVE))
                    builtinData.emissiveColor = surfaceDescription.Emission;
            		#endif
    
                    // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                    // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                    // This is a limitation of the current MRT approach.
    
                    #if _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
                    #endif
    
                    // TODO: We should generate distortion / distortionBlur for non distortion pass
                    #if (SHADERPASS == SHADERPASS_DISTORTION)
                    builtinData.distortion = surfaceDescription.Distortion;
                    builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                    #endif
    
                    #ifndef SHADER_UNLIT
                    // PostInitBuiltinData call ApplyDebugToBuiltinData
                    PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                    #else
                    ApplyDebugToBuiltinData(builtinData);
                    #endif
    
                    RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
                }
    
                // --------------------------------------------------
                // Main
    
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassConstant.hlsl"
    
                // --------------------------------------------------
                // Visual Effect Vertex Invocations
    
            	#ifdef HAVE_VFX_MODIFICATION
            	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
            	#endif
    
                ENDHLSL
            }
        }
        SubShader
        {
            Tags
            {
                "RenderPipeline"="HDRenderPipeline"
                "RenderType"="HDLitShader"
                "Queue"="Geometry+225"
                "ShaderGraphShader"="true"
                "ShaderGraphTargetId"="HDLitSubTarget"
            }
            Pass
            {
                Name "IndirectDXR"
                Tags
                {
                    "LightMode" = "IndirectDXR"
                }
    
                // Render State
                // RenderState: <None>
    
                // Debug
                // <None>
    
                // --------------------------------------------------
                // Pass
    
                HLSLPROGRAM
    
                // Pragmas
                #pragma target 5.0
                #pragma raytracing surface_shader
                #pragma only_renderers d3d11
    
                // Keywords
                #pragma multi_compile _ MULTI_BOUNCE_INDIRECT
                #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
                #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
                #pragma shader_feature_local _ _DOUBLESIDED_ON
                #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
                #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
                #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
                #pragma multi_compile _ DEBUG_DISPLAY
                #pragma shader_feature_local_fragment _ _DISABLE_DECALS
                #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
                #pragma shader_feature_local_fragment _ _DISABLE_SSR
                #pragma shader_feature_local_raytracing _ _DISABLE_SSR
                #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
                #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
                #pragma multi_compile_fragment _ LIGHTMAP_ON
                #pragma multi_compile_raytracing _ LIGHTMAP_ON
                #pragma multi_compile_fragment _ DIRLIGHTMAP_COMBINED
                #pragma multi_compile_raytracing _ DIRLIGHTMAP_COMBINED
                #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
                #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
                #pragma multi_compile _ DYNAMICLIGHTMAP_ON
                #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
                #pragma shader_feature _ _FORCE_FORWARD_EMISSIVE
                // GraphKeywords: <None>
    
                // For custom interpolators to inject a substruct definition before FragInputs definition,
                // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
                /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
    
    
                // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
            	#ifdef HAVE_VFX_MODIFICATION
            	struct FragInputsVFX
                {
                    /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
                };
                #endif
    
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
            	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
    
                // --------------------------------------------------
                // Defines
    
                // Attribute
                #define ATTRIBUTES_NEED_NORMAL
                #define ATTRIBUTES_NEED_TANGENT
                #define ATTRIBUTES_NEED_TEXCOORD1
                #define ATTRIBUTES_NEED_TEXCOORD2
                #define VARYINGS_NEED_POSITION_WS
                #define VARYINGS_NEED_TANGENT_TO_WORLD
                #define VARYINGS_NEED_TEXCOORD1
                #define VARYINGS_NEED_TEXCOORD2
    
    
    
                #define SHADERPASS SHADERPASS_RAYTRACING_INDIRECT
                #define SHADOW_LOW
                #define RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define HAS_LIGHTLOOP 1
    
    
                // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
                // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
                // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
                // to still allow us to rename the field and keyword of this node without breaking existing code.
                #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
                #endif
    
                #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
                #endif
                // end
    
                #ifndef SHADER_UNLIT
                // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
                // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
                #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                    #define VARYINGS_NEED_CULLFACE
                #endif
                #endif
    
                // Specific Material Define
            #define _AMBIENT_OCCLUSION 1
                #define _SPECULAR_OCCLUSION_FROM_AO 1
                #define _ENERGY_CONSERVING_SPECULAR 1
                
                // If we use subsurface scattering, enable output split lighting (for forward pass)
                #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
                    #define OUTPUT_SPLIT_LIGHTING
                #endif
                
                // This shader support recursive rendering for raytracing
                #define HAVE_RECURSIVE_RENDERING
                
                // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
    
                // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
                // we should have a code like this:
                // if !defined(_DISABLE_SSR_TRANSPARENT)
                // pragma multi_compile _ WRITE_NORMAL_BUFFER
                // endif
                // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
                // it based on if SSR transparent in frame settings and not (and stripper can strip it).
                // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
                // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
                // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
                #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                    #define WRITE_NORMAL_BUFFER
                #endif
                #endif
    
                #ifndef DEBUG_DISPLAY
                    // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                    // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                    #if !defined(_SURFACE_TYPE_TRANSPARENT)
                        #if SHADERPASS == SHADERPASS_FORWARD
                        #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                        #elif SHADERPASS == SHADERPASS_GBUFFER
                        #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                        #endif
                    #endif
                #endif
    
                // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
                #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                    #define _DEFERRED_CAPABLE_MATERIAL
                #endif
    
                // Translate transparent motion vector define
                #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                    #define _WRITE_TRANSPARENT_MOTION_VECTOR
                #endif
    
                // Dots Instancing
                // DotsInstancingOptions: <None>
    
                // Various properties
    
                // HybridV1InjectedBuiltinProperties: <None>
    
                // -- Graph Properties
                CBUFFER_START(UnityPerMaterial)
                float2 HeightRemap3;
                float2 HeightRemap2;
                float4 Tiling_Offset3;
                float4 Tiling_Offset0;
                float2 HeightRemap4;
                float4 Tiling_Offset2;
                float2 HeightRemap0;
                float4 LayerMask3_TexelSize;
                float4 LayerMask2_TexelSize;
                float4 LayerNormal3_TexelSize;
                float4 LayerNormal2_TexelSize;
                float2 HeightRemap1;
                float4 Tiling_Offset1;
                float4 Layer0_TexelSize;
                float4 Layer1_TexelSize;
                float4 Layer2_TexelSize;
                float4 Layer3_TexelSize;
                float UVXZScale;
                float4 LayerNormal1_TexelSize;
                float4 LayerNormal0_TexelSize;
                float4 LayerMask1_TexelSize;
                float4 LayerMask0_TexelSize;
                float heightTransition;
                float4 BaseTex_TexelSize;
                float4 BaseNormal_TexelSize;
                float4 BaseMask_TexelSize;
                float4 Tiling_Offset;
                float2 HeightRemap;
                float4 SlopeTex_TexelSize;
                float4 SlopeNormal_TexelSize;
                float4 SlopeMask_TexelSize;
                float4 Tiling_Offset4;
                float2 SlopeRemap;
                float SlopePow;
                float4 _EmissionColor;
                float _UseShadowThreshold;
                float4 _DoubleSidedConstants;
                float _BlendMode;
                float _EnableBlendModePreserveSpecularLighting;
                float _RayTracing;
                float _RefractionModel;
                CBUFFER_END
                
                // Object and Global properties
                SAMPLER(SamplerState_Linear_Repeat);
                TEXTURE2D(LayerMask3);
                SAMPLER(samplerLayerMask3);
                TEXTURE2D(LayerMask2);
                SAMPLER(samplerLayerMask2);
                TEXTURE2D(LayerNormal3);
                SAMPLER(samplerLayerNormal3);
                TEXTURE2D(LayerNormal2);
                SAMPLER(samplerLayerNormal2);
                TEXTURE2D(Layer0);
                SAMPLER(samplerLayer0);
                TEXTURE2D(Layer1);
                SAMPLER(samplerLayer1);
                TEXTURE2D(Layer2);
                SAMPLER(samplerLayer2);
                TEXTURE2D(Layer3);
                SAMPLER(samplerLayer3);
                TEXTURE2D(LayerNormal1);
                SAMPLER(samplerLayerNormal1);
                TEXTURE2D(LayerNormal0);
                SAMPLER(samplerLayerNormal0);
                TEXTURE2D(LayerMask1);
                SAMPLER(samplerLayerMask1);
                TEXTURE2D(LayerMask0);
                SAMPLER(samplerLayerMask0);
                TEXTURE2D(BaseTex);
                SAMPLER(samplerBaseTex);
                TEXTURE2D(BaseNormal);
                SAMPLER(samplerBaseNormal);
                TEXTURE2D(BaseMask);
                SAMPLER(samplerBaseMask);
                TEXTURE2D(SlopeTex);
                SAMPLER(samplerSlopeTex);
                TEXTURE2D(SlopeNormal);
                SAMPLER(samplerSlopeNormal);
                TEXTURE2D(SlopeMask);
                SAMPLER(samplerSlopeMask);
    
                // -- Property used by ScenePickingPass
                #ifdef SCENEPICKINGPASS
                float4 _SelectionID;
                #endif
    
                // -- Properties used by SceneSelectionPass
                #ifdef SCENESELECTIONPASS
                int _ObjectId;
                int _PassValue;
                #endif
    
                // Includes
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRaytracing.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingLightLoop.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
            	#include "Assets/Shaders/TerrainShading/HeightBlend.hlsl"
    
                // --------------------------------------------------
                // Structs and Packing
    
                struct SurfaceDescriptionInputs
                {
                     float3 ObjectSpaceNormal;
                     float3 WorldSpaceNormal;
                     float3 TangentSpaceNormal;
                     float3 ObjectSpacePosition;
                };
    
                //Interpolator Packs: <None>
    
                // --------------------------------------------------
                // Graph
    
    
                // Graph Functions
                
                void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
                {
                    RGBA = float4(R, G, B, A);
                    RGB = float3(R, G, B);
                    RG = float2(R, G);
                }
                
                void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
                {
                    Out = A / B;
                }
                
                void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
                {
                    Out = UV * Tiling + Offset;
                }
                
                struct Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float
                {
                };
                
                void SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(float4 Tiling_Offset, float2 Vector2, Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float IN, out float2 OutVector2_1)
                {
                    float2 _Property_5ea954dbdecc454b839a01badac3afd6_Out_0 = Vector2;
                    float4 _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0 = Tiling_Offset;
                    float _Split_c19978cb25c5413eaf23432179b0e3af_R_1 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[0];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_G_2 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[1];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_B_3 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[2];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_A_4 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[3];
                    float4 _Combine_387ca93b6841454bad52ea2f221d199f_RGBA_4;
                    float3 _Combine_387ca93b6841454bad52ea2f221d199f_RGB_5;
                    float2 _Combine_387ca93b6841454bad52ea2f221d199f_RG_6;
                    Unity_Combine_float(_Split_c19978cb25c5413eaf23432179b0e3af_R_1, _Split_c19978cb25c5413eaf23432179b0e3af_G_2, 0, 0, _Combine_387ca93b6841454bad52ea2f221d199f_RGBA_4, _Combine_387ca93b6841454bad52ea2f221d199f_RGB_5, _Combine_387ca93b6841454bad52ea2f221d199f_RG_6);
                    float4 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGBA_4;
                    float3 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGB_5;
                    float2 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6;
                    Unity_Combine_float(_Split_c19978cb25c5413eaf23432179b0e3af_B_3, _Split_c19978cb25c5413eaf23432179b0e3af_A_4, 0, 0, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGBA_4, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGB_5, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6);
                    float2 _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3;
                    Unity_TilingAndOffset_float(_Property_5ea954dbdecc454b839a01badac3afd6_Out_0, _Combine_387ca93b6841454bad52ea2f221d199f_RG_6, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6, _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3);
                    OutVector2_1 = _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3;
                }
                
                void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
                {
                    Out = A * B;
                }
                
                void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
                {
                    Out = A * B;
                }
                
                void Desaturate_float(float3 oldcolor, float k, out float3 newcolor){
                    float intensity = dot(oldcolor,float3(0.3,0.59,0.11));
                    newcolor.x = intensity*k + oldcolor.x*(1-k);
                    newcolor.y = intensity*k + oldcolor.y*(1-k);
                    newcolor.z = intensity*k + oldcolor.z*(1-k);
                }
                
                void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
                {
                    Out = A * B;
                }
                
                void Unity_Lerp_float(float A, float B, float T, out float Out)
                {
                    Out = lerp(A, B, T);
                }
                
                struct Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float
                {
                };
                
                void SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(UnityTexture2D Albedo, UnityTexture2D Normal, UnityTexture2D Mask, float DesaturationK, float BrightnessAtten, float2 UV, float2 HeightRemap, Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float IN, out float4 oAlbedo_0, out float4 oNormal_1, out float4 oMask_2)
                {
                    UnityTexture2D _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0 = Albedo;
                    float2 _Property_76ed35a32977448f8ea254bf6de06d33_Out_0 = UV;
                    float4 _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_R_4 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.r;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_G_5 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.g;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_B_6 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.b;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_A_7 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.a;
                    float _Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0 = BrightnessAtten;
                    float4 _Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2);
                    float _Float_f48d9dc0c16249fe8fe5b97c86e7f56c_Out_0 = -0.25;
                    float2 _Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2;
                    Unity_Multiply_float2_float2(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0, (_Float_f48d9dc0c16249fe8fe5b97c86e7f56c_Out_0.xx), _Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2);
                    float4 _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_R_4 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.r;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_G_5 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.g;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_B_6 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.b;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_A_7 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.a;
                    float4 _Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2);
                    float _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0 = DesaturationK;
                    float3 _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1;
                    Desaturate_float((_Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1);
                    float3 _Multiply_410af5ac81154a3aab73254ac228eccd_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2.xyz), _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1, _Multiply_410af5ac81154a3aab73254ac228eccd_Out_2);
                    UnityTexture2D _Property_d05972164bdd4e0189593b8dae00db03_Out_0 = Normal;
                    float4 _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0 = SAMPLE_TEXTURE2D(_Property_d05972164bdd4e0189593b8dae00db03_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d05972164bdd4e0189593b8dae00db03_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0);
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_R_4 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.r;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_G_5 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.g;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_B_6 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.b;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_A_7 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.a;
                    float4 _Multiply_4999f90cbd1848acaf20b253953c0963_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_4999f90cbd1848acaf20b253953c0963_Out_2);
                    float4 _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_d05972164bdd4e0189593b8dae00db03_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d05972164bdd4e0189593b8dae00db03_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0);
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_R_4 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.r;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_G_5 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.g;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_B_6 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.b;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_A_7 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.a;
                    float4 _Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2);
                    float3 _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1;
                    Desaturate_float((_Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1);
                    float3 _Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_4999f90cbd1848acaf20b253953c0963_Out_2.xyz), _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1, _Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2);
                    UnityTexture2D _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0 = Mask;
                    float4 _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0 = SAMPLE_TEXTURE2D(_Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_R_4 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.r;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_G_5 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.g;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_B_6 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.b;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_A_7 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.a;
                    float4 _Multiply_0b2356625aad40439a89b8519e36e62b_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_0b2356625aad40439a89b8519e36e62b_Out_2);
                    float4 _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0 = SAMPLE_TEXTURE2D(_Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_R_4 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.r;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_G_5 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.g;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_B_6 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.b;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_A_7 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.a;
                    float4 _Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2);
                    float3 _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1;
                    Desaturate_float((_Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1);
                    float3 _Multiply_3c8f32d2a057478e869493099765b841_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_0b2356625aad40439a89b8519e36e62b_Out_2.xyz), _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1, _Multiply_3c8f32d2a057478e869493099765b841_Out_2);
                    float _Split_77de2b1a3326407b985f625d91e2063b_R_1 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[0];
                    float _Split_77de2b1a3326407b985f625d91e2063b_G_2 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[1];
                    float _Split_77de2b1a3326407b985f625d91e2063b_B_3 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[2];
                    float _Split_77de2b1a3326407b985f625d91e2063b_A_4 = 0;
                    float2 _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0 = HeightRemap;
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_R_1 = _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0[0];
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_G_2 = _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0[1];
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_B_3 = 0;
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_A_4 = 0;
                    float _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3;
                    Unity_Lerp_float(_Split_0df13f6921fe4db99b01dcff93c3b978_R_1, _Split_0df13f6921fe4db99b01dcff93c3b978_G_2, _Split_77de2b1a3326407b985f625d91e2063b_B_3, _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3);
                    float4 _Combine_17dba591e95443299750f53a93613083_RGBA_4;
                    float3 _Combine_17dba591e95443299750f53a93613083_RGB_5;
                    float2 _Combine_17dba591e95443299750f53a93613083_RG_6;
                    Unity_Combine_float(_Split_77de2b1a3326407b985f625d91e2063b_R_1, _Split_77de2b1a3326407b985f625d91e2063b_G_2, _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3, _Split_77de2b1a3326407b985f625d91e2063b_A_4, _Combine_17dba591e95443299750f53a93613083_RGBA_4, _Combine_17dba591e95443299750f53a93613083_RGB_5, _Combine_17dba591e95443299750f53a93613083_RG_6);
                    oAlbedo_0 = (float4(_Multiply_410af5ac81154a3aab73254ac228eccd_Out_2, 1.0));
                    oNormal_1 = (float4(_Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2, 1.0));
                    oMask_2 = _Combine_17dba591e95443299750f53a93613083_RGBA_4;
                }
                
                void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
                {
                    Out = dot(A, B);
                }
                
                void Unity_Power_float(float A, float B, out float Out)
                {
                    Out = pow(A, B);
                }
                
                void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
                {
                    Out = smoothstep(Edge1, Edge2, In);
                }
                
                void Unity_OneMinus_float(float In, out float Out)
                {
                    Out = 1 - In;
                }
                
                void BlendByMask_float(float4 a, float4 b, float4 c, float4 d, float4 blend, out float4 ret){
                    ret = a*blend.x + b*blend.y + c*blend.z + d*blend.w;
                }
                
                void Unity_Add_float4(float4 A, float4 B, out float4 Out)
                {
                    Out = A + B;
                }
    
                // Graph Vertex
                // GraphVertex: <None>
    
                // Graph Pixel
                struct SurfaceDescription
                {
                    float3 BaseColor;
                    float3 Emission;
                    float Alpha;
                    float3 BentNormal;
                    float Smoothness;
                    float Occlusion;
                    float3 NormalTS;
                    float Metallic;
                };
                
                SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
                {
                    SurfaceDescription surface = (SurfaceDescription)0;
                    UnityTexture2D _Property_4e780cffb4044909a58e26eaff6361d1_Out_0 = UnityBuildTexture2DStructNoScale(BaseTex);
                    UnityTexture2D _Property_20a5bc7358e64fe8b3327adb9ce635ea_Out_0 = UnityBuildTexture2DStructNoScale(BaseNormal);
                    UnityTexture2D _Property_090d521163b9493189233a9f2e1cf5ed_Out_0 = UnityBuildTexture2DStructNoScale(BaseMask);
                    float4 _Property_6881ae016d754988b27811b95cc834ca_Out_0 = Tiling_Offset;
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_R_1 = IN.ObjectSpacePosition[0];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_G_2 = IN.ObjectSpacePosition[1];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_B_3 = IN.ObjectSpacePosition[2];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_A_4 = 0;
                    float4 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGBA_4;
                    float3 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGB_5;
                    float2 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6;
                    Unity_Combine_float(_Split_3335daa3a4b34f69a62c9c8a1c6f39b2_R_1, _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_B_3, 0, 0, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGBA_4, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGB_5, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6);
                    float _Property_8984e4bf1c26459280f9fece3c52167c_Out_0 = UVXZScale;
                    float2 _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2;
                    Unity_Divide_float2(_Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6, (_Property_8984e4bf1c26459280f9fece3c52167c_Out_0.xx), _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2);
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_737be3819d2c4f29853810a18717cae3;
                    float2 _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_6881ae016d754988b27811b95cc834ca_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1);
                    float2 _Property_dcc00367280c4dc6b11a52aa07754830_Out_0 = HeightRemap;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_6722d68456e84aecb015a07880cbbd46;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_4e780cffb4044909a58e26eaff6361d1_Out_0, _Property_20a5bc7358e64fe8b3327adb9ce635ea_Out_0, _Property_090d521163b9493189233a9f2e1cf5ed_Out_0, 0.25, 4, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1, _Property_dcc00367280c4dc6b11a52aa07754830_Out_0, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2);
                    UnityTexture2D _Property_3d7142ef79234a0ba6cda49555992a80_Out_0 = UnityBuildTexture2DStructNoScale(Layer0);
                    UnityTexture2D _Property_42e52c243a994f04944481ff3627fc2c_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal0);
                    UnityTexture2D _Property_e67647d6cf1b44bebf91845a255b522c_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask0);
                    float4 _Property_4e6c66ba03a842e482f7040c3fe163dc_Out_0 = Tiling_Offset0;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674;
                    float2 _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_4e6c66ba03a842e482f7040c3fe163dc_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1);
                    float2 _Property_8cf19c3a22e64f0a85a51c8cbf5085e7_Out_0 = HeightRemap0;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_3d7142ef79234a0ba6cda49555992a80_Out_0, _Property_42e52c243a994f04944481ff3627fc2c_Out_0, _Property_e67647d6cf1b44bebf91845a255b522c_Out_0, 0.25, 4, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1, _Property_8cf19c3a22e64f0a85a51c8cbf5085e7_Out_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2);
                    UnityTexture2D _Property_1bce6ca387e847e1a43a4534686b655f_Out_0 = UnityBuildTexture2DStructNoScale(Layer1);
                    UnityTexture2D _Property_1e7513acda3b4b20a5a028d0da4bcfb0_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal1);
                    UnityTexture2D _Property_75d4521a27cb403399759cefa7be71f2_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask1);
                    float4 _Property_e17bf3be22544a639340ddea65766b89_Out_0 = Tiling_Offset1;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_df825eb885d947429ce6daf495a641a7;
                    float2 _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_e17bf3be22544a639340ddea65766b89_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1);
                    float2 _Property_d682537de1054cf4b1eddd1680d152fb_Out_0 = HeightRemap1;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_1bce6ca387e847e1a43a4534686b655f_Out_0, _Property_1e7513acda3b4b20a5a028d0da4bcfb0_Out_0, _Property_75d4521a27cb403399759cefa7be71f2_Out_0, 0.25, 4, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1, _Property_d682537de1054cf4b1eddd1680d152fb_Out_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2);
                    UnityTexture2D _Property_b79fba6b5b1f40b88b38803dad2bb2e5_Out_0 = UnityBuildTexture2DStructNoScale(Layer2);
                    UnityTexture2D _Property_a787f1642c6d4570af8ae47ea63a59ed_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal2);
                    UnityTexture2D _Property_f4ae055a87ef48cb8df5c603ca6f72b0_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask2);
                    float4 _Property_e12db1a96427478999d081afcb59d771_Out_0 = Tiling_Offset2;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d;
                    float2 _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_e12db1a96427478999d081afcb59d771_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1);
                    float2 _Property_3be82515dad24d76b9af558757032f30_Out_0 = HeightRemap2;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_b79fba6b5b1f40b88b38803dad2bb2e5_Out_0, _Property_a787f1642c6d4570af8ae47ea63a59ed_Out_0, _Property_f4ae055a87ef48cb8df5c603ca6f72b0_Out_0, 0.25, 4, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1, _Property_3be82515dad24d76b9af558757032f30_Out_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2);
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_R_1 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[0];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_G_2 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[1];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_B_3 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[2];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_A_4 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[3];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_R_1 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[0];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_G_2 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[1];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_B_3 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[2];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_A_4 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[3];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_R_1 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[0];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_G_2 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[1];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_B_3 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[2];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_A_4 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[3];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_R_1 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[0];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_G_2 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[1];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_B_3 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[2];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_A_4 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[3];
                    float4 _Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4;
                    float3 _Combine_f97595cb40654c9a8d82c0297e7280f3_RGB_5;
                    float2 _Combine_f97595cb40654c9a8d82c0297e7280f3_RG_6;
                    Unity_Combine_float(_Split_d81e33a0495c4ac09042d2d39dd09ba5_B_3, _Split_d2ed4cee74e042da88b7348fcfe80cab_B_3, _Split_b3522eb5287e4b28baab87cc1fa16589_B_3, _Split_a4f15428b23a40ef8f25398e9cff2d7c_B_3, _Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4, _Combine_f97595cb40654c9a8d82c0297e7280f3_RGB_5, _Combine_f97595cb40654c9a8d82c0297e7280f3_RG_6);
                    UnityTexture2D _Property_8e8b4d9a2dfc42148eb69519397ecebc_Out_0 = UnityBuildTexture2DStructNoScale(Layer3);
                    UnityTexture2D _Property_1443e12ec6544d2c8e8dcc71d67adb04_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal3);
                    UnityTexture2D _Property_b8f1cfb1112b4d2e8e2fe919f5003fb3_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask3);
                    float4 _Property_d9e7ba461b95446db56c0b99fce9de5d_Out_0 = Tiling_Offset3;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13;
                    float2 _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_d9e7ba461b95446db56c0b99fce9de5d_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1);
                    float2 _Property_e5d43ace4a66401faff3165675d44af0_Out_0 = HeightRemap3;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_8e8b4d9a2dfc42148eb69519397ecebc_Out_0, _Property_1443e12ec6544d2c8e8dcc71d67adb04_Out_0, _Property_b8f1cfb1112b4d2e8e2fe919f5003fb3_Out_0, 0.25, 4, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1, _Property_e5d43ace4a66401faff3165675d44af0_Out_0, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2);
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_R_1 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[0];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_G_2 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[1];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_B_3 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[2];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_A_4 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[3];
                    UnityTexture2D _Property_edf497c59ff340a5897695b2e8e9ed68_Out_0 = UnityBuildTexture2DStructNoScale(SlopeTex);
                    UnityTexture2D _Property_ae03f8d1bb284168ae1cb40c2c8d7dce_Out_0 = UnityBuildTexture2DStructNoScale(SlopeNormal);
                    UnityTexture2D _Property_35050279a32b481b878853831820cb33_Out_0 = UnityBuildTexture2DStructNoScale(SlopeMask);
                    float4 _Property_a3c340f0d1f647858c0d27fc6fa0d127_Out_0 = Tiling_Offset4;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67;
                    float2 _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_a3c340f0d1f647858c0d27fc6fa0d127_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1);
                    float2 _Property_8a3f864a5b9c469b92480bb635123790_Out_0 = HeightRemap4;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_edf497c59ff340a5897695b2e8e9ed68_Out_0, _Property_ae03f8d1bb284168ae1cb40c2c8d7dce_Out_0, _Property_35050279a32b481b878853831820cb33_Out_0, 0.25, 4, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1, _Property_8a3f864a5b9c469b92480bb635123790_Out_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2);
                    float _Split_015a6ee9887b47abb21193d18e609740_R_1 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[0];
                    float _Split_015a6ee9887b47abb21193d18e609740_G_2 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[1];
                    float _Split_015a6ee9887b47abb21193d18e609740_B_3 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[2];
                    float _Split_015a6ee9887b47abb21193d18e609740_A_4 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[3];
                    float4 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4;
                    float3 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGB_5;
                    float2 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RG_6;
                    Unity_Combine_float(_Split_d87c9f86d0a94f8b9b66cbcb29d89dde_B_3, _Split_015a6ee9887b47abb21193d18e609740_B_3, 0, 0, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGB_5, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RG_6);
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_R_1 = float4(0,0,0,0)[0];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_G_2 = float4(0,0,0,0)[1];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_B_3 = float4(0,0,0,0)[2];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_A_4 = float4(0,0,0,0)[3];
                    float4 _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4;
                    float3 _Combine_7b79ed205a4b435d8742217505a4c51d_RGB_5;
                    float2 _Combine_7b79ed205a4b435d8742217505a4c51d_RG_6;
                    Unity_Combine_float(1, _Split_ea099c0905af42a6804ca0dc2f58dc2f_R_1, _Split_ea099c0905af42a6804ca0dc2f58dc2f_G_2, _Split_ea099c0905af42a6804ca0dc2f58dc2f_B_3, _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4, _Combine_7b79ed205a4b435d8742217505a4c51d_RGB_5, _Combine_7b79ed205a4b435d8742217505a4c51d_RG_6);
                    float2 _Property_5538a1bac07f487589432be4f79dd05e_Out_0 = SlopeRemap;
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_R_1 = _Property_5538a1bac07f487589432be4f79dd05e_Out_0[0];
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_G_2 = _Property_5538a1bac07f487589432be4f79dd05e_Out_0[1];
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_B_3 = 0;
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_A_4 = 0;
                    float _DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2;
                    Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(0, 1, 0), _DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2);
                    float _Property_795a1803a8484214b987093ec034ab6a_Out_0 = SlopePow;
                    float _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2;
                    Unity_Power_float(_DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2, _Property_795a1803a8484214b987093ec034ab6a_Out_0, _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2);
                    float _Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3;
                    Unity_Smoothstep_float(_Split_03a4c3769cad421fb634dee3fa2beefb_R_1, _Split_03a4c3769cad421fb634dee3fa2beefb_G_2, _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2, _Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3);
                    float _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1;
                    Unity_OneMinus_float(_Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3, _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1);
                    float4 _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4;
                    float3 _Combine_9702e823fbe443b4b07afb499b6912a4_RGB_5;
                    float2 _Combine_9702e823fbe443b4b07afb499b6912a4_RG_6;
                    Unity_Combine_float(_Split_ea099c0905af42a6804ca0dc2f58dc2f_A_4, _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1, 0, 0, _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4, _Combine_9702e823fbe443b4b07afb499b6912a4_RGB_5, _Combine_9702e823fbe443b4b07afb499b6912a4_RG_6);
                    float _Property_d5cf363bc21a4f92a00fac464b9b11cf_Out_0 = heightTransition;
                    float4 _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5;
                    float4 _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6;
                    HeightBlend8Layers_float(_Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4, _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4, _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4, _Property_d5cf363bc21a4f92a00fac464b9b11cf_Out_0, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6);
                    float4 _BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5);
                    float4 _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5);
                    float4 _Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5, _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5, _Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2);
                    float4 _BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5);
                    float4 _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5);
                    float4 _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5, _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5, _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2);
                    float _Split_d9a7a90627444523a2cda58b36d68116_R_1 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[0];
                    float _Split_d9a7a90627444523a2cda58b36d68116_G_2 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[1];
                    float _Split_d9a7a90627444523a2cda58b36d68116_B_3 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[2];
                    float _Split_d9a7a90627444523a2cda58b36d68116_A_4 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[3];
                    float4 _BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5);
                    float4 _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5);
                    float4 _Add_090184f4bd18493ca37179ea1a8364d0_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5, _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5, _Add_090184f4bd18493ca37179ea1a8364d0_Out_2);
                    surface.BaseColor = (_Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2.xyz);
                    surface.Emission = float3(0, 0, 0);
                    surface.Alpha = 1;
                    surface.BentNormal = IN.TangentSpaceNormal;
                    surface.Smoothness = _Split_d9a7a90627444523a2cda58b36d68116_A_4;
                    surface.Occlusion = _Split_d9a7a90627444523a2cda58b36d68116_G_2;
                    surface.NormalTS = (_Add_090184f4bd18493ca37179ea1a8364d0_Out_2.xyz);
                    surface.Metallic = _Split_d9a7a90627444523a2cda58b36d68116_R_1;
                    return surface;
                }
    
                // --------------------------------------------------
                // Build Graph Inputs
    
                SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
                {
                    SurfaceDescriptionInputs output;
                    ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
                
                    output.WorldSpaceNormal =            normalize(input.tangentToWorld[2].xyz);
                    #if defined(SHADER_STAGE_RAY_TRACING)
                    output.ObjectSpaceNormal =           mul(output.WorldSpaceNormal, (float3x3) ObjectToWorld3x4());
                    #else
                    output.ObjectSpaceNormal =           normalize(mul(output.WorldSpaceNormal, (float3x3) UNITY_MATRIX_M));           // transposed multiplication by inverse matrix to handle normal scale
                    #endif
                    output.TangentSpaceNormal =          float3(0.0f, 0.0f, 1.0f);
                    output.ObjectSpacePosition =         TransformWorldToObject(input.positionRWS);
                
                    // splice point to copy frag inputs custom interpolator pack into the SDI
                    /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
                
                    return output;
                }
                
    
                // --------------------------------------------------
                // Build Surface Data (Specific Material)
    
            void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
                {
                    ZERO_INITIALIZE(SurfaceData, surfaceData);
                
                    // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
                    // however specularOcclusion can come from the graph, so need to be init here so it can be override.
                    surfaceData.specularOcclusion = 1.0;
                
                    surfaceData.baseColor =                 surfaceDescription.BaseColor;
                    surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
                    surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
                    surfaceData.metallic =                  surfaceDescription.Metallic;
                
                    #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                        if (_EnableSSRefraction)
                        {
                
                            surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                            surfaceDescription.Alpha = 1.0;
                        }
                        else
                        {
                            surfaceData.ior = 1.0;
                            surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                            surfaceData.atDistance = 1.0;
                            surfaceData.transmittanceMask = 0.0;
                            surfaceDescription.Alpha = 1.0;
                        }
                    #else
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                    #endif
                
                    // These static material feature allow compile time optimization
                    surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
                    #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_TRANSMISSION
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_ANISOTROPY
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
                    #endif
                
                    #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                        // Require to have setup baseColor
                        // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                        surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
                    #endif
                
                    #ifdef _DOUBLESIDED_ON
                        float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                    #else
                        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                    #endif
                
                    // normal delivered to master node
                    GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
                
                    surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                
                    surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
                
                
                    #if HAVE_DECALS
                        if (_EnableDecals)
                        {
                            float alpha = 1.0;
                            alpha = surfaceDescription.Alpha;
                
                            // Both uses and modifies 'surfaceData.normalWS'.
                            DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                            ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                        }
                    #endif
                
                    bentNormalWS = surfaceData.normalWS;
                
                    surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
                
                    #ifdef DEBUG_DISPLAY
                        if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                        {
                            // TODO: need to update mip info
                            surfaceData.metallic = 0;
                        }
                
                        // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                        // as it can modify attribute use for static lighting
                        ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
                    #endif
                
                    // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
                    // If user provide bent normal then we process a better term
                    #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                        // Just use the value passed through via the slot (not active otherwise)
                    #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                        // If we have bent normal and ambient occlusion, process a specular occlusion
                        surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                    #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                        surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                    #endif
                
                    #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                        surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                    #endif
                }
                
    
                // --------------------------------------------------
                // Get Surface And BuiltinData
    
                void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
                {
                    // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                    #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                    #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                    #endif
                    #endif
    
                    #ifndef SHADER_UNLIT
                    #ifdef _DOUBLESIDED_ON
                        float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                    #else
                        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                    #endif
    
                    ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                    #endif // SHADER_UNLIT
    
                    SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
    
                    #if defined(HAVE_VFX_MODIFICATION)
                    GraphProperties properties;
                    ZERO_INITIALIZE(GraphProperties, properties);
    
                    GetElementPixelProperties(fragInputs, properties);
    
                    SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                    #else
                    SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                    #endif
    
                    // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                    // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                    #ifdef _ALPHATEST_ON
                        float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                        #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                        // The TransparentDepthPrepass is also used with SSR transparent.
                        // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                        // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                        #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                        // DepthPostpass always use its own alpha threshold
                        alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                        #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                        // If use shadow threshold isn't enable we don't allow any test
                        #endif
    
                        GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                    #endif
    
                    #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                    #endif
    
                    #ifndef SHADER_UNLIT
                    float3 bentNormalWS;
                    BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
    
                    // Builtin Data
                    // For back lighting we use the oposite vertex normal
                    InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
    
                    #else
                    BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
    
                    ZERO_INITIALIZE(BuiltinData, builtinData); // No call to InitBuiltinData as we don't have any lighting
                    builtinData.opacity = surfaceDescription.Alpha;
    
                    #if defined(DEBUG_DISPLAY)
                        // Light Layers are currently not used for the Unlit shader (because it is not lit)
                        // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                        // display in the light layers visualization mode, therefore we need the renderingLayers
                        builtinData.renderingLayers = GetMeshRenderingLightLayer();
                    #endif
    
                    #endif // SHADER_UNLIT
    
                    #ifdef _ALPHATEST_ON
                        // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                        builtinData.alphaClipTreshold = alphaCutoff;
                    #endif
    
                    // override sampleBakedGI - not used by Unlit
    
            		// If we want to force forward emissive and we have GBuffer pass, don't do anything
            		#if !(SHADERPASS == SHADERPASS_GBUFFER && defined(_FORCE_FORWARD_EMISSIVE))
                    builtinData.emissiveColor = surfaceDescription.Emission;
            		#endif
    
                    // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                    // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                    // This is a limitation of the current MRT approach.
    
                    #if _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
                    #endif
    
                    // TODO: We should generate distortion / distortionBlur for non distortion pass
                    #if (SHADERPASS == SHADERPASS_DISTORTION)
                    builtinData.distortion = surfaceDescription.Distortion;
                    builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                    #endif
    
                    #ifndef SHADER_UNLIT
                    // PostInitBuiltinData call ApplyDebugToBuiltinData
                    PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                    #else
                    ApplyDebugToBuiltinData(builtinData);
                    #endif
    
                    RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
                }
    
                // --------------------------------------------------
                // Main
    
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingIndirect.hlsl"
    
                // --------------------------------------------------
                // Visual Effect Vertex Invocations
    
            	#ifdef HAVE_VFX_MODIFICATION
            	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
            	#endif
    
                ENDHLSL
            }
            Pass
            {
                Name "VisibilityDXR"
                Tags
                {
                    "LightMode" = "VisibilityDXR"
                }
    
                // Render State
                // RenderState: <None>
    
                // Debug
                // <None>
    
                // --------------------------------------------------
                // Pass
    
                HLSLPROGRAM
    
                // Pragmas
                #pragma target 5.0
                #pragma raytracing surface_shader
                #pragma only_renderers d3d11
    
                // Keywords
                #pragma multi_compile _ TRANSPARENT_COLOR_SHADOW
                #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
                #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
                #pragma shader_feature_local _ _DOUBLESIDED_ON
                #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
                #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
                #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
                #pragma shader_feature_local_fragment _ _DISABLE_DECALS
                #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
                #pragma shader_feature_local_fragment _ _DISABLE_SSR
                #pragma shader_feature_local_raytracing _ _DISABLE_SSR
                #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
                #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
                #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
                #pragma shader_feature _ _FORCE_FORWARD_EMISSIVE
                // GraphKeywords: <None>
    
                // For custom interpolators to inject a substruct definition before FragInputs definition,
                // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
                /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
    
    
                // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
            	#ifdef HAVE_VFX_MODIFICATION
            	struct FragInputsVFX
                {
                    /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
                };
                #endif
    
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
            	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
    
                // --------------------------------------------------
                // Defines
    
                // Attribute
                #define ATTRIBUTES_NEED_NORMAL
                #define ATTRIBUTES_NEED_TANGENT
                #define VARYINGS_NEED_POSITION_WS
                #define VARYINGS_NEED_TANGENT_TO_WORLD
    
    
    
                #define SHADERPASS SHADERPASS_RAYTRACING_VISIBILITY
                #define RAYTRACING_SHADER_GRAPH_RAYTRACED
    
    
                // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
                // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
                // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
                // to still allow us to rename the field and keyword of this node without breaking existing code.
                #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
                #endif
    
                #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
                #endif
                // end
    
                #ifndef SHADER_UNLIT
                // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
                // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
                #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                    #define VARYINGS_NEED_CULLFACE
                #endif
                #endif
    
                // Specific Material Define
            #define _AMBIENT_OCCLUSION 1
                #define _SPECULAR_OCCLUSION_FROM_AO 1
                #define _ENERGY_CONSERVING_SPECULAR 1
                
                // If we use subsurface scattering, enable output split lighting (for forward pass)
                #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
                    #define OUTPUT_SPLIT_LIGHTING
                #endif
                
                // This shader support recursive rendering for raytracing
                #define HAVE_RECURSIVE_RENDERING
                
                // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
    
                // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
                // we should have a code like this:
                // if !defined(_DISABLE_SSR_TRANSPARENT)
                // pragma multi_compile _ WRITE_NORMAL_BUFFER
                // endif
                // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
                // it based on if SSR transparent in frame settings and not (and stripper can strip it).
                // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
                // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
                // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
                #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                    #define WRITE_NORMAL_BUFFER
                #endif
                #endif
    
                #ifndef DEBUG_DISPLAY
                    // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                    // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                    #if !defined(_SURFACE_TYPE_TRANSPARENT)
                        #if SHADERPASS == SHADERPASS_FORWARD
                        #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                        #elif SHADERPASS == SHADERPASS_GBUFFER
                        #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                        #endif
                    #endif
                #endif
    
                // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
                #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                    #define _DEFERRED_CAPABLE_MATERIAL
                #endif
    
                // Translate transparent motion vector define
                #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                    #define _WRITE_TRANSPARENT_MOTION_VECTOR
                #endif
    
                // Dots Instancing
                // DotsInstancingOptions: <None>
    
                // Various properties
    
                // HybridV1InjectedBuiltinProperties: <None>
    
                // -- Graph Properties
                CBUFFER_START(UnityPerMaterial)
                float2 HeightRemap3;
                float2 HeightRemap2;
                float4 Tiling_Offset3;
                float4 Tiling_Offset0;
                float2 HeightRemap4;
                float4 Tiling_Offset2;
                float2 HeightRemap0;
                float4 LayerMask3_TexelSize;
                float4 LayerMask2_TexelSize;
                float4 LayerNormal3_TexelSize;
                float4 LayerNormal2_TexelSize;
                float2 HeightRemap1;
                float4 Tiling_Offset1;
                float4 Layer0_TexelSize;
                float4 Layer1_TexelSize;
                float4 Layer2_TexelSize;
                float4 Layer3_TexelSize;
                float UVXZScale;
                float4 LayerNormal1_TexelSize;
                float4 LayerNormal0_TexelSize;
                float4 LayerMask1_TexelSize;
                float4 LayerMask0_TexelSize;
                float heightTransition;
                float4 BaseTex_TexelSize;
                float4 BaseNormal_TexelSize;
                float4 BaseMask_TexelSize;
                float4 Tiling_Offset;
                float2 HeightRemap;
                float4 SlopeTex_TexelSize;
                float4 SlopeNormal_TexelSize;
                float4 SlopeMask_TexelSize;
                float4 Tiling_Offset4;
                float2 SlopeRemap;
                float SlopePow;
                float4 _EmissionColor;
                float _UseShadowThreshold;
                float4 _DoubleSidedConstants;
                float _BlendMode;
                float _EnableBlendModePreserveSpecularLighting;
                float _RayTracing;
                float _RefractionModel;
                CBUFFER_END
                
                // Object and Global properties
                SAMPLER(SamplerState_Linear_Repeat);
                TEXTURE2D(LayerMask3);
                SAMPLER(samplerLayerMask3);
                TEXTURE2D(LayerMask2);
                SAMPLER(samplerLayerMask2);
                TEXTURE2D(LayerNormal3);
                SAMPLER(samplerLayerNormal3);
                TEXTURE2D(LayerNormal2);
                SAMPLER(samplerLayerNormal2);
                TEXTURE2D(Layer0);
                SAMPLER(samplerLayer0);
                TEXTURE2D(Layer1);
                SAMPLER(samplerLayer1);
                TEXTURE2D(Layer2);
                SAMPLER(samplerLayer2);
                TEXTURE2D(Layer3);
                SAMPLER(samplerLayer3);
                TEXTURE2D(LayerNormal1);
                SAMPLER(samplerLayerNormal1);
                TEXTURE2D(LayerNormal0);
                SAMPLER(samplerLayerNormal0);
                TEXTURE2D(LayerMask1);
                SAMPLER(samplerLayerMask1);
                TEXTURE2D(LayerMask0);
                SAMPLER(samplerLayerMask0);
                TEXTURE2D(BaseTex);
                SAMPLER(samplerBaseTex);
                TEXTURE2D(BaseNormal);
                SAMPLER(samplerBaseNormal);
                TEXTURE2D(BaseMask);
                SAMPLER(samplerBaseMask);
                TEXTURE2D(SlopeTex);
                SAMPLER(samplerSlopeTex);
                TEXTURE2D(SlopeNormal);
                SAMPLER(samplerSlopeNormal);
                TEXTURE2D(SlopeMask);
                SAMPLER(samplerSlopeMask);
    
                // -- Property used by ScenePickingPass
                #ifdef SCENEPICKINGPASS
                float4 _SelectionID;
                #endif
    
                // -- Properties used by SceneSelectionPass
                #ifdef SCENESELECTIONPASS
                int _ObjectId;
                int _PassValue;
                #endif
    
                // Includes
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRaytracing.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
            	#include "Assets/Shaders/TerrainShading/HeightBlend.hlsl"
    
                // --------------------------------------------------
                // Structs and Packing
    
                struct SurfaceDescriptionInputs
                {
                     float3 ObjectSpaceNormal;
                     float3 WorldSpaceNormal;
                     float3 TangentSpaceNormal;
                     float3 ObjectSpacePosition;
                };
    
                //Interpolator Packs: <None>
    
                // --------------------------------------------------
                // Graph
    
    
                // Graph Functions
                
                void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
                {
                    RGBA = float4(R, G, B, A);
                    RGB = float3(R, G, B);
                    RG = float2(R, G);
                }
                
                void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
                {
                    Out = A / B;
                }
                
                void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
                {
                    Out = UV * Tiling + Offset;
                }
                
                struct Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float
                {
                };
                
                void SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(float4 Tiling_Offset, float2 Vector2, Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float IN, out float2 OutVector2_1)
                {
                    float2 _Property_5ea954dbdecc454b839a01badac3afd6_Out_0 = Vector2;
                    float4 _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0 = Tiling_Offset;
                    float _Split_c19978cb25c5413eaf23432179b0e3af_R_1 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[0];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_G_2 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[1];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_B_3 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[2];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_A_4 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[3];
                    float4 _Combine_387ca93b6841454bad52ea2f221d199f_RGBA_4;
                    float3 _Combine_387ca93b6841454bad52ea2f221d199f_RGB_5;
                    float2 _Combine_387ca93b6841454bad52ea2f221d199f_RG_6;
                    Unity_Combine_float(_Split_c19978cb25c5413eaf23432179b0e3af_R_1, _Split_c19978cb25c5413eaf23432179b0e3af_G_2, 0, 0, _Combine_387ca93b6841454bad52ea2f221d199f_RGBA_4, _Combine_387ca93b6841454bad52ea2f221d199f_RGB_5, _Combine_387ca93b6841454bad52ea2f221d199f_RG_6);
                    float4 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGBA_4;
                    float3 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGB_5;
                    float2 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6;
                    Unity_Combine_float(_Split_c19978cb25c5413eaf23432179b0e3af_B_3, _Split_c19978cb25c5413eaf23432179b0e3af_A_4, 0, 0, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGBA_4, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGB_5, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6);
                    float2 _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3;
                    Unity_TilingAndOffset_float(_Property_5ea954dbdecc454b839a01badac3afd6_Out_0, _Combine_387ca93b6841454bad52ea2f221d199f_RG_6, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6, _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3);
                    OutVector2_1 = _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3;
                }
                
                void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
                {
                    Out = A * B;
                }
                
                void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
                {
                    Out = A * B;
                }
                
                void Desaturate_float(float3 oldcolor, float k, out float3 newcolor){
                    float intensity = dot(oldcolor,float3(0.3,0.59,0.11));
                    newcolor.x = intensity*k + oldcolor.x*(1-k);
                    newcolor.y = intensity*k + oldcolor.y*(1-k);
                    newcolor.z = intensity*k + oldcolor.z*(1-k);
                }
                
                void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
                {
                    Out = A * B;
                }
                
                void Unity_Lerp_float(float A, float B, float T, out float Out)
                {
                    Out = lerp(A, B, T);
                }
                
                struct Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float
                {
                };
                
                void SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(UnityTexture2D Albedo, UnityTexture2D Normal, UnityTexture2D Mask, float DesaturationK, float BrightnessAtten, float2 UV, float2 HeightRemap, Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float IN, out float4 oAlbedo_0, out float4 oNormal_1, out float4 oMask_2)
                {
                    UnityTexture2D _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0 = Albedo;
                    float2 _Property_76ed35a32977448f8ea254bf6de06d33_Out_0 = UV;
                    float4 _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_R_4 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.r;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_G_5 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.g;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_B_6 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.b;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_A_7 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.a;
                    float _Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0 = BrightnessAtten;
                    float4 _Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2);
                    float _Float_f48d9dc0c16249fe8fe5b97c86e7f56c_Out_0 = -0.25;
                    float2 _Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2;
                    Unity_Multiply_float2_float2(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0, (_Float_f48d9dc0c16249fe8fe5b97c86e7f56c_Out_0.xx), _Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2);
                    float4 _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_R_4 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.r;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_G_5 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.g;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_B_6 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.b;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_A_7 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.a;
                    float4 _Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2);
                    float _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0 = DesaturationK;
                    float3 _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1;
                    Desaturate_float((_Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1);
                    float3 _Multiply_410af5ac81154a3aab73254ac228eccd_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2.xyz), _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1, _Multiply_410af5ac81154a3aab73254ac228eccd_Out_2);
                    UnityTexture2D _Property_d05972164bdd4e0189593b8dae00db03_Out_0 = Normal;
                    float4 _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0 = SAMPLE_TEXTURE2D(_Property_d05972164bdd4e0189593b8dae00db03_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d05972164bdd4e0189593b8dae00db03_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0);
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_R_4 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.r;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_G_5 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.g;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_B_6 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.b;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_A_7 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.a;
                    float4 _Multiply_4999f90cbd1848acaf20b253953c0963_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_4999f90cbd1848acaf20b253953c0963_Out_2);
                    float4 _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_d05972164bdd4e0189593b8dae00db03_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d05972164bdd4e0189593b8dae00db03_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0);
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_R_4 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.r;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_G_5 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.g;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_B_6 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.b;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_A_7 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.a;
                    float4 _Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2);
                    float3 _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1;
                    Desaturate_float((_Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1);
                    float3 _Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_4999f90cbd1848acaf20b253953c0963_Out_2.xyz), _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1, _Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2);
                    UnityTexture2D _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0 = Mask;
                    float4 _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0 = SAMPLE_TEXTURE2D(_Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_R_4 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.r;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_G_5 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.g;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_B_6 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.b;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_A_7 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.a;
                    float4 _Multiply_0b2356625aad40439a89b8519e36e62b_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_0b2356625aad40439a89b8519e36e62b_Out_2);
                    float4 _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0 = SAMPLE_TEXTURE2D(_Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_R_4 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.r;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_G_5 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.g;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_B_6 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.b;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_A_7 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.a;
                    float4 _Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2);
                    float3 _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1;
                    Desaturate_float((_Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1);
                    float3 _Multiply_3c8f32d2a057478e869493099765b841_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_0b2356625aad40439a89b8519e36e62b_Out_2.xyz), _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1, _Multiply_3c8f32d2a057478e869493099765b841_Out_2);
                    float _Split_77de2b1a3326407b985f625d91e2063b_R_1 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[0];
                    float _Split_77de2b1a3326407b985f625d91e2063b_G_2 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[1];
                    float _Split_77de2b1a3326407b985f625d91e2063b_B_3 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[2];
                    float _Split_77de2b1a3326407b985f625d91e2063b_A_4 = 0;
                    float2 _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0 = HeightRemap;
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_R_1 = _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0[0];
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_G_2 = _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0[1];
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_B_3 = 0;
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_A_4 = 0;
                    float _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3;
                    Unity_Lerp_float(_Split_0df13f6921fe4db99b01dcff93c3b978_R_1, _Split_0df13f6921fe4db99b01dcff93c3b978_G_2, _Split_77de2b1a3326407b985f625d91e2063b_B_3, _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3);
                    float4 _Combine_17dba591e95443299750f53a93613083_RGBA_4;
                    float3 _Combine_17dba591e95443299750f53a93613083_RGB_5;
                    float2 _Combine_17dba591e95443299750f53a93613083_RG_6;
                    Unity_Combine_float(_Split_77de2b1a3326407b985f625d91e2063b_R_1, _Split_77de2b1a3326407b985f625d91e2063b_G_2, _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3, _Split_77de2b1a3326407b985f625d91e2063b_A_4, _Combine_17dba591e95443299750f53a93613083_RGBA_4, _Combine_17dba591e95443299750f53a93613083_RGB_5, _Combine_17dba591e95443299750f53a93613083_RG_6);
                    oAlbedo_0 = (float4(_Multiply_410af5ac81154a3aab73254ac228eccd_Out_2, 1.0));
                    oNormal_1 = (float4(_Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2, 1.0));
                    oMask_2 = _Combine_17dba591e95443299750f53a93613083_RGBA_4;
                }
                
                void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
                {
                    Out = dot(A, B);
                }
                
                void Unity_Power_float(float A, float B, out float Out)
                {
                    Out = pow(A, B);
                }
                
                void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
                {
                    Out = smoothstep(Edge1, Edge2, In);
                }
                
                void Unity_OneMinus_float(float In, out float Out)
                {
                    Out = 1 - In;
                }
                
                void BlendByMask_float(float4 a, float4 b, float4 c, float4 d, float4 blend, out float4 ret){
                    ret = a*blend.x + b*blend.y + c*blend.z + d*blend.w;
                }
                
                void Unity_Add_float4(float4 A, float4 B, out float4 Out)
                {
                    Out = A + B;
                }
    
                // Graph Vertex
                // GraphVertex: <None>
    
                // Graph Pixel
                struct SurfaceDescription
                {
                    float3 BaseColor;
                    float3 Emission;
                    float Alpha;
                    float3 BentNormal;
                    float Smoothness;
                    float Occlusion;
                    float3 NormalTS;
                    float Metallic;
                };
                
                SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
                {
                    SurfaceDescription surface = (SurfaceDescription)0;
                    UnityTexture2D _Property_4e780cffb4044909a58e26eaff6361d1_Out_0 = UnityBuildTexture2DStructNoScale(BaseTex);
                    UnityTexture2D _Property_20a5bc7358e64fe8b3327adb9ce635ea_Out_0 = UnityBuildTexture2DStructNoScale(BaseNormal);
                    UnityTexture2D _Property_090d521163b9493189233a9f2e1cf5ed_Out_0 = UnityBuildTexture2DStructNoScale(BaseMask);
                    float4 _Property_6881ae016d754988b27811b95cc834ca_Out_0 = Tiling_Offset;
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_R_1 = IN.ObjectSpacePosition[0];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_G_2 = IN.ObjectSpacePosition[1];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_B_3 = IN.ObjectSpacePosition[2];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_A_4 = 0;
                    float4 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGBA_4;
                    float3 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGB_5;
                    float2 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6;
                    Unity_Combine_float(_Split_3335daa3a4b34f69a62c9c8a1c6f39b2_R_1, _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_B_3, 0, 0, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGBA_4, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGB_5, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6);
                    float _Property_8984e4bf1c26459280f9fece3c52167c_Out_0 = UVXZScale;
                    float2 _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2;
                    Unity_Divide_float2(_Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6, (_Property_8984e4bf1c26459280f9fece3c52167c_Out_0.xx), _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2);
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_737be3819d2c4f29853810a18717cae3;
                    float2 _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_6881ae016d754988b27811b95cc834ca_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1);
                    float2 _Property_dcc00367280c4dc6b11a52aa07754830_Out_0 = HeightRemap;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_6722d68456e84aecb015a07880cbbd46;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_4e780cffb4044909a58e26eaff6361d1_Out_0, _Property_20a5bc7358e64fe8b3327adb9ce635ea_Out_0, _Property_090d521163b9493189233a9f2e1cf5ed_Out_0, 0.25, 4, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1, _Property_dcc00367280c4dc6b11a52aa07754830_Out_0, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2);
                    UnityTexture2D _Property_3d7142ef79234a0ba6cda49555992a80_Out_0 = UnityBuildTexture2DStructNoScale(Layer0);
                    UnityTexture2D _Property_42e52c243a994f04944481ff3627fc2c_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal0);
                    UnityTexture2D _Property_e67647d6cf1b44bebf91845a255b522c_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask0);
                    float4 _Property_4e6c66ba03a842e482f7040c3fe163dc_Out_0 = Tiling_Offset0;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674;
                    float2 _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_4e6c66ba03a842e482f7040c3fe163dc_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1);
                    float2 _Property_8cf19c3a22e64f0a85a51c8cbf5085e7_Out_0 = HeightRemap0;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_3d7142ef79234a0ba6cda49555992a80_Out_0, _Property_42e52c243a994f04944481ff3627fc2c_Out_0, _Property_e67647d6cf1b44bebf91845a255b522c_Out_0, 0.25, 4, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1, _Property_8cf19c3a22e64f0a85a51c8cbf5085e7_Out_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2);
                    UnityTexture2D _Property_1bce6ca387e847e1a43a4534686b655f_Out_0 = UnityBuildTexture2DStructNoScale(Layer1);
                    UnityTexture2D _Property_1e7513acda3b4b20a5a028d0da4bcfb0_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal1);
                    UnityTexture2D _Property_75d4521a27cb403399759cefa7be71f2_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask1);
                    float4 _Property_e17bf3be22544a639340ddea65766b89_Out_0 = Tiling_Offset1;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_df825eb885d947429ce6daf495a641a7;
                    float2 _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_e17bf3be22544a639340ddea65766b89_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1);
                    float2 _Property_d682537de1054cf4b1eddd1680d152fb_Out_0 = HeightRemap1;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_1bce6ca387e847e1a43a4534686b655f_Out_0, _Property_1e7513acda3b4b20a5a028d0da4bcfb0_Out_0, _Property_75d4521a27cb403399759cefa7be71f2_Out_0, 0.25, 4, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1, _Property_d682537de1054cf4b1eddd1680d152fb_Out_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2);
                    UnityTexture2D _Property_b79fba6b5b1f40b88b38803dad2bb2e5_Out_0 = UnityBuildTexture2DStructNoScale(Layer2);
                    UnityTexture2D _Property_a787f1642c6d4570af8ae47ea63a59ed_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal2);
                    UnityTexture2D _Property_f4ae055a87ef48cb8df5c603ca6f72b0_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask2);
                    float4 _Property_e12db1a96427478999d081afcb59d771_Out_0 = Tiling_Offset2;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d;
                    float2 _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_e12db1a96427478999d081afcb59d771_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1);
                    float2 _Property_3be82515dad24d76b9af558757032f30_Out_0 = HeightRemap2;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_b79fba6b5b1f40b88b38803dad2bb2e5_Out_0, _Property_a787f1642c6d4570af8ae47ea63a59ed_Out_0, _Property_f4ae055a87ef48cb8df5c603ca6f72b0_Out_0, 0.25, 4, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1, _Property_3be82515dad24d76b9af558757032f30_Out_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2);
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_R_1 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[0];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_G_2 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[1];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_B_3 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[2];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_A_4 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[3];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_R_1 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[0];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_G_2 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[1];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_B_3 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[2];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_A_4 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[3];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_R_1 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[0];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_G_2 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[1];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_B_3 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[2];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_A_4 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[3];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_R_1 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[0];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_G_2 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[1];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_B_3 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[2];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_A_4 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[3];
                    float4 _Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4;
                    float3 _Combine_f97595cb40654c9a8d82c0297e7280f3_RGB_5;
                    float2 _Combine_f97595cb40654c9a8d82c0297e7280f3_RG_6;
                    Unity_Combine_float(_Split_d81e33a0495c4ac09042d2d39dd09ba5_B_3, _Split_d2ed4cee74e042da88b7348fcfe80cab_B_3, _Split_b3522eb5287e4b28baab87cc1fa16589_B_3, _Split_a4f15428b23a40ef8f25398e9cff2d7c_B_3, _Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4, _Combine_f97595cb40654c9a8d82c0297e7280f3_RGB_5, _Combine_f97595cb40654c9a8d82c0297e7280f3_RG_6);
                    UnityTexture2D _Property_8e8b4d9a2dfc42148eb69519397ecebc_Out_0 = UnityBuildTexture2DStructNoScale(Layer3);
                    UnityTexture2D _Property_1443e12ec6544d2c8e8dcc71d67adb04_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal3);
                    UnityTexture2D _Property_b8f1cfb1112b4d2e8e2fe919f5003fb3_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask3);
                    float4 _Property_d9e7ba461b95446db56c0b99fce9de5d_Out_0 = Tiling_Offset3;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13;
                    float2 _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_d9e7ba461b95446db56c0b99fce9de5d_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1);
                    float2 _Property_e5d43ace4a66401faff3165675d44af0_Out_0 = HeightRemap3;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_8e8b4d9a2dfc42148eb69519397ecebc_Out_0, _Property_1443e12ec6544d2c8e8dcc71d67adb04_Out_0, _Property_b8f1cfb1112b4d2e8e2fe919f5003fb3_Out_0, 0.25, 4, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1, _Property_e5d43ace4a66401faff3165675d44af0_Out_0, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2);
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_R_1 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[0];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_G_2 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[1];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_B_3 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[2];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_A_4 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[3];
                    UnityTexture2D _Property_edf497c59ff340a5897695b2e8e9ed68_Out_0 = UnityBuildTexture2DStructNoScale(SlopeTex);
                    UnityTexture2D _Property_ae03f8d1bb284168ae1cb40c2c8d7dce_Out_0 = UnityBuildTexture2DStructNoScale(SlopeNormal);
                    UnityTexture2D _Property_35050279a32b481b878853831820cb33_Out_0 = UnityBuildTexture2DStructNoScale(SlopeMask);
                    float4 _Property_a3c340f0d1f647858c0d27fc6fa0d127_Out_0 = Tiling_Offset4;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67;
                    float2 _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_a3c340f0d1f647858c0d27fc6fa0d127_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1);
                    float2 _Property_8a3f864a5b9c469b92480bb635123790_Out_0 = HeightRemap4;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_edf497c59ff340a5897695b2e8e9ed68_Out_0, _Property_ae03f8d1bb284168ae1cb40c2c8d7dce_Out_0, _Property_35050279a32b481b878853831820cb33_Out_0, 0.25, 4, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1, _Property_8a3f864a5b9c469b92480bb635123790_Out_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2);
                    float _Split_015a6ee9887b47abb21193d18e609740_R_1 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[0];
                    float _Split_015a6ee9887b47abb21193d18e609740_G_2 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[1];
                    float _Split_015a6ee9887b47abb21193d18e609740_B_3 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[2];
                    float _Split_015a6ee9887b47abb21193d18e609740_A_4 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[3];
                    float4 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4;
                    float3 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGB_5;
                    float2 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RG_6;
                    Unity_Combine_float(_Split_d87c9f86d0a94f8b9b66cbcb29d89dde_B_3, _Split_015a6ee9887b47abb21193d18e609740_B_3, 0, 0, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGB_5, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RG_6);
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_R_1 = float4(0,0,0,0)[0];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_G_2 = float4(0,0,0,0)[1];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_B_3 = float4(0,0,0,0)[2];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_A_4 = float4(0,0,0,0)[3];
                    float4 _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4;
                    float3 _Combine_7b79ed205a4b435d8742217505a4c51d_RGB_5;
                    float2 _Combine_7b79ed205a4b435d8742217505a4c51d_RG_6;
                    Unity_Combine_float(1, _Split_ea099c0905af42a6804ca0dc2f58dc2f_R_1, _Split_ea099c0905af42a6804ca0dc2f58dc2f_G_2, _Split_ea099c0905af42a6804ca0dc2f58dc2f_B_3, _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4, _Combine_7b79ed205a4b435d8742217505a4c51d_RGB_5, _Combine_7b79ed205a4b435d8742217505a4c51d_RG_6);
                    float2 _Property_5538a1bac07f487589432be4f79dd05e_Out_0 = SlopeRemap;
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_R_1 = _Property_5538a1bac07f487589432be4f79dd05e_Out_0[0];
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_G_2 = _Property_5538a1bac07f487589432be4f79dd05e_Out_0[1];
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_B_3 = 0;
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_A_4 = 0;
                    float _DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2;
                    Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(0, 1, 0), _DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2);
                    float _Property_795a1803a8484214b987093ec034ab6a_Out_0 = SlopePow;
                    float _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2;
                    Unity_Power_float(_DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2, _Property_795a1803a8484214b987093ec034ab6a_Out_0, _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2);
                    float _Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3;
                    Unity_Smoothstep_float(_Split_03a4c3769cad421fb634dee3fa2beefb_R_1, _Split_03a4c3769cad421fb634dee3fa2beefb_G_2, _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2, _Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3);
                    float _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1;
                    Unity_OneMinus_float(_Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3, _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1);
                    float4 _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4;
                    float3 _Combine_9702e823fbe443b4b07afb499b6912a4_RGB_5;
                    float2 _Combine_9702e823fbe443b4b07afb499b6912a4_RG_6;
                    Unity_Combine_float(_Split_ea099c0905af42a6804ca0dc2f58dc2f_A_4, _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1, 0, 0, _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4, _Combine_9702e823fbe443b4b07afb499b6912a4_RGB_5, _Combine_9702e823fbe443b4b07afb499b6912a4_RG_6);
                    float _Property_d5cf363bc21a4f92a00fac464b9b11cf_Out_0 = heightTransition;
                    float4 _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5;
                    float4 _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6;
                    HeightBlend8Layers_float(_Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4, _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4, _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4, _Property_d5cf363bc21a4f92a00fac464b9b11cf_Out_0, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6);
                    float4 _BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5);
                    float4 _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5);
                    float4 _Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5, _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5, _Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2);
                    float4 _BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5);
                    float4 _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5);
                    float4 _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5, _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5, _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2);
                    float _Split_d9a7a90627444523a2cda58b36d68116_R_1 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[0];
                    float _Split_d9a7a90627444523a2cda58b36d68116_G_2 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[1];
                    float _Split_d9a7a90627444523a2cda58b36d68116_B_3 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[2];
                    float _Split_d9a7a90627444523a2cda58b36d68116_A_4 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[3];
                    float4 _BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5);
                    float4 _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5);
                    float4 _Add_090184f4bd18493ca37179ea1a8364d0_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5, _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5, _Add_090184f4bd18493ca37179ea1a8364d0_Out_2);
                    surface.BaseColor = (_Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2.xyz);
                    surface.Emission = float3(0, 0, 0);
                    surface.Alpha = 1;
                    surface.BentNormal = IN.TangentSpaceNormal;
                    surface.Smoothness = _Split_d9a7a90627444523a2cda58b36d68116_A_4;
                    surface.Occlusion = _Split_d9a7a90627444523a2cda58b36d68116_G_2;
                    surface.NormalTS = (_Add_090184f4bd18493ca37179ea1a8364d0_Out_2.xyz);
                    surface.Metallic = _Split_d9a7a90627444523a2cda58b36d68116_R_1;
                    return surface;
                }
    
                // --------------------------------------------------
                // Build Graph Inputs
    
                SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
                {
                    SurfaceDescriptionInputs output;
                    ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
                
                    output.WorldSpaceNormal =            normalize(input.tangentToWorld[2].xyz);
                    #if defined(SHADER_STAGE_RAY_TRACING)
                    output.ObjectSpaceNormal =           mul(output.WorldSpaceNormal, (float3x3) ObjectToWorld3x4());
                    #else
                    output.ObjectSpaceNormal =           normalize(mul(output.WorldSpaceNormal, (float3x3) UNITY_MATRIX_M));           // transposed multiplication by inverse matrix to handle normal scale
                    #endif
                    output.TangentSpaceNormal =          float3(0.0f, 0.0f, 1.0f);
                    output.ObjectSpacePosition =         TransformWorldToObject(input.positionRWS);
                
                    // splice point to copy frag inputs custom interpolator pack into the SDI
                    /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
                
                    return output;
                }
                
    
                // --------------------------------------------------
                // Build Surface Data (Specific Material)
    
            void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
                {
                    ZERO_INITIALIZE(SurfaceData, surfaceData);
                
                    // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
                    // however specularOcclusion can come from the graph, so need to be init here so it can be override.
                    surfaceData.specularOcclusion = 1.0;
                
                    surfaceData.baseColor =                 surfaceDescription.BaseColor;
                    surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
                    surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
                    surfaceData.metallic =                  surfaceDescription.Metallic;
                
                    #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                        if (_EnableSSRefraction)
                        {
                
                            surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                            surfaceDescription.Alpha = 1.0;
                        }
                        else
                        {
                            surfaceData.ior = 1.0;
                            surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                            surfaceData.atDistance = 1.0;
                            surfaceData.transmittanceMask = 0.0;
                            surfaceDescription.Alpha = 1.0;
                        }
                    #else
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                    #endif
                
                    // These static material feature allow compile time optimization
                    surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
                    #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_TRANSMISSION
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_ANISOTROPY
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
                    #endif
                
                    #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                        // Require to have setup baseColor
                        // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                        surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
                    #endif
                
                    #ifdef _DOUBLESIDED_ON
                        float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                    #else
                        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                    #endif
                
                    // normal delivered to master node
                    GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
                
                    surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                
                    surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
                
                
                    #if HAVE_DECALS
                        if (_EnableDecals)
                        {
                            float alpha = 1.0;
                            alpha = surfaceDescription.Alpha;
                
                            // Both uses and modifies 'surfaceData.normalWS'.
                            DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                            ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                        }
                    #endif
                
                    bentNormalWS = surfaceData.normalWS;
                
                    surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
                
                    #ifdef DEBUG_DISPLAY
                        if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                        {
                            // TODO: need to update mip info
                            surfaceData.metallic = 0;
                        }
                
                        // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                        // as it can modify attribute use for static lighting
                        ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
                    #endif
                
                    // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
                    // If user provide bent normal then we process a better term
                    #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                        // Just use the value passed through via the slot (not active otherwise)
                    #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                        // If we have bent normal and ambient occlusion, process a specular occlusion
                        surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                    #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                        surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                    #endif
                
                    #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                        surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                    #endif
                }
                
    
                // --------------------------------------------------
                // Get Surface And BuiltinData
    
                void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
                {
                    // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                    #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                    #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                    #endif
                    #endif
    
                    #ifndef SHADER_UNLIT
                    #ifdef _DOUBLESIDED_ON
                        float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                    #else
                        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                    #endif
    
                    ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                    #endif // SHADER_UNLIT
    
                    SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
    
                    #if defined(HAVE_VFX_MODIFICATION)
                    GraphProperties properties;
                    ZERO_INITIALIZE(GraphProperties, properties);
    
                    GetElementPixelProperties(fragInputs, properties);
    
                    SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                    #else
                    SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                    #endif
    
                    // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                    // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                    #ifdef _ALPHATEST_ON
                        float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                        #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                        // The TransparentDepthPrepass is also used with SSR transparent.
                        // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                        // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                        #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                        // DepthPostpass always use its own alpha threshold
                        alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                        #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                        // If use shadow threshold isn't enable we don't allow any test
                        #endif
    
                        GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                    #endif
    
                    #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                    #endif
    
                    #ifndef SHADER_UNLIT
                    float3 bentNormalWS;
                    BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
    
                    // Builtin Data
                    // For back lighting we use the oposite vertex normal
                    InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
    
                    #else
                    BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
    
                    ZERO_INITIALIZE(BuiltinData, builtinData); // No call to InitBuiltinData as we don't have any lighting
                    builtinData.opacity = surfaceDescription.Alpha;
    
                    #if defined(DEBUG_DISPLAY)
                        // Light Layers are currently not used for the Unlit shader (because it is not lit)
                        // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                        // display in the light layers visualization mode, therefore we need the renderingLayers
                        builtinData.renderingLayers = GetMeshRenderingLightLayer();
                    #endif
    
                    #endif // SHADER_UNLIT
    
                    #ifdef _ALPHATEST_ON
                        // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                        builtinData.alphaClipTreshold = alphaCutoff;
                    #endif
    
                    // override sampleBakedGI - not used by Unlit
    
            		// If we want to force forward emissive and we have GBuffer pass, don't do anything
            		#if !(SHADERPASS == SHADERPASS_GBUFFER && defined(_FORCE_FORWARD_EMISSIVE))
                    builtinData.emissiveColor = surfaceDescription.Emission;
            		#endif
    
                    // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                    // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                    // This is a limitation of the current MRT approach.
    
                    #if _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
                    #endif
    
                    // TODO: We should generate distortion / distortionBlur for non distortion pass
                    #if (SHADERPASS == SHADERPASS_DISTORTION)
                    builtinData.distortion = surfaceDescription.Distortion;
                    builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                    #endif
    
                    #ifndef SHADER_UNLIT
                    // PostInitBuiltinData call ApplyDebugToBuiltinData
                    PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                    #else
                    ApplyDebugToBuiltinData(builtinData);
                    #endif
    
                    RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
                }
    
                // --------------------------------------------------
                // Main
    
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingVisibility.hlsl"
    
                // --------------------------------------------------
                // Visual Effect Vertex Invocations
    
            	#ifdef HAVE_VFX_MODIFICATION
            	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
            	#endif
    
                ENDHLSL
            }
            Pass
            {
                Name "ForwardDXR"
                Tags
                {
                    "LightMode" = "ForwardDXR"
                }
    
                // Render State
                // RenderState: <None>
    
                // Debug
                // <None>
    
                // --------------------------------------------------
                // Pass
    
                HLSLPROGRAM
    
                // Pragmas
                #pragma target 5.0
                #pragma raytracing surface_shader
                #pragma only_renderers d3d11
    
                // Keywords
                #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
                #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
                #pragma shader_feature_local _ _DOUBLESIDED_ON
                #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
                #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
                #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
                #pragma multi_compile _ DEBUG_DISPLAY
                #pragma shader_feature_local_fragment _ _DISABLE_DECALS
                #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
                #pragma shader_feature_local_fragment _ _DISABLE_SSR
                #pragma shader_feature_local_raytracing _ _DISABLE_SSR
                #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
                #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
                #pragma multi_compile_fragment _ LIGHTMAP_ON
                #pragma multi_compile_raytracing _ LIGHTMAP_ON
                #pragma multi_compile_fragment _ DIRLIGHTMAP_COMBINED
                #pragma multi_compile_raytracing _ DIRLIGHTMAP_COMBINED
                #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
                #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
                #pragma multi_compile _ DYNAMICLIGHTMAP_ON
                #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
                #pragma shader_feature _ _FORCE_FORWARD_EMISSIVE
                // GraphKeywords: <None>
    
                // For custom interpolators to inject a substruct definition before FragInputs definition,
                // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
                /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
    
    
                // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
            	#ifdef HAVE_VFX_MODIFICATION
            	struct FragInputsVFX
                {
                    /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
                };
                #endif
    
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
            	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
    
                // --------------------------------------------------
                // Defines
    
                // Attribute
                #define ATTRIBUTES_NEED_NORMAL
                #define ATTRIBUTES_NEED_TANGENT
                #define ATTRIBUTES_NEED_TEXCOORD1
                #define ATTRIBUTES_NEED_TEXCOORD2
                #define VARYINGS_NEED_POSITION_WS
                #define VARYINGS_NEED_TANGENT_TO_WORLD
                #define VARYINGS_NEED_TEXCOORD1
                #define VARYINGS_NEED_TEXCOORD2
    
    
    
                #define SHADERPASS SHADERPASS_RAYTRACING_FORWARD
                #define SHADOW_LOW
                #define RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define HAS_LIGHTLOOP 1
    
    
                // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
                // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
                // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
                // to still allow us to rename the field and keyword of this node without breaking existing code.
                #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
                #endif
    
                #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
                #endif
                // end
    
                #ifndef SHADER_UNLIT
                // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
                // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
                #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                    #define VARYINGS_NEED_CULLFACE
                #endif
                #endif
    
                // Specific Material Define
            #define _AMBIENT_OCCLUSION 1
                #define _SPECULAR_OCCLUSION_FROM_AO 1
                #define _ENERGY_CONSERVING_SPECULAR 1
                
                // If we use subsurface scattering, enable output split lighting (for forward pass)
                #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
                    #define OUTPUT_SPLIT_LIGHTING
                #endif
                
                // This shader support recursive rendering for raytracing
                #define HAVE_RECURSIVE_RENDERING
                
                // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
    
                // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
                // we should have a code like this:
                // if !defined(_DISABLE_SSR_TRANSPARENT)
                // pragma multi_compile _ WRITE_NORMAL_BUFFER
                // endif
                // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
                // it based on if SSR transparent in frame settings and not (and stripper can strip it).
                // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
                // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
                // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
                #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                    #define WRITE_NORMAL_BUFFER
                #endif
                #endif
    
                #ifndef DEBUG_DISPLAY
                    // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                    // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                    #if !defined(_SURFACE_TYPE_TRANSPARENT)
                        #if SHADERPASS == SHADERPASS_FORWARD
                        #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                        #elif SHADERPASS == SHADERPASS_GBUFFER
                        #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                        #endif
                    #endif
                #endif
    
                // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
                #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                    #define _DEFERRED_CAPABLE_MATERIAL
                #endif
    
                // Translate transparent motion vector define
                #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                    #define _WRITE_TRANSPARENT_MOTION_VECTOR
                #endif
    
                // Dots Instancing
                // DotsInstancingOptions: <None>
    
                // Various properties
    
                // HybridV1InjectedBuiltinProperties: <None>
    
                // -- Graph Properties
                CBUFFER_START(UnityPerMaterial)
                float2 HeightRemap3;
                float2 HeightRemap2;
                float4 Tiling_Offset3;
                float4 Tiling_Offset0;
                float2 HeightRemap4;
                float4 Tiling_Offset2;
                float2 HeightRemap0;
                float4 LayerMask3_TexelSize;
                float4 LayerMask2_TexelSize;
                float4 LayerNormal3_TexelSize;
                float4 LayerNormal2_TexelSize;
                float2 HeightRemap1;
                float4 Tiling_Offset1;
                float4 Layer0_TexelSize;
                float4 Layer1_TexelSize;
                float4 Layer2_TexelSize;
                float4 Layer3_TexelSize;
                float UVXZScale;
                float4 LayerNormal1_TexelSize;
                float4 LayerNormal0_TexelSize;
                float4 LayerMask1_TexelSize;
                float4 LayerMask0_TexelSize;
                float heightTransition;
                float4 BaseTex_TexelSize;
                float4 BaseNormal_TexelSize;
                float4 BaseMask_TexelSize;
                float4 Tiling_Offset;
                float2 HeightRemap;
                float4 SlopeTex_TexelSize;
                float4 SlopeNormal_TexelSize;
                float4 SlopeMask_TexelSize;
                float4 Tiling_Offset4;
                float2 SlopeRemap;
                float SlopePow;
                float4 _EmissionColor;
                float _UseShadowThreshold;
                float4 _DoubleSidedConstants;
                float _BlendMode;
                float _EnableBlendModePreserveSpecularLighting;
                float _RayTracing;
                float _RefractionModel;
                CBUFFER_END
                
                // Object and Global properties
                SAMPLER(SamplerState_Linear_Repeat);
                TEXTURE2D(LayerMask3);
                SAMPLER(samplerLayerMask3);
                TEXTURE2D(LayerMask2);
                SAMPLER(samplerLayerMask2);
                TEXTURE2D(LayerNormal3);
                SAMPLER(samplerLayerNormal3);
                TEXTURE2D(LayerNormal2);
                SAMPLER(samplerLayerNormal2);
                TEXTURE2D(Layer0);
                SAMPLER(samplerLayer0);
                TEXTURE2D(Layer1);
                SAMPLER(samplerLayer1);
                TEXTURE2D(Layer2);
                SAMPLER(samplerLayer2);
                TEXTURE2D(Layer3);
                SAMPLER(samplerLayer3);
                TEXTURE2D(LayerNormal1);
                SAMPLER(samplerLayerNormal1);
                TEXTURE2D(LayerNormal0);
                SAMPLER(samplerLayerNormal0);
                TEXTURE2D(LayerMask1);
                SAMPLER(samplerLayerMask1);
                TEXTURE2D(LayerMask0);
                SAMPLER(samplerLayerMask0);
                TEXTURE2D(BaseTex);
                SAMPLER(samplerBaseTex);
                TEXTURE2D(BaseNormal);
                SAMPLER(samplerBaseNormal);
                TEXTURE2D(BaseMask);
                SAMPLER(samplerBaseMask);
                TEXTURE2D(SlopeTex);
                SAMPLER(samplerSlopeTex);
                TEXTURE2D(SlopeNormal);
                SAMPLER(samplerSlopeNormal);
                TEXTURE2D(SlopeMask);
                SAMPLER(samplerSlopeMask);
    
                // -- Property used by ScenePickingPass
                #ifdef SCENEPICKINGPASS
                float4 _SelectionID;
                #endif
    
                // -- Properties used by SceneSelectionPass
                #ifdef SCENESELECTIONPASS
                int _ObjectId;
                int _PassValue;
                #endif
    
                // Includes
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRaytracing.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingLightLoop.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
            	#include "Assets/Shaders/TerrainShading/HeightBlend.hlsl"
    
                // --------------------------------------------------
                // Structs and Packing
    
                struct SurfaceDescriptionInputs
                {
                     float3 ObjectSpaceNormal;
                     float3 WorldSpaceNormal;
                     float3 TangentSpaceNormal;
                     float3 ObjectSpacePosition;
                };
    
                //Interpolator Packs: <None>
    
                // --------------------------------------------------
                // Graph
    
    
                // Graph Functions
                
                void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
                {
                    RGBA = float4(R, G, B, A);
                    RGB = float3(R, G, B);
                    RG = float2(R, G);
                }
                
                void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
                {
                    Out = A / B;
                }
                
                void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
                {
                    Out = UV * Tiling + Offset;
                }
                
                struct Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float
                {
                };
                
                void SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(float4 Tiling_Offset, float2 Vector2, Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float IN, out float2 OutVector2_1)
                {
                    float2 _Property_5ea954dbdecc454b839a01badac3afd6_Out_0 = Vector2;
                    float4 _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0 = Tiling_Offset;
                    float _Split_c19978cb25c5413eaf23432179b0e3af_R_1 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[0];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_G_2 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[1];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_B_3 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[2];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_A_4 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[3];
                    float4 _Combine_387ca93b6841454bad52ea2f221d199f_RGBA_4;
                    float3 _Combine_387ca93b6841454bad52ea2f221d199f_RGB_5;
                    float2 _Combine_387ca93b6841454bad52ea2f221d199f_RG_6;
                    Unity_Combine_float(_Split_c19978cb25c5413eaf23432179b0e3af_R_1, _Split_c19978cb25c5413eaf23432179b0e3af_G_2, 0, 0, _Combine_387ca93b6841454bad52ea2f221d199f_RGBA_4, _Combine_387ca93b6841454bad52ea2f221d199f_RGB_5, _Combine_387ca93b6841454bad52ea2f221d199f_RG_6);
                    float4 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGBA_4;
                    float3 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGB_5;
                    float2 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6;
                    Unity_Combine_float(_Split_c19978cb25c5413eaf23432179b0e3af_B_3, _Split_c19978cb25c5413eaf23432179b0e3af_A_4, 0, 0, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGBA_4, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGB_5, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6);
                    float2 _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3;
                    Unity_TilingAndOffset_float(_Property_5ea954dbdecc454b839a01badac3afd6_Out_0, _Combine_387ca93b6841454bad52ea2f221d199f_RG_6, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6, _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3);
                    OutVector2_1 = _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3;
                }
                
                void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
                {
                    Out = A * B;
                }
                
                void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
                {
                    Out = A * B;
                }
                
                void Desaturate_float(float3 oldcolor, float k, out float3 newcolor){
                    float intensity = dot(oldcolor,float3(0.3,0.59,0.11));
                    newcolor.x = intensity*k + oldcolor.x*(1-k);
                    newcolor.y = intensity*k + oldcolor.y*(1-k);
                    newcolor.z = intensity*k + oldcolor.z*(1-k);
                }
                
                void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
                {
                    Out = A * B;
                }
                
                void Unity_Lerp_float(float A, float B, float T, out float Out)
                {
                    Out = lerp(A, B, T);
                }
                
                struct Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float
                {
                };
                
                void SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(UnityTexture2D Albedo, UnityTexture2D Normal, UnityTexture2D Mask, float DesaturationK, float BrightnessAtten, float2 UV, float2 HeightRemap, Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float IN, out float4 oAlbedo_0, out float4 oNormal_1, out float4 oMask_2)
                {
                    UnityTexture2D _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0 = Albedo;
                    float2 _Property_76ed35a32977448f8ea254bf6de06d33_Out_0 = UV;
                    float4 _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_R_4 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.r;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_G_5 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.g;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_B_6 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.b;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_A_7 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.a;
                    float _Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0 = BrightnessAtten;
                    float4 _Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2);
                    float _Float_f48d9dc0c16249fe8fe5b97c86e7f56c_Out_0 = -0.25;
                    float2 _Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2;
                    Unity_Multiply_float2_float2(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0, (_Float_f48d9dc0c16249fe8fe5b97c86e7f56c_Out_0.xx), _Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2);
                    float4 _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_R_4 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.r;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_G_5 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.g;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_B_6 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.b;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_A_7 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.a;
                    float4 _Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2);
                    float _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0 = DesaturationK;
                    float3 _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1;
                    Desaturate_float((_Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1);
                    float3 _Multiply_410af5ac81154a3aab73254ac228eccd_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2.xyz), _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1, _Multiply_410af5ac81154a3aab73254ac228eccd_Out_2);
                    UnityTexture2D _Property_d05972164bdd4e0189593b8dae00db03_Out_0 = Normal;
                    float4 _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0 = SAMPLE_TEXTURE2D(_Property_d05972164bdd4e0189593b8dae00db03_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d05972164bdd4e0189593b8dae00db03_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0);
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_R_4 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.r;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_G_5 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.g;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_B_6 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.b;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_A_7 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.a;
                    float4 _Multiply_4999f90cbd1848acaf20b253953c0963_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_4999f90cbd1848acaf20b253953c0963_Out_2);
                    float4 _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_d05972164bdd4e0189593b8dae00db03_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d05972164bdd4e0189593b8dae00db03_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0);
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_R_4 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.r;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_G_5 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.g;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_B_6 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.b;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_A_7 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.a;
                    float4 _Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2);
                    float3 _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1;
                    Desaturate_float((_Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1);
                    float3 _Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_4999f90cbd1848acaf20b253953c0963_Out_2.xyz), _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1, _Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2);
                    UnityTexture2D _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0 = Mask;
                    float4 _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0 = SAMPLE_TEXTURE2D(_Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_R_4 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.r;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_G_5 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.g;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_B_6 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.b;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_A_7 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.a;
                    float4 _Multiply_0b2356625aad40439a89b8519e36e62b_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_0b2356625aad40439a89b8519e36e62b_Out_2);
                    float4 _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0 = SAMPLE_TEXTURE2D(_Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_R_4 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.r;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_G_5 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.g;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_B_6 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.b;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_A_7 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.a;
                    float4 _Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2);
                    float3 _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1;
                    Desaturate_float((_Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1);
                    float3 _Multiply_3c8f32d2a057478e869493099765b841_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_0b2356625aad40439a89b8519e36e62b_Out_2.xyz), _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1, _Multiply_3c8f32d2a057478e869493099765b841_Out_2);
                    float _Split_77de2b1a3326407b985f625d91e2063b_R_1 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[0];
                    float _Split_77de2b1a3326407b985f625d91e2063b_G_2 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[1];
                    float _Split_77de2b1a3326407b985f625d91e2063b_B_3 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[2];
                    float _Split_77de2b1a3326407b985f625d91e2063b_A_4 = 0;
                    float2 _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0 = HeightRemap;
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_R_1 = _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0[0];
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_G_2 = _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0[1];
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_B_3 = 0;
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_A_4 = 0;
                    float _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3;
                    Unity_Lerp_float(_Split_0df13f6921fe4db99b01dcff93c3b978_R_1, _Split_0df13f6921fe4db99b01dcff93c3b978_G_2, _Split_77de2b1a3326407b985f625d91e2063b_B_3, _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3);
                    float4 _Combine_17dba591e95443299750f53a93613083_RGBA_4;
                    float3 _Combine_17dba591e95443299750f53a93613083_RGB_5;
                    float2 _Combine_17dba591e95443299750f53a93613083_RG_6;
                    Unity_Combine_float(_Split_77de2b1a3326407b985f625d91e2063b_R_1, _Split_77de2b1a3326407b985f625d91e2063b_G_2, _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3, _Split_77de2b1a3326407b985f625d91e2063b_A_4, _Combine_17dba591e95443299750f53a93613083_RGBA_4, _Combine_17dba591e95443299750f53a93613083_RGB_5, _Combine_17dba591e95443299750f53a93613083_RG_6);
                    oAlbedo_0 = (float4(_Multiply_410af5ac81154a3aab73254ac228eccd_Out_2, 1.0));
                    oNormal_1 = (float4(_Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2, 1.0));
                    oMask_2 = _Combine_17dba591e95443299750f53a93613083_RGBA_4;
                }
                
                void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
                {
                    Out = dot(A, B);
                }
                
                void Unity_Power_float(float A, float B, out float Out)
                {
                    Out = pow(A, B);
                }
                
                void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
                {
                    Out = smoothstep(Edge1, Edge2, In);
                }
                
                void Unity_OneMinus_float(float In, out float Out)
                {
                    Out = 1 - In;
                }
                
                void BlendByMask_float(float4 a, float4 b, float4 c, float4 d, float4 blend, out float4 ret){
                    ret = a*blend.x + b*blend.y + c*blend.z + d*blend.w;
                }
                
                void Unity_Add_float4(float4 A, float4 B, out float4 Out)
                {
                    Out = A + B;
                }
    
                // Graph Vertex
                // GraphVertex: <None>
    
                // Graph Pixel
                struct SurfaceDescription
                {
                    float3 BaseColor;
                    float3 Emission;
                    float Alpha;
                    float3 BentNormal;
                    float Smoothness;
                    float Occlusion;
                    float3 NormalTS;
                    float Metallic;
                };
                
                SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
                {
                    SurfaceDescription surface = (SurfaceDescription)0;
                    UnityTexture2D _Property_4e780cffb4044909a58e26eaff6361d1_Out_0 = UnityBuildTexture2DStructNoScale(BaseTex);
                    UnityTexture2D _Property_20a5bc7358e64fe8b3327adb9ce635ea_Out_0 = UnityBuildTexture2DStructNoScale(BaseNormal);
                    UnityTexture2D _Property_090d521163b9493189233a9f2e1cf5ed_Out_0 = UnityBuildTexture2DStructNoScale(BaseMask);
                    float4 _Property_6881ae016d754988b27811b95cc834ca_Out_0 = Tiling_Offset;
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_R_1 = IN.ObjectSpacePosition[0];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_G_2 = IN.ObjectSpacePosition[1];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_B_3 = IN.ObjectSpacePosition[2];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_A_4 = 0;
                    float4 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGBA_4;
                    float3 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGB_5;
                    float2 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6;
                    Unity_Combine_float(_Split_3335daa3a4b34f69a62c9c8a1c6f39b2_R_1, _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_B_3, 0, 0, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGBA_4, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGB_5, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6);
                    float _Property_8984e4bf1c26459280f9fece3c52167c_Out_0 = UVXZScale;
                    float2 _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2;
                    Unity_Divide_float2(_Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6, (_Property_8984e4bf1c26459280f9fece3c52167c_Out_0.xx), _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2);
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_737be3819d2c4f29853810a18717cae3;
                    float2 _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_6881ae016d754988b27811b95cc834ca_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1);
                    float2 _Property_dcc00367280c4dc6b11a52aa07754830_Out_0 = HeightRemap;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_6722d68456e84aecb015a07880cbbd46;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_4e780cffb4044909a58e26eaff6361d1_Out_0, _Property_20a5bc7358e64fe8b3327adb9ce635ea_Out_0, _Property_090d521163b9493189233a9f2e1cf5ed_Out_0, 0.25, 4, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1, _Property_dcc00367280c4dc6b11a52aa07754830_Out_0, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2);
                    UnityTexture2D _Property_3d7142ef79234a0ba6cda49555992a80_Out_0 = UnityBuildTexture2DStructNoScale(Layer0);
                    UnityTexture2D _Property_42e52c243a994f04944481ff3627fc2c_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal0);
                    UnityTexture2D _Property_e67647d6cf1b44bebf91845a255b522c_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask0);
                    float4 _Property_4e6c66ba03a842e482f7040c3fe163dc_Out_0 = Tiling_Offset0;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674;
                    float2 _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_4e6c66ba03a842e482f7040c3fe163dc_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1);
                    float2 _Property_8cf19c3a22e64f0a85a51c8cbf5085e7_Out_0 = HeightRemap0;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_3d7142ef79234a0ba6cda49555992a80_Out_0, _Property_42e52c243a994f04944481ff3627fc2c_Out_0, _Property_e67647d6cf1b44bebf91845a255b522c_Out_0, 0.25, 4, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1, _Property_8cf19c3a22e64f0a85a51c8cbf5085e7_Out_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2);
                    UnityTexture2D _Property_1bce6ca387e847e1a43a4534686b655f_Out_0 = UnityBuildTexture2DStructNoScale(Layer1);
                    UnityTexture2D _Property_1e7513acda3b4b20a5a028d0da4bcfb0_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal1);
                    UnityTexture2D _Property_75d4521a27cb403399759cefa7be71f2_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask1);
                    float4 _Property_e17bf3be22544a639340ddea65766b89_Out_0 = Tiling_Offset1;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_df825eb885d947429ce6daf495a641a7;
                    float2 _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_e17bf3be22544a639340ddea65766b89_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1);
                    float2 _Property_d682537de1054cf4b1eddd1680d152fb_Out_0 = HeightRemap1;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_1bce6ca387e847e1a43a4534686b655f_Out_0, _Property_1e7513acda3b4b20a5a028d0da4bcfb0_Out_0, _Property_75d4521a27cb403399759cefa7be71f2_Out_0, 0.25, 4, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1, _Property_d682537de1054cf4b1eddd1680d152fb_Out_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2);
                    UnityTexture2D _Property_b79fba6b5b1f40b88b38803dad2bb2e5_Out_0 = UnityBuildTexture2DStructNoScale(Layer2);
                    UnityTexture2D _Property_a787f1642c6d4570af8ae47ea63a59ed_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal2);
                    UnityTexture2D _Property_f4ae055a87ef48cb8df5c603ca6f72b0_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask2);
                    float4 _Property_e12db1a96427478999d081afcb59d771_Out_0 = Tiling_Offset2;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d;
                    float2 _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_e12db1a96427478999d081afcb59d771_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1);
                    float2 _Property_3be82515dad24d76b9af558757032f30_Out_0 = HeightRemap2;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_b79fba6b5b1f40b88b38803dad2bb2e5_Out_0, _Property_a787f1642c6d4570af8ae47ea63a59ed_Out_0, _Property_f4ae055a87ef48cb8df5c603ca6f72b0_Out_0, 0.25, 4, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1, _Property_3be82515dad24d76b9af558757032f30_Out_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2);
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_R_1 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[0];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_G_2 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[1];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_B_3 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[2];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_A_4 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[3];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_R_1 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[0];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_G_2 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[1];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_B_3 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[2];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_A_4 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[3];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_R_1 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[0];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_G_2 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[1];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_B_3 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[2];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_A_4 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[3];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_R_1 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[0];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_G_2 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[1];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_B_3 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[2];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_A_4 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[3];
                    float4 _Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4;
                    float3 _Combine_f97595cb40654c9a8d82c0297e7280f3_RGB_5;
                    float2 _Combine_f97595cb40654c9a8d82c0297e7280f3_RG_6;
                    Unity_Combine_float(_Split_d81e33a0495c4ac09042d2d39dd09ba5_B_3, _Split_d2ed4cee74e042da88b7348fcfe80cab_B_3, _Split_b3522eb5287e4b28baab87cc1fa16589_B_3, _Split_a4f15428b23a40ef8f25398e9cff2d7c_B_3, _Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4, _Combine_f97595cb40654c9a8d82c0297e7280f3_RGB_5, _Combine_f97595cb40654c9a8d82c0297e7280f3_RG_6);
                    UnityTexture2D _Property_8e8b4d9a2dfc42148eb69519397ecebc_Out_0 = UnityBuildTexture2DStructNoScale(Layer3);
                    UnityTexture2D _Property_1443e12ec6544d2c8e8dcc71d67adb04_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal3);
                    UnityTexture2D _Property_b8f1cfb1112b4d2e8e2fe919f5003fb3_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask3);
                    float4 _Property_d9e7ba461b95446db56c0b99fce9de5d_Out_0 = Tiling_Offset3;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13;
                    float2 _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_d9e7ba461b95446db56c0b99fce9de5d_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1);
                    float2 _Property_e5d43ace4a66401faff3165675d44af0_Out_0 = HeightRemap3;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_8e8b4d9a2dfc42148eb69519397ecebc_Out_0, _Property_1443e12ec6544d2c8e8dcc71d67adb04_Out_0, _Property_b8f1cfb1112b4d2e8e2fe919f5003fb3_Out_0, 0.25, 4, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1, _Property_e5d43ace4a66401faff3165675d44af0_Out_0, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2);
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_R_1 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[0];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_G_2 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[1];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_B_3 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[2];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_A_4 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[3];
                    UnityTexture2D _Property_edf497c59ff340a5897695b2e8e9ed68_Out_0 = UnityBuildTexture2DStructNoScale(SlopeTex);
                    UnityTexture2D _Property_ae03f8d1bb284168ae1cb40c2c8d7dce_Out_0 = UnityBuildTexture2DStructNoScale(SlopeNormal);
                    UnityTexture2D _Property_35050279a32b481b878853831820cb33_Out_0 = UnityBuildTexture2DStructNoScale(SlopeMask);
                    float4 _Property_a3c340f0d1f647858c0d27fc6fa0d127_Out_0 = Tiling_Offset4;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67;
                    float2 _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_a3c340f0d1f647858c0d27fc6fa0d127_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1);
                    float2 _Property_8a3f864a5b9c469b92480bb635123790_Out_0 = HeightRemap4;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_edf497c59ff340a5897695b2e8e9ed68_Out_0, _Property_ae03f8d1bb284168ae1cb40c2c8d7dce_Out_0, _Property_35050279a32b481b878853831820cb33_Out_0, 0.25, 4, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1, _Property_8a3f864a5b9c469b92480bb635123790_Out_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2);
                    float _Split_015a6ee9887b47abb21193d18e609740_R_1 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[0];
                    float _Split_015a6ee9887b47abb21193d18e609740_G_2 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[1];
                    float _Split_015a6ee9887b47abb21193d18e609740_B_3 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[2];
                    float _Split_015a6ee9887b47abb21193d18e609740_A_4 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[3];
                    float4 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4;
                    float3 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGB_5;
                    float2 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RG_6;
                    Unity_Combine_float(_Split_d87c9f86d0a94f8b9b66cbcb29d89dde_B_3, _Split_015a6ee9887b47abb21193d18e609740_B_3, 0, 0, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGB_5, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RG_6);
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_R_1 = float4(0,0,0,0)[0];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_G_2 = float4(0,0,0,0)[1];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_B_3 = float4(0,0,0,0)[2];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_A_4 = float4(0,0,0,0)[3];
                    float4 _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4;
                    float3 _Combine_7b79ed205a4b435d8742217505a4c51d_RGB_5;
                    float2 _Combine_7b79ed205a4b435d8742217505a4c51d_RG_6;
                    Unity_Combine_float(1, _Split_ea099c0905af42a6804ca0dc2f58dc2f_R_1, _Split_ea099c0905af42a6804ca0dc2f58dc2f_G_2, _Split_ea099c0905af42a6804ca0dc2f58dc2f_B_3, _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4, _Combine_7b79ed205a4b435d8742217505a4c51d_RGB_5, _Combine_7b79ed205a4b435d8742217505a4c51d_RG_6);
                    float2 _Property_5538a1bac07f487589432be4f79dd05e_Out_0 = SlopeRemap;
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_R_1 = _Property_5538a1bac07f487589432be4f79dd05e_Out_0[0];
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_G_2 = _Property_5538a1bac07f487589432be4f79dd05e_Out_0[1];
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_B_3 = 0;
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_A_4 = 0;
                    float _DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2;
                    Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(0, 1, 0), _DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2);
                    float _Property_795a1803a8484214b987093ec034ab6a_Out_0 = SlopePow;
                    float _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2;
                    Unity_Power_float(_DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2, _Property_795a1803a8484214b987093ec034ab6a_Out_0, _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2);
                    float _Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3;
                    Unity_Smoothstep_float(_Split_03a4c3769cad421fb634dee3fa2beefb_R_1, _Split_03a4c3769cad421fb634dee3fa2beefb_G_2, _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2, _Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3);
                    float _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1;
                    Unity_OneMinus_float(_Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3, _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1);
                    float4 _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4;
                    float3 _Combine_9702e823fbe443b4b07afb499b6912a4_RGB_5;
                    float2 _Combine_9702e823fbe443b4b07afb499b6912a4_RG_6;
                    Unity_Combine_float(_Split_ea099c0905af42a6804ca0dc2f58dc2f_A_4, _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1, 0, 0, _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4, _Combine_9702e823fbe443b4b07afb499b6912a4_RGB_5, _Combine_9702e823fbe443b4b07afb499b6912a4_RG_6);
                    float _Property_d5cf363bc21a4f92a00fac464b9b11cf_Out_0 = heightTransition;
                    float4 _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5;
                    float4 _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6;
                    HeightBlend8Layers_float(_Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4, _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4, _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4, _Property_d5cf363bc21a4f92a00fac464b9b11cf_Out_0, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6);
                    float4 _BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5);
                    float4 _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5);
                    float4 _Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5, _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5, _Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2);
                    float4 _BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5);
                    float4 _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5);
                    float4 _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5, _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5, _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2);
                    float _Split_d9a7a90627444523a2cda58b36d68116_R_1 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[0];
                    float _Split_d9a7a90627444523a2cda58b36d68116_G_2 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[1];
                    float _Split_d9a7a90627444523a2cda58b36d68116_B_3 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[2];
                    float _Split_d9a7a90627444523a2cda58b36d68116_A_4 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[3];
                    float4 _BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5);
                    float4 _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5);
                    float4 _Add_090184f4bd18493ca37179ea1a8364d0_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5, _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5, _Add_090184f4bd18493ca37179ea1a8364d0_Out_2);
                    surface.BaseColor = (_Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2.xyz);
                    surface.Emission = float3(0, 0, 0);
                    surface.Alpha = 1;
                    surface.BentNormal = IN.TangentSpaceNormal;
                    surface.Smoothness = _Split_d9a7a90627444523a2cda58b36d68116_A_4;
                    surface.Occlusion = _Split_d9a7a90627444523a2cda58b36d68116_G_2;
                    surface.NormalTS = (_Add_090184f4bd18493ca37179ea1a8364d0_Out_2.xyz);
                    surface.Metallic = _Split_d9a7a90627444523a2cda58b36d68116_R_1;
                    return surface;
                }
    
                // --------------------------------------------------
                // Build Graph Inputs
    
                SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
                {
                    SurfaceDescriptionInputs output;
                    ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
                
                    output.WorldSpaceNormal =            normalize(input.tangentToWorld[2].xyz);
                    #if defined(SHADER_STAGE_RAY_TRACING)
                    output.ObjectSpaceNormal =           mul(output.WorldSpaceNormal, (float3x3) ObjectToWorld3x4());
                    #else
                    output.ObjectSpaceNormal =           normalize(mul(output.WorldSpaceNormal, (float3x3) UNITY_MATRIX_M));           // transposed multiplication by inverse matrix to handle normal scale
                    #endif
                    output.TangentSpaceNormal =          float3(0.0f, 0.0f, 1.0f);
                    output.ObjectSpacePosition =         TransformWorldToObject(input.positionRWS);
                
                    // splice point to copy frag inputs custom interpolator pack into the SDI
                    /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
                
                    return output;
                }
                
    
                // --------------------------------------------------
                // Build Surface Data (Specific Material)
    
            void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
                {
                    ZERO_INITIALIZE(SurfaceData, surfaceData);
                
                    // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
                    // however specularOcclusion can come from the graph, so need to be init here so it can be override.
                    surfaceData.specularOcclusion = 1.0;
                
                    surfaceData.baseColor =                 surfaceDescription.BaseColor;
                    surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
                    surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
                    surfaceData.metallic =                  surfaceDescription.Metallic;
                
                    #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                        if (_EnableSSRefraction)
                        {
                
                            surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                            surfaceDescription.Alpha = 1.0;
                        }
                        else
                        {
                            surfaceData.ior = 1.0;
                            surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                            surfaceData.atDistance = 1.0;
                            surfaceData.transmittanceMask = 0.0;
                            surfaceDescription.Alpha = 1.0;
                        }
                    #else
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                    #endif
                
                    // These static material feature allow compile time optimization
                    surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
                    #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_TRANSMISSION
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_ANISOTROPY
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
                    #endif
                
                    #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                        // Require to have setup baseColor
                        // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                        surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
                    #endif
                
                    #ifdef _DOUBLESIDED_ON
                        float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                    #else
                        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                    #endif
                
                    // normal delivered to master node
                    GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
                
                    surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                
                    surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
                
                
                    #if HAVE_DECALS
                        if (_EnableDecals)
                        {
                            float alpha = 1.0;
                            alpha = surfaceDescription.Alpha;
                
                            // Both uses and modifies 'surfaceData.normalWS'.
                            DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                            ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                        }
                    #endif
                
                    bentNormalWS = surfaceData.normalWS;
                
                    surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
                
                    #ifdef DEBUG_DISPLAY
                        if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                        {
                            // TODO: need to update mip info
                            surfaceData.metallic = 0;
                        }
                
                        // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                        // as it can modify attribute use for static lighting
                        ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
                    #endif
                
                    // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
                    // If user provide bent normal then we process a better term
                    #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                        // Just use the value passed through via the slot (not active otherwise)
                    #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                        // If we have bent normal and ambient occlusion, process a specular occlusion
                        surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                    #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                        surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                    #endif
                
                    #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                        surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                    #endif
                }
                
    
                // --------------------------------------------------
                // Get Surface And BuiltinData
    
                void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
                {
                    // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                    #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                    #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                    #endif
                    #endif
    
                    #ifndef SHADER_UNLIT
                    #ifdef _DOUBLESIDED_ON
                        float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                    #else
                        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                    #endif
    
                    ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                    #endif // SHADER_UNLIT
    
                    SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
    
                    #if defined(HAVE_VFX_MODIFICATION)
                    GraphProperties properties;
                    ZERO_INITIALIZE(GraphProperties, properties);
    
                    GetElementPixelProperties(fragInputs, properties);
    
                    SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                    #else
                    SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                    #endif
    
                    // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                    // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                    #ifdef _ALPHATEST_ON
                        float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                        #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                        // The TransparentDepthPrepass is also used with SSR transparent.
                        // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                        // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                        #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                        // DepthPostpass always use its own alpha threshold
                        alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                        #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                        // If use shadow threshold isn't enable we don't allow any test
                        #endif
    
                        GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                    #endif
    
                    #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                    #endif
    
                    #ifndef SHADER_UNLIT
                    float3 bentNormalWS;
                    BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
    
                    // Builtin Data
                    // For back lighting we use the oposite vertex normal
                    InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
    
                    #else
                    BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
    
                    ZERO_INITIALIZE(BuiltinData, builtinData); // No call to InitBuiltinData as we don't have any lighting
                    builtinData.opacity = surfaceDescription.Alpha;
    
                    #if defined(DEBUG_DISPLAY)
                        // Light Layers are currently not used for the Unlit shader (because it is not lit)
                        // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                        // display in the light layers visualization mode, therefore we need the renderingLayers
                        builtinData.renderingLayers = GetMeshRenderingLightLayer();
                    #endif
    
                    #endif // SHADER_UNLIT
    
                    #ifdef _ALPHATEST_ON
                        // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                        builtinData.alphaClipTreshold = alphaCutoff;
                    #endif
    
                    // override sampleBakedGI - not used by Unlit
    
            		// If we want to force forward emissive and we have GBuffer pass, don't do anything
            		#if !(SHADERPASS == SHADERPASS_GBUFFER && defined(_FORCE_FORWARD_EMISSIVE))
                    builtinData.emissiveColor = surfaceDescription.Emission;
            		#endif
    
                    // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                    // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                    // This is a limitation of the current MRT approach.
    
                    #if _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
                    #endif
    
                    // TODO: We should generate distortion / distortionBlur for non distortion pass
                    #if (SHADERPASS == SHADERPASS_DISTORTION)
                    builtinData.distortion = surfaceDescription.Distortion;
                    builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                    #endif
    
                    #ifndef SHADER_UNLIT
                    // PostInitBuiltinData call ApplyDebugToBuiltinData
                    PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                    #else
                    ApplyDebugToBuiltinData(builtinData);
                    #endif
    
                    RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
                }
    
                // --------------------------------------------------
                // Main
    
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingForward.hlsl"
    
                // --------------------------------------------------
                // Visual Effect Vertex Invocations
    
            	#ifdef HAVE_VFX_MODIFICATION
            	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
            	#endif
    
                ENDHLSL
            }
            Pass
            {
                Name "GBufferDXR"
                Tags
                {
                    "LightMode" = "GBufferDXR"
                }
    
                // Render State
                // RenderState: <None>
    
                // Debug
                // <None>
    
                // --------------------------------------------------
                // Pass
    
                HLSLPROGRAM
    
                // Pragmas
                #pragma target 5.0
                #pragma raytracing surface_shader
                #pragma only_renderers d3d11
    
                // Keywords
                #pragma multi_compile _ MINIMAL_GBUFFER
                #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
                #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
                #pragma shader_feature_local _ _DOUBLESIDED_ON
                #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
                #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
                #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
                #pragma multi_compile _ DEBUG_DISPLAY
                #pragma shader_feature_local_fragment _ _DISABLE_DECALS
                #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
                #pragma shader_feature_local_fragment _ _DISABLE_SSR
                #pragma shader_feature_local_raytracing _ _DISABLE_SSR
                #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
                #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
                #pragma multi_compile_fragment _ LIGHTMAP_ON
                #pragma multi_compile_raytracing _ LIGHTMAP_ON
                #pragma multi_compile_fragment _ DIRLIGHTMAP_COMBINED
                #pragma multi_compile_raytracing _ DIRLIGHTMAP_COMBINED
                #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
                #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
                #pragma multi_compile _ DYNAMICLIGHTMAP_ON
                #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
                #pragma shader_feature _ _FORCE_FORWARD_EMISSIVE
                // GraphKeywords: <None>
    
                // For custom interpolators to inject a substruct definition before FragInputs definition,
                // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
                /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
    
    
                // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
            	#ifdef HAVE_VFX_MODIFICATION
            	struct FragInputsVFX
                {
                    /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
                };
                #endif
    
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
            	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
    
                // --------------------------------------------------
                // Defines
    
                // Attribute
                #define ATTRIBUTES_NEED_NORMAL
                #define ATTRIBUTES_NEED_TANGENT
                #define ATTRIBUTES_NEED_TEXCOORD1
                #define ATTRIBUTES_NEED_TEXCOORD2
                #define VARYINGS_NEED_POSITION_WS
                #define VARYINGS_NEED_TANGENT_TO_WORLD
                #define VARYINGS_NEED_TEXCOORD1
                #define VARYINGS_NEED_TEXCOORD2
    
    
    
                #define SHADERPASS SHADERPASS_RAYTRACING_GBUFFER
                #define SHADOW_LOW
                #define RAYTRACING_SHADER_GRAPH_RAYTRACED
    
    
                // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
                // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
                // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
                // to still allow us to rename the field and keyword of this node without breaking existing code.
                #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
                #endif
    
                #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
                #endif
                // end
    
                #ifndef SHADER_UNLIT
                // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
                // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
                #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                    #define VARYINGS_NEED_CULLFACE
                #endif
                #endif
    
                // Specific Material Define
            #define _AMBIENT_OCCLUSION 1
                #define _SPECULAR_OCCLUSION_FROM_AO 1
                #define _ENERGY_CONSERVING_SPECULAR 1
                
                // If we use subsurface scattering, enable output split lighting (for forward pass)
                #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
                    #define OUTPUT_SPLIT_LIGHTING
                #endif
                
                // This shader support recursive rendering for raytracing
                #define HAVE_RECURSIVE_RENDERING
                
                // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
    
                // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
                // we should have a code like this:
                // if !defined(_DISABLE_SSR_TRANSPARENT)
                // pragma multi_compile _ WRITE_NORMAL_BUFFER
                // endif
                // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
                // it based on if SSR transparent in frame settings and not (and stripper can strip it).
                // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
                // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
                // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
                #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                    #define WRITE_NORMAL_BUFFER
                #endif
                #endif
    
                #ifndef DEBUG_DISPLAY
                    // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                    // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                    #if !defined(_SURFACE_TYPE_TRANSPARENT)
                        #if SHADERPASS == SHADERPASS_FORWARD
                        #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                        #elif SHADERPASS == SHADERPASS_GBUFFER
                        #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                        #endif
                    #endif
                #endif
    
                // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
                #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                    #define _DEFERRED_CAPABLE_MATERIAL
                #endif
    
                // Translate transparent motion vector define
                #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                    #define _WRITE_TRANSPARENT_MOTION_VECTOR
                #endif
    
                // Dots Instancing
                // DotsInstancingOptions: <None>
    
                // Various properties
    
                // HybridV1InjectedBuiltinProperties: <None>
    
                // -- Graph Properties
                CBUFFER_START(UnityPerMaterial)
                float2 HeightRemap3;
                float2 HeightRemap2;
                float4 Tiling_Offset3;
                float4 Tiling_Offset0;
                float2 HeightRemap4;
                float4 Tiling_Offset2;
                float2 HeightRemap0;
                float4 LayerMask3_TexelSize;
                float4 LayerMask2_TexelSize;
                float4 LayerNormal3_TexelSize;
                float4 LayerNormal2_TexelSize;
                float2 HeightRemap1;
                float4 Tiling_Offset1;
                float4 Layer0_TexelSize;
                float4 Layer1_TexelSize;
                float4 Layer2_TexelSize;
                float4 Layer3_TexelSize;
                float UVXZScale;
                float4 LayerNormal1_TexelSize;
                float4 LayerNormal0_TexelSize;
                float4 LayerMask1_TexelSize;
                float4 LayerMask0_TexelSize;
                float heightTransition;
                float4 BaseTex_TexelSize;
                float4 BaseNormal_TexelSize;
                float4 BaseMask_TexelSize;
                float4 Tiling_Offset;
                float2 HeightRemap;
                float4 SlopeTex_TexelSize;
                float4 SlopeNormal_TexelSize;
                float4 SlopeMask_TexelSize;
                float4 Tiling_Offset4;
                float2 SlopeRemap;
                float SlopePow;
                float4 _EmissionColor;
                float _UseShadowThreshold;
                float4 _DoubleSidedConstants;
                float _BlendMode;
                float _EnableBlendModePreserveSpecularLighting;
                float _RayTracing;
                float _RefractionModel;
                CBUFFER_END
                
                // Object and Global properties
                SAMPLER(SamplerState_Linear_Repeat);
                TEXTURE2D(LayerMask3);
                SAMPLER(samplerLayerMask3);
                TEXTURE2D(LayerMask2);
                SAMPLER(samplerLayerMask2);
                TEXTURE2D(LayerNormal3);
                SAMPLER(samplerLayerNormal3);
                TEXTURE2D(LayerNormal2);
                SAMPLER(samplerLayerNormal2);
                TEXTURE2D(Layer0);
                SAMPLER(samplerLayer0);
                TEXTURE2D(Layer1);
                SAMPLER(samplerLayer1);
                TEXTURE2D(Layer2);
                SAMPLER(samplerLayer2);
                TEXTURE2D(Layer3);
                SAMPLER(samplerLayer3);
                TEXTURE2D(LayerNormal1);
                SAMPLER(samplerLayerNormal1);
                TEXTURE2D(LayerNormal0);
                SAMPLER(samplerLayerNormal0);
                TEXTURE2D(LayerMask1);
                SAMPLER(samplerLayerMask1);
                TEXTURE2D(LayerMask0);
                SAMPLER(samplerLayerMask0);
                TEXTURE2D(BaseTex);
                SAMPLER(samplerBaseTex);
                TEXTURE2D(BaseNormal);
                SAMPLER(samplerBaseNormal);
                TEXTURE2D(BaseMask);
                SAMPLER(samplerBaseMask);
                TEXTURE2D(SlopeTex);
                SAMPLER(samplerSlopeTex);
                TEXTURE2D(SlopeNormal);
                SAMPLER(samplerSlopeNormal);
                TEXTURE2D(SlopeMask);
                SAMPLER(samplerSlopeMask);
    
                // -- Property used by ScenePickingPass
                #ifdef SCENEPICKINGPASS
                float4 _SelectionID;
                #endif
    
                // -- Properties used by SceneSelectionPass
                #ifdef SCENESELECTIONPASS
                int _ObjectId;
                int _PassValue;
                #endif
    
                // Includes
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/Deferred/RaytracingIntersectonGBuffer.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/StandardLit/StandardLit.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRaytracing.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
            	#include "Assets/Shaders/TerrainShading/HeightBlend.hlsl"
    
                // --------------------------------------------------
                // Structs and Packing
    
                struct SurfaceDescriptionInputs
                {
                     float3 ObjectSpaceNormal;
                     float3 WorldSpaceNormal;
                     float3 TangentSpaceNormal;
                     float3 ObjectSpacePosition;
                };
    
                //Interpolator Packs: <None>
    
                // --------------------------------------------------
                // Graph
    
    
                // Graph Functions
                
                void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
                {
                    RGBA = float4(R, G, B, A);
                    RGB = float3(R, G, B);
                    RG = float2(R, G);
                }
                
                void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
                {
                    Out = A / B;
                }
                
                void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
                {
                    Out = UV * Tiling + Offset;
                }
                
                struct Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float
                {
                };
                
                void SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(float4 Tiling_Offset, float2 Vector2, Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float IN, out float2 OutVector2_1)
                {
                    float2 _Property_5ea954dbdecc454b839a01badac3afd6_Out_0 = Vector2;
                    float4 _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0 = Tiling_Offset;
                    float _Split_c19978cb25c5413eaf23432179b0e3af_R_1 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[0];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_G_2 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[1];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_B_3 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[2];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_A_4 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[3];
                    float4 _Combine_387ca93b6841454bad52ea2f221d199f_RGBA_4;
                    float3 _Combine_387ca93b6841454bad52ea2f221d199f_RGB_5;
                    float2 _Combine_387ca93b6841454bad52ea2f221d199f_RG_6;
                    Unity_Combine_float(_Split_c19978cb25c5413eaf23432179b0e3af_R_1, _Split_c19978cb25c5413eaf23432179b0e3af_G_2, 0, 0, _Combine_387ca93b6841454bad52ea2f221d199f_RGBA_4, _Combine_387ca93b6841454bad52ea2f221d199f_RGB_5, _Combine_387ca93b6841454bad52ea2f221d199f_RG_6);
                    float4 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGBA_4;
                    float3 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGB_5;
                    float2 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6;
                    Unity_Combine_float(_Split_c19978cb25c5413eaf23432179b0e3af_B_3, _Split_c19978cb25c5413eaf23432179b0e3af_A_4, 0, 0, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGBA_4, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGB_5, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6);
                    float2 _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3;
                    Unity_TilingAndOffset_float(_Property_5ea954dbdecc454b839a01badac3afd6_Out_0, _Combine_387ca93b6841454bad52ea2f221d199f_RG_6, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6, _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3);
                    OutVector2_1 = _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3;
                }
                
                void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
                {
                    Out = A * B;
                }
                
                void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
                {
                    Out = A * B;
                }
                
                void Desaturate_float(float3 oldcolor, float k, out float3 newcolor){
                    float intensity = dot(oldcolor,float3(0.3,0.59,0.11));
                    newcolor.x = intensity*k + oldcolor.x*(1-k);
                    newcolor.y = intensity*k + oldcolor.y*(1-k);
                    newcolor.z = intensity*k + oldcolor.z*(1-k);
                }
                
                void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
                {
                    Out = A * B;
                }
                
                void Unity_Lerp_float(float A, float B, float T, out float Out)
                {
                    Out = lerp(A, B, T);
                }
                
                struct Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float
                {
                };
                
                void SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(UnityTexture2D Albedo, UnityTexture2D Normal, UnityTexture2D Mask, float DesaturationK, float BrightnessAtten, float2 UV, float2 HeightRemap, Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float IN, out float4 oAlbedo_0, out float4 oNormal_1, out float4 oMask_2)
                {
                    UnityTexture2D _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0 = Albedo;
                    float2 _Property_76ed35a32977448f8ea254bf6de06d33_Out_0 = UV;
                    float4 _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_R_4 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.r;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_G_5 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.g;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_B_6 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.b;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_A_7 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.a;
                    float _Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0 = BrightnessAtten;
                    float4 _Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2);
                    float _Float_f48d9dc0c16249fe8fe5b97c86e7f56c_Out_0 = -0.25;
                    float2 _Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2;
                    Unity_Multiply_float2_float2(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0, (_Float_f48d9dc0c16249fe8fe5b97c86e7f56c_Out_0.xx), _Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2);
                    float4 _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_R_4 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.r;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_G_5 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.g;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_B_6 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.b;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_A_7 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.a;
                    float4 _Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2);
                    float _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0 = DesaturationK;
                    float3 _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1;
                    Desaturate_float((_Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1);
                    float3 _Multiply_410af5ac81154a3aab73254ac228eccd_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2.xyz), _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1, _Multiply_410af5ac81154a3aab73254ac228eccd_Out_2);
                    UnityTexture2D _Property_d05972164bdd4e0189593b8dae00db03_Out_0 = Normal;
                    float4 _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0 = SAMPLE_TEXTURE2D(_Property_d05972164bdd4e0189593b8dae00db03_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d05972164bdd4e0189593b8dae00db03_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0);
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_R_4 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.r;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_G_5 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.g;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_B_6 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.b;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_A_7 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.a;
                    float4 _Multiply_4999f90cbd1848acaf20b253953c0963_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_4999f90cbd1848acaf20b253953c0963_Out_2);
                    float4 _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_d05972164bdd4e0189593b8dae00db03_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d05972164bdd4e0189593b8dae00db03_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0);
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_R_4 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.r;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_G_5 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.g;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_B_6 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.b;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_A_7 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.a;
                    float4 _Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2);
                    float3 _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1;
                    Desaturate_float((_Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1);
                    float3 _Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_4999f90cbd1848acaf20b253953c0963_Out_2.xyz), _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1, _Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2);
                    UnityTexture2D _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0 = Mask;
                    float4 _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0 = SAMPLE_TEXTURE2D(_Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_R_4 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.r;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_G_5 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.g;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_B_6 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.b;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_A_7 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.a;
                    float4 _Multiply_0b2356625aad40439a89b8519e36e62b_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_0b2356625aad40439a89b8519e36e62b_Out_2);
                    float4 _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0 = SAMPLE_TEXTURE2D(_Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_R_4 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.r;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_G_5 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.g;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_B_6 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.b;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_A_7 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.a;
                    float4 _Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2);
                    float3 _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1;
                    Desaturate_float((_Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1);
                    float3 _Multiply_3c8f32d2a057478e869493099765b841_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_0b2356625aad40439a89b8519e36e62b_Out_2.xyz), _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1, _Multiply_3c8f32d2a057478e869493099765b841_Out_2);
                    float _Split_77de2b1a3326407b985f625d91e2063b_R_1 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[0];
                    float _Split_77de2b1a3326407b985f625d91e2063b_G_2 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[1];
                    float _Split_77de2b1a3326407b985f625d91e2063b_B_3 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[2];
                    float _Split_77de2b1a3326407b985f625d91e2063b_A_4 = 0;
                    float2 _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0 = HeightRemap;
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_R_1 = _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0[0];
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_G_2 = _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0[1];
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_B_3 = 0;
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_A_4 = 0;
                    float _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3;
                    Unity_Lerp_float(_Split_0df13f6921fe4db99b01dcff93c3b978_R_1, _Split_0df13f6921fe4db99b01dcff93c3b978_G_2, _Split_77de2b1a3326407b985f625d91e2063b_B_3, _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3);
                    float4 _Combine_17dba591e95443299750f53a93613083_RGBA_4;
                    float3 _Combine_17dba591e95443299750f53a93613083_RGB_5;
                    float2 _Combine_17dba591e95443299750f53a93613083_RG_6;
                    Unity_Combine_float(_Split_77de2b1a3326407b985f625d91e2063b_R_1, _Split_77de2b1a3326407b985f625d91e2063b_G_2, _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3, _Split_77de2b1a3326407b985f625d91e2063b_A_4, _Combine_17dba591e95443299750f53a93613083_RGBA_4, _Combine_17dba591e95443299750f53a93613083_RGB_5, _Combine_17dba591e95443299750f53a93613083_RG_6);
                    oAlbedo_0 = (float4(_Multiply_410af5ac81154a3aab73254ac228eccd_Out_2, 1.0));
                    oNormal_1 = (float4(_Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2, 1.0));
                    oMask_2 = _Combine_17dba591e95443299750f53a93613083_RGBA_4;
                }
                
                void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
                {
                    Out = dot(A, B);
                }
                
                void Unity_Power_float(float A, float B, out float Out)
                {
                    Out = pow(A, B);
                }
                
                void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
                {
                    Out = smoothstep(Edge1, Edge2, In);
                }
                
                void Unity_OneMinus_float(float In, out float Out)
                {
                    Out = 1 - In;
                }
                
                void BlendByMask_float(float4 a, float4 b, float4 c, float4 d, float4 blend, out float4 ret){
                    ret = a*blend.x + b*blend.y + c*blend.z + d*blend.w;
                }
                
                void Unity_Add_float4(float4 A, float4 B, out float4 Out)
                {
                    Out = A + B;
                }
    
                // Graph Vertex
                // GraphVertex: <None>
    
                // Graph Pixel
                struct SurfaceDescription
                {
                    float3 BaseColor;
                    float3 Emission;
                    float Alpha;
                    float3 BentNormal;
                    float Smoothness;
                    float Occlusion;
                    float3 NormalTS;
                    float Metallic;
                };
                
                SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
                {
                    SurfaceDescription surface = (SurfaceDescription)0;
                    UnityTexture2D _Property_4e780cffb4044909a58e26eaff6361d1_Out_0 = UnityBuildTexture2DStructNoScale(BaseTex);
                    UnityTexture2D _Property_20a5bc7358e64fe8b3327adb9ce635ea_Out_0 = UnityBuildTexture2DStructNoScale(BaseNormal);
                    UnityTexture2D _Property_090d521163b9493189233a9f2e1cf5ed_Out_0 = UnityBuildTexture2DStructNoScale(BaseMask);
                    float4 _Property_6881ae016d754988b27811b95cc834ca_Out_0 = Tiling_Offset;
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_R_1 = IN.ObjectSpacePosition[0];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_G_2 = IN.ObjectSpacePosition[1];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_B_3 = IN.ObjectSpacePosition[2];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_A_4 = 0;
                    float4 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGBA_4;
                    float3 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGB_5;
                    float2 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6;
                    Unity_Combine_float(_Split_3335daa3a4b34f69a62c9c8a1c6f39b2_R_1, _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_B_3, 0, 0, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGBA_4, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGB_5, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6);
                    float _Property_8984e4bf1c26459280f9fece3c52167c_Out_0 = UVXZScale;
                    float2 _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2;
                    Unity_Divide_float2(_Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6, (_Property_8984e4bf1c26459280f9fece3c52167c_Out_0.xx), _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2);
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_737be3819d2c4f29853810a18717cae3;
                    float2 _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_6881ae016d754988b27811b95cc834ca_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1);
                    float2 _Property_dcc00367280c4dc6b11a52aa07754830_Out_0 = HeightRemap;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_6722d68456e84aecb015a07880cbbd46;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_4e780cffb4044909a58e26eaff6361d1_Out_0, _Property_20a5bc7358e64fe8b3327adb9ce635ea_Out_0, _Property_090d521163b9493189233a9f2e1cf5ed_Out_0, 0.25, 4, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1, _Property_dcc00367280c4dc6b11a52aa07754830_Out_0, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2);
                    UnityTexture2D _Property_3d7142ef79234a0ba6cda49555992a80_Out_0 = UnityBuildTexture2DStructNoScale(Layer0);
                    UnityTexture2D _Property_42e52c243a994f04944481ff3627fc2c_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal0);
                    UnityTexture2D _Property_e67647d6cf1b44bebf91845a255b522c_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask0);
                    float4 _Property_4e6c66ba03a842e482f7040c3fe163dc_Out_0 = Tiling_Offset0;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674;
                    float2 _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_4e6c66ba03a842e482f7040c3fe163dc_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1);
                    float2 _Property_8cf19c3a22e64f0a85a51c8cbf5085e7_Out_0 = HeightRemap0;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_3d7142ef79234a0ba6cda49555992a80_Out_0, _Property_42e52c243a994f04944481ff3627fc2c_Out_0, _Property_e67647d6cf1b44bebf91845a255b522c_Out_0, 0.25, 4, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1, _Property_8cf19c3a22e64f0a85a51c8cbf5085e7_Out_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2);
                    UnityTexture2D _Property_1bce6ca387e847e1a43a4534686b655f_Out_0 = UnityBuildTexture2DStructNoScale(Layer1);
                    UnityTexture2D _Property_1e7513acda3b4b20a5a028d0da4bcfb0_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal1);
                    UnityTexture2D _Property_75d4521a27cb403399759cefa7be71f2_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask1);
                    float4 _Property_e17bf3be22544a639340ddea65766b89_Out_0 = Tiling_Offset1;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_df825eb885d947429ce6daf495a641a7;
                    float2 _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_e17bf3be22544a639340ddea65766b89_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1);
                    float2 _Property_d682537de1054cf4b1eddd1680d152fb_Out_0 = HeightRemap1;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_1bce6ca387e847e1a43a4534686b655f_Out_0, _Property_1e7513acda3b4b20a5a028d0da4bcfb0_Out_0, _Property_75d4521a27cb403399759cefa7be71f2_Out_0, 0.25, 4, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1, _Property_d682537de1054cf4b1eddd1680d152fb_Out_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2);
                    UnityTexture2D _Property_b79fba6b5b1f40b88b38803dad2bb2e5_Out_0 = UnityBuildTexture2DStructNoScale(Layer2);
                    UnityTexture2D _Property_a787f1642c6d4570af8ae47ea63a59ed_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal2);
                    UnityTexture2D _Property_f4ae055a87ef48cb8df5c603ca6f72b0_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask2);
                    float4 _Property_e12db1a96427478999d081afcb59d771_Out_0 = Tiling_Offset2;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d;
                    float2 _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_e12db1a96427478999d081afcb59d771_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1);
                    float2 _Property_3be82515dad24d76b9af558757032f30_Out_0 = HeightRemap2;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_b79fba6b5b1f40b88b38803dad2bb2e5_Out_0, _Property_a787f1642c6d4570af8ae47ea63a59ed_Out_0, _Property_f4ae055a87ef48cb8df5c603ca6f72b0_Out_0, 0.25, 4, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1, _Property_3be82515dad24d76b9af558757032f30_Out_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2);
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_R_1 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[0];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_G_2 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[1];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_B_3 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[2];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_A_4 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[3];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_R_1 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[0];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_G_2 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[1];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_B_3 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[2];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_A_4 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[3];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_R_1 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[0];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_G_2 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[1];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_B_3 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[2];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_A_4 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[3];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_R_1 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[0];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_G_2 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[1];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_B_3 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[2];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_A_4 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[3];
                    float4 _Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4;
                    float3 _Combine_f97595cb40654c9a8d82c0297e7280f3_RGB_5;
                    float2 _Combine_f97595cb40654c9a8d82c0297e7280f3_RG_6;
                    Unity_Combine_float(_Split_d81e33a0495c4ac09042d2d39dd09ba5_B_3, _Split_d2ed4cee74e042da88b7348fcfe80cab_B_3, _Split_b3522eb5287e4b28baab87cc1fa16589_B_3, _Split_a4f15428b23a40ef8f25398e9cff2d7c_B_3, _Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4, _Combine_f97595cb40654c9a8d82c0297e7280f3_RGB_5, _Combine_f97595cb40654c9a8d82c0297e7280f3_RG_6);
                    UnityTexture2D _Property_8e8b4d9a2dfc42148eb69519397ecebc_Out_0 = UnityBuildTexture2DStructNoScale(Layer3);
                    UnityTexture2D _Property_1443e12ec6544d2c8e8dcc71d67adb04_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal3);
                    UnityTexture2D _Property_b8f1cfb1112b4d2e8e2fe919f5003fb3_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask3);
                    float4 _Property_d9e7ba461b95446db56c0b99fce9de5d_Out_0 = Tiling_Offset3;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13;
                    float2 _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_d9e7ba461b95446db56c0b99fce9de5d_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1);
                    float2 _Property_e5d43ace4a66401faff3165675d44af0_Out_0 = HeightRemap3;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_8e8b4d9a2dfc42148eb69519397ecebc_Out_0, _Property_1443e12ec6544d2c8e8dcc71d67adb04_Out_0, _Property_b8f1cfb1112b4d2e8e2fe919f5003fb3_Out_0, 0.25, 4, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1, _Property_e5d43ace4a66401faff3165675d44af0_Out_0, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2);
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_R_1 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[0];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_G_2 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[1];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_B_3 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[2];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_A_4 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[3];
                    UnityTexture2D _Property_edf497c59ff340a5897695b2e8e9ed68_Out_0 = UnityBuildTexture2DStructNoScale(SlopeTex);
                    UnityTexture2D _Property_ae03f8d1bb284168ae1cb40c2c8d7dce_Out_0 = UnityBuildTexture2DStructNoScale(SlopeNormal);
                    UnityTexture2D _Property_35050279a32b481b878853831820cb33_Out_0 = UnityBuildTexture2DStructNoScale(SlopeMask);
                    float4 _Property_a3c340f0d1f647858c0d27fc6fa0d127_Out_0 = Tiling_Offset4;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67;
                    float2 _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_a3c340f0d1f647858c0d27fc6fa0d127_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1);
                    float2 _Property_8a3f864a5b9c469b92480bb635123790_Out_0 = HeightRemap4;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_edf497c59ff340a5897695b2e8e9ed68_Out_0, _Property_ae03f8d1bb284168ae1cb40c2c8d7dce_Out_0, _Property_35050279a32b481b878853831820cb33_Out_0, 0.25, 4, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1, _Property_8a3f864a5b9c469b92480bb635123790_Out_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2);
                    float _Split_015a6ee9887b47abb21193d18e609740_R_1 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[0];
                    float _Split_015a6ee9887b47abb21193d18e609740_G_2 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[1];
                    float _Split_015a6ee9887b47abb21193d18e609740_B_3 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[2];
                    float _Split_015a6ee9887b47abb21193d18e609740_A_4 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[3];
                    float4 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4;
                    float3 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGB_5;
                    float2 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RG_6;
                    Unity_Combine_float(_Split_d87c9f86d0a94f8b9b66cbcb29d89dde_B_3, _Split_015a6ee9887b47abb21193d18e609740_B_3, 0, 0, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGB_5, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RG_6);
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_R_1 = float4(0,0,0,0)[0];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_G_2 = float4(0,0,0,0)[1];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_B_3 = float4(0,0,0,0)[2];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_A_4 = float4(0,0,0,0)[3];
                    float4 _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4;
                    float3 _Combine_7b79ed205a4b435d8742217505a4c51d_RGB_5;
                    float2 _Combine_7b79ed205a4b435d8742217505a4c51d_RG_6;
                    Unity_Combine_float(1, _Split_ea099c0905af42a6804ca0dc2f58dc2f_R_1, _Split_ea099c0905af42a6804ca0dc2f58dc2f_G_2, _Split_ea099c0905af42a6804ca0dc2f58dc2f_B_3, _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4, _Combine_7b79ed205a4b435d8742217505a4c51d_RGB_5, _Combine_7b79ed205a4b435d8742217505a4c51d_RG_6);
                    float2 _Property_5538a1bac07f487589432be4f79dd05e_Out_0 = SlopeRemap;
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_R_1 = _Property_5538a1bac07f487589432be4f79dd05e_Out_0[0];
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_G_2 = _Property_5538a1bac07f487589432be4f79dd05e_Out_0[1];
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_B_3 = 0;
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_A_4 = 0;
                    float _DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2;
                    Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(0, 1, 0), _DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2);
                    float _Property_795a1803a8484214b987093ec034ab6a_Out_0 = SlopePow;
                    float _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2;
                    Unity_Power_float(_DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2, _Property_795a1803a8484214b987093ec034ab6a_Out_0, _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2);
                    float _Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3;
                    Unity_Smoothstep_float(_Split_03a4c3769cad421fb634dee3fa2beefb_R_1, _Split_03a4c3769cad421fb634dee3fa2beefb_G_2, _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2, _Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3);
                    float _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1;
                    Unity_OneMinus_float(_Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3, _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1);
                    float4 _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4;
                    float3 _Combine_9702e823fbe443b4b07afb499b6912a4_RGB_5;
                    float2 _Combine_9702e823fbe443b4b07afb499b6912a4_RG_6;
                    Unity_Combine_float(_Split_ea099c0905af42a6804ca0dc2f58dc2f_A_4, _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1, 0, 0, _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4, _Combine_9702e823fbe443b4b07afb499b6912a4_RGB_5, _Combine_9702e823fbe443b4b07afb499b6912a4_RG_6);
                    float _Property_d5cf363bc21a4f92a00fac464b9b11cf_Out_0 = heightTransition;
                    float4 _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5;
                    float4 _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6;
                    HeightBlend8Layers_float(_Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4, _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4, _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4, _Property_d5cf363bc21a4f92a00fac464b9b11cf_Out_0, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6);
                    float4 _BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5);
                    float4 _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5);
                    float4 _Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5, _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5, _Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2);
                    float4 _BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5);
                    float4 _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5);
                    float4 _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5, _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5, _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2);
                    float _Split_d9a7a90627444523a2cda58b36d68116_R_1 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[0];
                    float _Split_d9a7a90627444523a2cda58b36d68116_G_2 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[1];
                    float _Split_d9a7a90627444523a2cda58b36d68116_B_3 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[2];
                    float _Split_d9a7a90627444523a2cda58b36d68116_A_4 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[3];
                    float4 _BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5);
                    float4 _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5);
                    float4 _Add_090184f4bd18493ca37179ea1a8364d0_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5, _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5, _Add_090184f4bd18493ca37179ea1a8364d0_Out_2);
                    surface.BaseColor = (_Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2.xyz);
                    surface.Emission = float3(0, 0, 0);
                    surface.Alpha = 1;
                    surface.BentNormal = IN.TangentSpaceNormal;
                    surface.Smoothness = _Split_d9a7a90627444523a2cda58b36d68116_A_4;
                    surface.Occlusion = _Split_d9a7a90627444523a2cda58b36d68116_G_2;
                    surface.NormalTS = (_Add_090184f4bd18493ca37179ea1a8364d0_Out_2.xyz);
                    surface.Metallic = _Split_d9a7a90627444523a2cda58b36d68116_R_1;
                    return surface;
                }
    
                // --------------------------------------------------
                // Build Graph Inputs
    
                SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
                {
                    SurfaceDescriptionInputs output;
                    ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
                
                    output.WorldSpaceNormal =            normalize(input.tangentToWorld[2].xyz);
                    #if defined(SHADER_STAGE_RAY_TRACING)
                    output.ObjectSpaceNormal =           mul(output.WorldSpaceNormal, (float3x3) ObjectToWorld3x4());
                    #else
                    output.ObjectSpaceNormal =           normalize(mul(output.WorldSpaceNormal, (float3x3) UNITY_MATRIX_M));           // transposed multiplication by inverse matrix to handle normal scale
                    #endif
                    output.TangentSpaceNormal =          float3(0.0f, 0.0f, 1.0f);
                    output.ObjectSpacePosition =         TransformWorldToObject(input.positionRWS);
                
                    // splice point to copy frag inputs custom interpolator pack into the SDI
                    /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
                
                    return output;
                }
                
    
                // --------------------------------------------------
                // Build Surface Data (Specific Material)
    
            void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
                {
                    ZERO_INITIALIZE(SurfaceData, surfaceData);
                
                    // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
                    // however specularOcclusion can come from the graph, so need to be init here so it can be override.
                    surfaceData.specularOcclusion = 1.0;
                
                    surfaceData.baseColor =                 surfaceDescription.BaseColor;
                    surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
                    surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
                    surfaceData.metallic =                  surfaceDescription.Metallic;
                
                    #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                        if (_EnableSSRefraction)
                        {
                
                            surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                            surfaceDescription.Alpha = 1.0;
                        }
                        else
                        {
                            surfaceData.ior = 1.0;
                            surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                            surfaceData.atDistance = 1.0;
                            surfaceData.transmittanceMask = 0.0;
                            surfaceDescription.Alpha = 1.0;
                        }
                    #else
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                    #endif
                
                    // These static material feature allow compile time optimization
                    surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
                    #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_TRANSMISSION
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_ANISOTROPY
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
                    #endif
                
                    #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                        // Require to have setup baseColor
                        // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                        surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
                    #endif
                
                    #ifdef _DOUBLESIDED_ON
                        float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                    #else
                        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                    #endif
                
                    // normal delivered to master node
                    GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
                
                    surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                
                    surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
                
                
                    #if HAVE_DECALS
                        if (_EnableDecals)
                        {
                            float alpha = 1.0;
                            alpha = surfaceDescription.Alpha;
                
                            // Both uses and modifies 'surfaceData.normalWS'.
                            DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                            ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                        }
                    #endif
                
                    bentNormalWS = surfaceData.normalWS;
                
                    surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
                
                    #ifdef DEBUG_DISPLAY
                        if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                        {
                            // TODO: need to update mip info
                            surfaceData.metallic = 0;
                        }
                
                        // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                        // as it can modify attribute use for static lighting
                        ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
                    #endif
                
                    // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
                    // If user provide bent normal then we process a better term
                    #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                        // Just use the value passed through via the slot (not active otherwise)
                    #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                        // If we have bent normal and ambient occlusion, process a specular occlusion
                        surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                    #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                        surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                    #endif
                
                    #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                        surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                    #endif
                }
                
    
                // --------------------------------------------------
                // Get Surface And BuiltinData
    
                void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
                {
                    // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                    #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                    #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                    #endif
                    #endif
    
                    #ifndef SHADER_UNLIT
                    #ifdef _DOUBLESIDED_ON
                        float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                    #else
                        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                    #endif
    
                    ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                    #endif // SHADER_UNLIT
    
                    SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
    
                    #if defined(HAVE_VFX_MODIFICATION)
                    GraphProperties properties;
                    ZERO_INITIALIZE(GraphProperties, properties);
    
                    GetElementPixelProperties(fragInputs, properties);
    
                    SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                    #else
                    SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                    #endif
    
                    // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                    // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                    #ifdef _ALPHATEST_ON
                        float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                        #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                        // The TransparentDepthPrepass is also used with SSR transparent.
                        // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                        // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                        #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                        // DepthPostpass always use its own alpha threshold
                        alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                        #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                        // If use shadow threshold isn't enable we don't allow any test
                        #endif
    
                        GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                    #endif
    
                    #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                    #endif
    
                    #ifndef SHADER_UNLIT
                    float3 bentNormalWS;
                    BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
    
                    // Builtin Data
                    // For back lighting we use the oposite vertex normal
                    InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
    
                    #else
                    BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
    
                    ZERO_INITIALIZE(BuiltinData, builtinData); // No call to InitBuiltinData as we don't have any lighting
                    builtinData.opacity = surfaceDescription.Alpha;
    
                    #if defined(DEBUG_DISPLAY)
                        // Light Layers are currently not used for the Unlit shader (because it is not lit)
                        // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                        // display in the light layers visualization mode, therefore we need the renderingLayers
                        builtinData.renderingLayers = GetMeshRenderingLightLayer();
                    #endif
    
                    #endif // SHADER_UNLIT
    
                    #ifdef _ALPHATEST_ON
                        // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                        builtinData.alphaClipTreshold = alphaCutoff;
                    #endif
    
                    // override sampleBakedGI - not used by Unlit
    
            		// If we want to force forward emissive and we have GBuffer pass, don't do anything
            		#if !(SHADERPASS == SHADERPASS_GBUFFER && defined(_FORCE_FORWARD_EMISSIVE))
                    builtinData.emissiveColor = surfaceDescription.Emission;
            		#endif
    
                    // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                    // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                    // This is a limitation of the current MRT approach.
    
                    #if _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
                    #endif
    
                    // TODO: We should generate distortion / distortionBlur for non distortion pass
                    #if (SHADERPASS == SHADERPASS_DISTORTION)
                    builtinData.distortion = surfaceDescription.Distortion;
                    builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                    #endif
    
                    #ifndef SHADER_UNLIT
                    // PostInitBuiltinData call ApplyDebugToBuiltinData
                    PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                    #else
                    ApplyDebugToBuiltinData(builtinData);
                    #endif
    
                    RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
                }
    
                // --------------------------------------------------
                // Main
    
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingGBuffer.hlsl"
    
                // --------------------------------------------------
                // Visual Effect Vertex Invocations
    
            	#ifdef HAVE_VFX_MODIFICATION
            	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
            	#endif
    
                ENDHLSL
            }
            Pass
            {
                Name "PathTracingDXR"
                Tags
                {
                    "LightMode" = "PathTracingDXR"
                }
    
                // Render State
                // RenderState: <None>
    
                // Debug
                // <None>
    
                // --------------------------------------------------
                // Pass
    
                HLSLPROGRAM
    
                // Pragmas
                #pragma target 5.0
                #pragma raytracing surface_shader
                #pragma only_renderers d3d11
    
                // Keywords
                #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
                #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
                #pragma shader_feature_local _ _DOUBLESIDED_ON
                #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
                #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
                #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
                #pragma shader_feature_local_fragment _ _DISABLE_DECALS
                #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
                #pragma shader_feature_local_fragment _ _DISABLE_SSR
                #pragma shader_feature_local_raytracing _ _DISABLE_SSR
                #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
                #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
                #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
                #pragma shader_feature _ _FORCE_FORWARD_EMISSIVE
                // GraphKeywords: <None>
    
                // For custom interpolators to inject a substruct definition before FragInputs definition,
                // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
                /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
    
    
                // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
            	#ifdef HAVE_VFX_MODIFICATION
            	struct FragInputsVFX
                {
                    /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
                };
                #endif
    
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
            	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
                #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
    
                // --------------------------------------------------
                // Defines
    
                // Attribute
                #define ATTRIBUTES_NEED_NORMAL
                #define ATTRIBUTES_NEED_TANGENT
                #define ATTRIBUTES_NEED_TEXCOORD1
                #define ATTRIBUTES_NEED_TEXCOORD2
                #define VARYINGS_NEED_POSITION_WS
                #define VARYINGS_NEED_TANGENT_TO_WORLD
                #define VARYINGS_NEED_TEXCOORD1
                #define VARYINGS_NEED_TEXCOORD2
    
    
    
                #define SHADERPASS SHADERPASS_PATH_TRACING
                #define SHADOW_LOW
                #define RAYTRACING_SHADER_GRAPH_DEFAULT
                #define HAS_LIGHTLOOP 1
    
    
                // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
                // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
                // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
                // to still allow us to rename the field and keyword of this node without breaking existing code.
                #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
                #endif
    
                #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
                #endif
                // end
    
                #ifndef SHADER_UNLIT
                // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
                // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
                #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                    #define VARYINGS_NEED_CULLFACE
                #endif
                #endif
    
                // Specific Material Define
            #define _AMBIENT_OCCLUSION 1
                #define _SPECULAR_OCCLUSION_FROM_AO 1
                #define _ENERGY_CONSERVING_SPECULAR 1
                
                // If we use subsurface scattering, enable output split lighting (for forward pass)
                #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
                    #define OUTPUT_SPLIT_LIGHTING
                #endif
                
                // This shader support recursive rendering for raytracing
                #define HAVE_RECURSIVE_RENDERING
                
                // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
    
                // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
                // we should have a code like this:
                // if !defined(_DISABLE_SSR_TRANSPARENT)
                // pragma multi_compile _ WRITE_NORMAL_BUFFER
                // endif
                // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
                // it based on if SSR transparent in frame settings and not (and stripper can strip it).
                // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
                // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
                // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
                #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                    #define WRITE_NORMAL_BUFFER
                #endif
                #endif
    
                #ifndef DEBUG_DISPLAY
                    // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                    // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                    #if !defined(_SURFACE_TYPE_TRANSPARENT)
                        #if SHADERPASS == SHADERPASS_FORWARD
                        #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                        #elif SHADERPASS == SHADERPASS_GBUFFER
                        #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                        #endif
                    #endif
                #endif
    
                // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
                #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                    #define _DEFERRED_CAPABLE_MATERIAL
                #endif
    
                // Translate transparent motion vector define
                #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                    #define _WRITE_TRANSPARENT_MOTION_VECTOR
                #endif
    
                // Dots Instancing
                // DotsInstancingOptions: <None>
    
                // Various properties
    
                // HybridV1InjectedBuiltinProperties: <None>
    
                // -- Graph Properties
                CBUFFER_START(UnityPerMaterial)
                float2 HeightRemap3;
                float2 HeightRemap2;
                float4 Tiling_Offset3;
                float4 Tiling_Offset0;
                float2 HeightRemap4;
                float4 Tiling_Offset2;
                float2 HeightRemap0;
                float4 LayerMask3_TexelSize;
                float4 LayerMask2_TexelSize;
                float4 LayerNormal3_TexelSize;
                float4 LayerNormal2_TexelSize;
                float2 HeightRemap1;
                float4 Tiling_Offset1;
                float4 Layer0_TexelSize;
                float4 Layer1_TexelSize;
                float4 Layer2_TexelSize;
                float4 Layer3_TexelSize;
                float UVXZScale;
                float4 LayerNormal1_TexelSize;
                float4 LayerNormal0_TexelSize;
                float4 LayerMask1_TexelSize;
                float4 LayerMask0_TexelSize;
                float heightTransition;
                float4 BaseTex_TexelSize;
                float4 BaseNormal_TexelSize;
                float4 BaseMask_TexelSize;
                float4 Tiling_Offset;
                float2 HeightRemap;
                float4 SlopeTex_TexelSize;
                float4 SlopeNormal_TexelSize;
                float4 SlopeMask_TexelSize;
                float4 Tiling_Offset4;
                float2 SlopeRemap;
                float SlopePow;
                float4 _EmissionColor;
                float _UseShadowThreshold;
                float4 _DoubleSidedConstants;
                float _BlendMode;
                float _EnableBlendModePreserveSpecularLighting;
                float _RayTracing;
                float _RefractionModel;
                CBUFFER_END
                
                // Object and Global properties
                SAMPLER(SamplerState_Linear_Repeat);
                TEXTURE2D(LayerMask3);
                SAMPLER(samplerLayerMask3);
                TEXTURE2D(LayerMask2);
                SAMPLER(samplerLayerMask2);
                TEXTURE2D(LayerNormal3);
                SAMPLER(samplerLayerNormal3);
                TEXTURE2D(LayerNormal2);
                SAMPLER(samplerLayerNormal2);
                TEXTURE2D(Layer0);
                SAMPLER(samplerLayer0);
                TEXTURE2D(Layer1);
                SAMPLER(samplerLayer1);
                TEXTURE2D(Layer2);
                SAMPLER(samplerLayer2);
                TEXTURE2D(Layer3);
                SAMPLER(samplerLayer3);
                TEXTURE2D(LayerNormal1);
                SAMPLER(samplerLayerNormal1);
                TEXTURE2D(LayerNormal0);
                SAMPLER(samplerLayerNormal0);
                TEXTURE2D(LayerMask1);
                SAMPLER(samplerLayerMask1);
                TEXTURE2D(LayerMask0);
                SAMPLER(samplerLayerMask0);
                TEXTURE2D(BaseTex);
                SAMPLER(samplerBaseTex);
                TEXTURE2D(BaseNormal);
                SAMPLER(samplerBaseNormal);
                TEXTURE2D(BaseMask);
                SAMPLER(samplerBaseMask);
                TEXTURE2D(SlopeTex);
                SAMPLER(samplerSlopeTex);
                TEXTURE2D(SlopeNormal);
                SAMPLER(samplerSlopeNormal);
                TEXTURE2D(SlopeMask);
                SAMPLER(samplerSlopeMask);
    
                // -- Property used by ScenePickingPass
                #ifdef SCENEPICKINGPASS
                float4 _SelectionID;
                #endif
    
                // -- Properties used by SceneSelectionPass
                #ifdef SCENESELECTIONPASS
                int _ObjectId;
                int _PassValue;
                #endif
    
                // Includes
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitPathTracing.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
            	#include "Assets/Shaders/TerrainShading/HeightBlend.hlsl"
    
                // --------------------------------------------------
                // Structs and Packing
    
                struct SurfaceDescriptionInputs
                {
                     float3 ObjectSpaceNormal;
                     float3 WorldSpaceNormal;
                     float3 TangentSpaceNormal;
                     float3 ObjectSpacePosition;
                };
    
                //Interpolator Packs: <None>
    
                // --------------------------------------------------
                // Graph
    
    
                // Graph Functions
                
                void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
                {
                    RGBA = float4(R, G, B, A);
                    RGB = float3(R, G, B);
                    RG = float2(R, G);
                }
                
                void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
                {
                    Out = A / B;
                }
                
                void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
                {
                    Out = UV * Tiling + Offset;
                }
                
                struct Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float
                {
                };
                
                void SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(float4 Tiling_Offset, float2 Vector2, Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float IN, out float2 OutVector2_1)
                {
                    float2 _Property_5ea954dbdecc454b839a01badac3afd6_Out_0 = Vector2;
                    float4 _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0 = Tiling_Offset;
                    float _Split_c19978cb25c5413eaf23432179b0e3af_R_1 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[0];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_G_2 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[1];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_B_3 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[2];
                    float _Split_c19978cb25c5413eaf23432179b0e3af_A_4 = _Property_b18c282417f347c1af8f38b5f654b4b6_Out_0[3];
                    float4 _Combine_387ca93b6841454bad52ea2f221d199f_RGBA_4;
                    float3 _Combine_387ca93b6841454bad52ea2f221d199f_RGB_5;
                    float2 _Combine_387ca93b6841454bad52ea2f221d199f_RG_6;
                    Unity_Combine_float(_Split_c19978cb25c5413eaf23432179b0e3af_R_1, _Split_c19978cb25c5413eaf23432179b0e3af_G_2, 0, 0, _Combine_387ca93b6841454bad52ea2f221d199f_RGBA_4, _Combine_387ca93b6841454bad52ea2f221d199f_RGB_5, _Combine_387ca93b6841454bad52ea2f221d199f_RG_6);
                    float4 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGBA_4;
                    float3 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGB_5;
                    float2 _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6;
                    Unity_Combine_float(_Split_c19978cb25c5413eaf23432179b0e3af_B_3, _Split_c19978cb25c5413eaf23432179b0e3af_A_4, 0, 0, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGBA_4, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RGB_5, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6);
                    float2 _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3;
                    Unity_TilingAndOffset_float(_Property_5ea954dbdecc454b839a01badac3afd6_Out_0, _Combine_387ca93b6841454bad52ea2f221d199f_RG_6, _Combine_9b9acc5ec5784a2ebb59e9766a4d6611_RG_6, _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3);
                    OutVector2_1 = _TilingAndOffset_f5df3a95340743d887ea873aa22e7dcc_Out_3;
                }
                
                void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
                {
                    Out = A * B;
                }
                
                void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
                {
                    Out = A * B;
                }
                
                void Desaturate_float(float3 oldcolor, float k, out float3 newcolor){
                    float intensity = dot(oldcolor,float3(0.3,0.59,0.11));
                    newcolor.x = intensity*k + oldcolor.x*(1-k);
                    newcolor.y = intensity*k + oldcolor.y*(1-k);
                    newcolor.z = intensity*k + oldcolor.z*(1-k);
                }
                
                void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
                {
                    Out = A * B;
                }
                
                void Unity_Lerp_float(float A, float B, float T, out float Out)
                {
                    Out = lerp(A, B, T);
                }
                
                struct Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float
                {
                };
                
                void SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(UnityTexture2D Albedo, UnityTexture2D Normal, UnityTexture2D Mask, float DesaturationK, float BrightnessAtten, float2 UV, float2 HeightRemap, Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float IN, out float4 oAlbedo_0, out float4 oNormal_1, out float4 oMask_2)
                {
                    UnityTexture2D _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0 = Albedo;
                    float2 _Property_76ed35a32977448f8ea254bf6de06d33_Out_0 = UV;
                    float4 _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_R_4 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.r;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_G_5 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.g;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_B_6 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.b;
                    float _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_A_7 = _SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0.a;
                    float _Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0 = BrightnessAtten;
                    float4 _Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_c7e8848272ce4e52a886574366e7e97c_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2);
                    float _Float_f48d9dc0c16249fe8fe5b97c86e7f56c_Out_0 = -0.25;
                    float2 _Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2;
                    Unity_Multiply_float2_float2(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0, (_Float_f48d9dc0c16249fe8fe5b97c86e7f56c_Out_0.xx), _Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2);
                    float4 _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_e57f45f96b4d473e8ca04815c51c3c98_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_R_4 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.r;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_G_5 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.g;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_B_6 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.b;
                    float _SampleTexture2D_133fa48563d54788bd960140808fb92f_A_7 = _SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0.a;
                    float4 _Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_133fa48563d54788bd960140808fb92f_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2);
                    float _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0 = DesaturationK;
                    float3 _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1;
                    Desaturate_float((_Multiply_fec1923d33c64012bdf535d07cea1eda_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1);
                    float3 _Multiply_410af5ac81154a3aab73254ac228eccd_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_abb06d2ac5e34151ac3aa2f6c647aa50_Out_2.xyz), _DesaturateCustomFunction_b70cebe19d93456a8729e85cf6c28724_newcolor_1, _Multiply_410af5ac81154a3aab73254ac228eccd_Out_2);
                    UnityTexture2D _Property_d05972164bdd4e0189593b8dae00db03_Out_0 = Normal;
                    float4 _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0 = SAMPLE_TEXTURE2D(_Property_d05972164bdd4e0189593b8dae00db03_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d05972164bdd4e0189593b8dae00db03_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0);
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_R_4 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.r;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_G_5 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.g;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_B_6 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.b;
                    float _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_A_7 = _SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0.a;
                    float4 _Multiply_4999f90cbd1848acaf20b253953c0963_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_d4b612c7e6a546a8a1992c5111f1f042_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_4999f90cbd1848acaf20b253953c0963_Out_2);
                    float4 _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_d05972164bdd4e0189593b8dae00db03_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_d05972164bdd4e0189593b8dae00db03_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0);
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_R_4 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.r;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_G_5 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.g;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_B_6 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.b;
                    float _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_A_7 = _SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0.a;
                    float4 _Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_2e1bbcdf0e70405fab099533d7aba79c_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2);
                    float3 _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1;
                    Desaturate_float((_Multiply_b58ef0081a3e4a03b9102f2fbb760673_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1);
                    float3 _Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_4999f90cbd1848acaf20b253953c0963_Out_2.xyz), _DesaturateCustomFunction_d9a1daa690a64ef38b6ad39075d3d74b_newcolor_1, _Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2);
                    UnityTexture2D _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0 = Mask;
                    float4 _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0 = SAMPLE_TEXTURE2D(_Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.GetTransformedUV(_Property_76ed35a32977448f8ea254bf6de06d33_Out_0));
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_R_4 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.r;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_G_5 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.g;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_B_6 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.b;
                    float _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_A_7 = _SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0.a;
                    float4 _Multiply_0b2356625aad40439a89b8519e36e62b_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_a0615d17c2c04fdfa2fbd3461c33115f_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_0b2356625aad40439a89b8519e36e62b_Out_2);
                    float4 _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0 = SAMPLE_TEXTURE2D(_Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.tex, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat).samplerstate, _Property_8f6eaefcea0a41418d7d77bd1b28691f_Out_0.GetTransformedUV(_Multiply_bcc513e1e2194516a7febf8756335bc8_Out_2));
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_R_4 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.r;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_G_5 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.g;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_B_6 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.b;
                    float _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_A_7 = _SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0.a;
                    float4 _Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2;
                    Unity_Multiply_float4_float4(_SampleTexture2D_7c06dc468dc149d7b9a12e2949432c6e_RGBA_0, (_Property_de070b1fd3b8429fbaaa5b608a6c17c2_Out_0.xxxx), _Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2);
                    float3 _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1;
                    Desaturate_float((_Multiply_cf3273208d724fb6b2edba67fcf81d49_Out_2.xyz), _Property_50fb2f745ec74270bdbd977323f8d1ac_Out_0, _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1);
                    float3 _Multiply_3c8f32d2a057478e869493099765b841_Out_2;
                    Unity_Multiply_float3_float3((_Multiply_0b2356625aad40439a89b8519e36e62b_Out_2.xyz), _DesaturateCustomFunction_0281e76f375544daaac666b1be038287_newcolor_1, _Multiply_3c8f32d2a057478e869493099765b841_Out_2);
                    float _Split_77de2b1a3326407b985f625d91e2063b_R_1 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[0];
                    float _Split_77de2b1a3326407b985f625d91e2063b_G_2 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[1];
                    float _Split_77de2b1a3326407b985f625d91e2063b_B_3 = _Multiply_3c8f32d2a057478e869493099765b841_Out_2[2];
                    float _Split_77de2b1a3326407b985f625d91e2063b_A_4 = 0;
                    float2 _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0 = HeightRemap;
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_R_1 = _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0[0];
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_G_2 = _Property_42e0dbf0b5724459ba8a2d053d1d7c0d_Out_0[1];
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_B_3 = 0;
                    float _Split_0df13f6921fe4db99b01dcff93c3b978_A_4 = 0;
                    float _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3;
                    Unity_Lerp_float(_Split_0df13f6921fe4db99b01dcff93c3b978_R_1, _Split_0df13f6921fe4db99b01dcff93c3b978_G_2, _Split_77de2b1a3326407b985f625d91e2063b_B_3, _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3);
                    float4 _Combine_17dba591e95443299750f53a93613083_RGBA_4;
                    float3 _Combine_17dba591e95443299750f53a93613083_RGB_5;
                    float2 _Combine_17dba591e95443299750f53a93613083_RG_6;
                    Unity_Combine_float(_Split_77de2b1a3326407b985f625d91e2063b_R_1, _Split_77de2b1a3326407b985f625d91e2063b_G_2, _Lerp_661e65909c854ff0bcf8d535408f20ca_Out_3, _Split_77de2b1a3326407b985f625d91e2063b_A_4, _Combine_17dba591e95443299750f53a93613083_RGBA_4, _Combine_17dba591e95443299750f53a93613083_RGB_5, _Combine_17dba591e95443299750f53a93613083_RG_6);
                    oAlbedo_0 = (float4(_Multiply_410af5ac81154a3aab73254ac228eccd_Out_2, 1.0));
                    oNormal_1 = (float4(_Multiply_f9a818dbf1f74c7fa48202887cfa5199_Out_2, 1.0));
                    oMask_2 = _Combine_17dba591e95443299750f53a93613083_RGBA_4;
                }
                
                void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
                {
                    Out = dot(A, B);
                }
                
                void Unity_Power_float(float A, float B, out float Out)
                {
                    Out = pow(A, B);
                }
                
                void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
                {
                    Out = smoothstep(Edge1, Edge2, In);
                }
                
                void Unity_OneMinus_float(float In, out float Out)
                {
                    Out = 1 - In;
                }
                
                void BlendByMask_float(float4 a, float4 b, float4 c, float4 d, float4 blend, out float4 ret){
                    ret = a*blend.x + b*blend.y + c*blend.z + d*blend.w;
                }
                
                void Unity_Add_float4(float4 A, float4 B, out float4 Out)
                {
                    Out = A + B;
                }
    
                // Graph Vertex
                // GraphVertex: <None>
    
                // Graph Pixel
                struct SurfaceDescription
                {
                    float3 BaseColor;
                    float3 Emission;
                    float Alpha;
                    float3 BentNormal;
                    float Smoothness;
                    float Occlusion;
                    float3 NormalTS;
                    float Metallic;
                };
                
                SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
                {
                    SurfaceDescription surface = (SurfaceDescription)0;
                    UnityTexture2D _Property_4e780cffb4044909a58e26eaff6361d1_Out_0 = UnityBuildTexture2DStructNoScale(BaseTex);
                    UnityTexture2D _Property_20a5bc7358e64fe8b3327adb9ce635ea_Out_0 = UnityBuildTexture2DStructNoScale(BaseNormal);
                    UnityTexture2D _Property_090d521163b9493189233a9f2e1cf5ed_Out_0 = UnityBuildTexture2DStructNoScale(BaseMask);
                    float4 _Property_6881ae016d754988b27811b95cc834ca_Out_0 = Tiling_Offset;
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_R_1 = IN.ObjectSpacePosition[0];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_G_2 = IN.ObjectSpacePosition[1];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_B_3 = IN.ObjectSpacePosition[2];
                    float _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_A_4 = 0;
                    float4 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGBA_4;
                    float3 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGB_5;
                    float2 _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6;
                    Unity_Combine_float(_Split_3335daa3a4b34f69a62c9c8a1c6f39b2_R_1, _Split_3335daa3a4b34f69a62c9c8a1c6f39b2_B_3, 0, 0, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGBA_4, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RGB_5, _Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6);
                    float _Property_8984e4bf1c26459280f9fece3c52167c_Out_0 = UVXZScale;
                    float2 _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2;
                    Unity_Divide_float2(_Combine_e64bd4e93e924df29096b2b8cd45ebf2_RG_6, (_Property_8984e4bf1c26459280f9fece3c52167c_Out_0.xx), _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2);
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_737be3819d2c4f29853810a18717cae3;
                    float2 _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_6881ae016d754988b27811b95cc834ca_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1);
                    float2 _Property_dcc00367280c4dc6b11a52aa07754830_Out_0 = HeightRemap;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_6722d68456e84aecb015a07880cbbd46;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1;
                    float4 _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_4e780cffb4044909a58e26eaff6361d1_Out_0, _Property_20a5bc7358e64fe8b3327adb9ce635ea_Out_0, _Property_090d521163b9493189233a9f2e1cf5ed_Out_0, 0.25, 4, _CustomTilingOffset_737be3819d2c4f29853810a18717cae3_OutVector2_1, _Property_dcc00367280c4dc6b11a52aa07754830_Out_0, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1, _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2);
                    UnityTexture2D _Property_3d7142ef79234a0ba6cda49555992a80_Out_0 = UnityBuildTexture2DStructNoScale(Layer0);
                    UnityTexture2D _Property_42e52c243a994f04944481ff3627fc2c_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal0);
                    UnityTexture2D _Property_e67647d6cf1b44bebf91845a255b522c_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask0);
                    float4 _Property_4e6c66ba03a842e482f7040c3fe163dc_Out_0 = Tiling_Offset0;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674;
                    float2 _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_4e6c66ba03a842e482f7040c3fe163dc_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1);
                    float2 _Property_8cf19c3a22e64f0a85a51c8cbf5085e7_Out_0 = HeightRemap0;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1;
                    float4 _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_3d7142ef79234a0ba6cda49555992a80_Out_0, _Property_42e52c243a994f04944481ff3627fc2c_Out_0, _Property_e67647d6cf1b44bebf91845a255b522c_Out_0, 0.25, 4, _CustomTilingOffset_1c48064b1b714db1b60e2ed1fc156674_OutVector2_1, _Property_8cf19c3a22e64f0a85a51c8cbf5085e7_Out_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2);
                    UnityTexture2D _Property_1bce6ca387e847e1a43a4534686b655f_Out_0 = UnityBuildTexture2DStructNoScale(Layer1);
                    UnityTexture2D _Property_1e7513acda3b4b20a5a028d0da4bcfb0_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal1);
                    UnityTexture2D _Property_75d4521a27cb403399759cefa7be71f2_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask1);
                    float4 _Property_e17bf3be22544a639340ddea65766b89_Out_0 = Tiling_Offset1;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_df825eb885d947429ce6daf495a641a7;
                    float2 _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_e17bf3be22544a639340ddea65766b89_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1);
                    float2 _Property_d682537de1054cf4b1eddd1680d152fb_Out_0 = HeightRemap1;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1;
                    float4 _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_1bce6ca387e847e1a43a4534686b655f_Out_0, _Property_1e7513acda3b4b20a5a028d0da4bcfb0_Out_0, _Property_75d4521a27cb403399759cefa7be71f2_Out_0, 0.25, 4, _CustomTilingOffset_df825eb885d947429ce6daf495a641a7_OutVector2_1, _Property_d682537de1054cf4b1eddd1680d152fb_Out_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2);
                    UnityTexture2D _Property_b79fba6b5b1f40b88b38803dad2bb2e5_Out_0 = UnityBuildTexture2DStructNoScale(Layer2);
                    UnityTexture2D _Property_a787f1642c6d4570af8ae47ea63a59ed_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal2);
                    UnityTexture2D _Property_f4ae055a87ef48cb8df5c603ca6f72b0_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask2);
                    float4 _Property_e12db1a96427478999d081afcb59d771_Out_0 = Tiling_Offset2;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d;
                    float2 _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_e12db1a96427478999d081afcb59d771_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1);
                    float2 _Property_3be82515dad24d76b9af558757032f30_Out_0 = HeightRemap2;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1;
                    float4 _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_b79fba6b5b1f40b88b38803dad2bb2e5_Out_0, _Property_a787f1642c6d4570af8ae47ea63a59ed_Out_0, _Property_f4ae055a87ef48cb8df5c603ca6f72b0_Out_0, 0.25, 4, _CustomTilingOffset_390cd59f795a4e3e947aa3108bf2a03d_OutVector2_1, _Property_3be82515dad24d76b9af558757032f30_Out_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2);
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_R_1 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[0];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_G_2 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[1];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_B_3 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[2];
                    float _Split_d81e33a0495c4ac09042d2d39dd09ba5_A_4 = _MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2[3];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_R_1 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[0];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_G_2 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[1];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_B_3 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[2];
                    float _Split_d2ed4cee74e042da88b7348fcfe80cab_A_4 = _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2[3];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_R_1 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[0];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_G_2 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[1];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_B_3 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[2];
                    float _Split_b3522eb5287e4b28baab87cc1fa16589_A_4 = _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2[3];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_R_1 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[0];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_G_2 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[1];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_B_3 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[2];
                    float _Split_a4f15428b23a40ef8f25398e9cff2d7c_A_4 = _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2[3];
                    float4 _Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4;
                    float3 _Combine_f97595cb40654c9a8d82c0297e7280f3_RGB_5;
                    float2 _Combine_f97595cb40654c9a8d82c0297e7280f3_RG_6;
                    Unity_Combine_float(_Split_d81e33a0495c4ac09042d2d39dd09ba5_B_3, _Split_d2ed4cee74e042da88b7348fcfe80cab_B_3, _Split_b3522eb5287e4b28baab87cc1fa16589_B_3, _Split_a4f15428b23a40ef8f25398e9cff2d7c_B_3, _Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4, _Combine_f97595cb40654c9a8d82c0297e7280f3_RGB_5, _Combine_f97595cb40654c9a8d82c0297e7280f3_RG_6);
                    UnityTexture2D _Property_8e8b4d9a2dfc42148eb69519397ecebc_Out_0 = UnityBuildTexture2DStructNoScale(Layer3);
                    UnityTexture2D _Property_1443e12ec6544d2c8e8dcc71d67adb04_Out_0 = UnityBuildTexture2DStructNoScale(LayerNormal3);
                    UnityTexture2D _Property_b8f1cfb1112b4d2e8e2fe919f5003fb3_Out_0 = UnityBuildTexture2DStructNoScale(LayerMask3);
                    float4 _Property_d9e7ba461b95446db56c0b99fce9de5d_Out_0 = Tiling_Offset3;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13;
                    float2 _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_d9e7ba461b95446db56c0b99fce9de5d_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1);
                    float2 _Property_e5d43ace4a66401faff3165675d44af0_Out_0 = HeightRemap3;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1;
                    float4 _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_8e8b4d9a2dfc42148eb69519397ecebc_Out_0, _Property_1443e12ec6544d2c8e8dcc71d67adb04_Out_0, _Property_b8f1cfb1112b4d2e8e2fe919f5003fb3_Out_0, 0.25, 4, _CustomTilingOffset_a5aac78d3fe9442680c8e431d18cab13_OutVector2_1, _Property_e5d43ace4a66401faff3165675d44af0_Out_0, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1, _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2);
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_R_1 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[0];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_G_2 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[1];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_B_3 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[2];
                    float _Split_d87c9f86d0a94f8b9b66cbcb29d89dde_A_4 = _MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2[3];
                    UnityTexture2D _Property_edf497c59ff340a5897695b2e8e9ed68_Out_0 = UnityBuildTexture2DStructNoScale(SlopeTex);
                    UnityTexture2D _Property_ae03f8d1bb284168ae1cb40c2c8d7dce_Out_0 = UnityBuildTexture2DStructNoScale(SlopeNormal);
                    UnityTexture2D _Property_35050279a32b481b878853831820cb33_Out_0 = UnityBuildTexture2DStructNoScale(SlopeMask);
                    float4 _Property_a3c340f0d1f647858c0d27fc6fa0d127_Out_0 = Tiling_Offset4;
                    Bindings_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67;
                    float2 _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1;
                    SG_CustomTilingOffset_6a6c7a50303d22e43abb5e448b78c7d0_float(_Property_a3c340f0d1f647858c0d27fc6fa0d127_Out_0, _Divide_2b19f4036ccd4361a63d4aef253b5c58_Out_2, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1);
                    float2 _Property_8a3f864a5b9c469b92480bb635123790_Out_0 = HeightRemap4;
                    Bindings_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1;
                    float4 _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2;
                    SG_MixTilingTextures_44b255d3a43b5f447b855b96acd5e319_float(_Property_edf497c59ff340a5897695b2e8e9ed68_Out_0, _Property_ae03f8d1bb284168ae1cb40c2c8d7dce_Out_0, _Property_35050279a32b481b878853831820cb33_Out_0, 0.25, 4, _CustomTilingOffset_109e6840a73b48f1a9a7c0b4f934cb67_OutVector2_1, _Property_8a3f864a5b9c469b92480bb635123790_Out_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2);
                    float _Split_015a6ee9887b47abb21193d18e609740_R_1 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[0];
                    float _Split_015a6ee9887b47abb21193d18e609740_G_2 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[1];
                    float _Split_015a6ee9887b47abb21193d18e609740_B_3 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[2];
                    float _Split_015a6ee9887b47abb21193d18e609740_A_4 = _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2[3];
                    float4 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4;
                    float3 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGB_5;
                    float2 _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RG_6;
                    Unity_Combine_float(_Split_d87c9f86d0a94f8b9b66cbcb29d89dde_B_3, _Split_015a6ee9887b47abb21193d18e609740_B_3, 0, 0, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGB_5, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RG_6);
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_R_1 = float4(0,0,0,0)[0];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_G_2 = float4(0,0,0,0)[1];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_B_3 = float4(0,0,0,0)[2];
                    float _Split_ea099c0905af42a6804ca0dc2f58dc2f_A_4 = float4(0,0,0,0)[3];
                    float4 _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4;
                    float3 _Combine_7b79ed205a4b435d8742217505a4c51d_RGB_5;
                    float2 _Combine_7b79ed205a4b435d8742217505a4c51d_RG_6;
                    Unity_Combine_float(1, _Split_ea099c0905af42a6804ca0dc2f58dc2f_R_1, _Split_ea099c0905af42a6804ca0dc2f58dc2f_G_2, _Split_ea099c0905af42a6804ca0dc2f58dc2f_B_3, _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4, _Combine_7b79ed205a4b435d8742217505a4c51d_RGB_5, _Combine_7b79ed205a4b435d8742217505a4c51d_RG_6);
                    float2 _Property_5538a1bac07f487589432be4f79dd05e_Out_0 = SlopeRemap;
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_R_1 = _Property_5538a1bac07f487589432be4f79dd05e_Out_0[0];
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_G_2 = _Property_5538a1bac07f487589432be4f79dd05e_Out_0[1];
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_B_3 = 0;
                    float _Split_03a4c3769cad421fb634dee3fa2beefb_A_4 = 0;
                    float _DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2;
                    Unity_DotProduct_float3(IN.ObjectSpaceNormal, float3(0, 1, 0), _DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2);
                    float _Property_795a1803a8484214b987093ec034ab6a_Out_0 = SlopePow;
                    float _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2;
                    Unity_Power_float(_DotProduct_7f168438d89b4c6fae786d708f1d94c5_Out_2, _Property_795a1803a8484214b987093ec034ab6a_Out_0, _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2);
                    float _Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3;
                    Unity_Smoothstep_float(_Split_03a4c3769cad421fb634dee3fa2beefb_R_1, _Split_03a4c3769cad421fb634dee3fa2beefb_G_2, _Power_15ee1f71e8934fa0b9054cc69a7f3fe4_Out_2, _Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3);
                    float _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1;
                    Unity_OneMinus_float(_Smoothstep_1ce5f4e68ed5445291459b0a6c4a06af_Out_3, _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1);
                    float4 _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4;
                    float3 _Combine_9702e823fbe443b4b07afb499b6912a4_RGB_5;
                    float2 _Combine_9702e823fbe443b4b07afb499b6912a4_RG_6;
                    Unity_Combine_float(_Split_ea099c0905af42a6804ca0dc2f58dc2f_A_4, _OneMinus_8f0ccea8e65a475d9059e48f1ce617fb_Out_1, 0, 0, _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4, _Combine_9702e823fbe443b4b07afb499b6912a4_RGB_5, _Combine_9702e823fbe443b4b07afb499b6912a4_RG_6);
                    float _Property_d5cf363bc21a4f92a00fac464b9b11cf_Out_0 = heightTransition;
                    float4 _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5;
                    float4 _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6;
                    HeightBlend8Layers_float(_Combine_f97595cb40654c9a8d82c0297e7280f3_RGBA_4, _Combine_1887eb37e15e42f8a9d2cafa19fc75cb_RGBA_4, _Combine_7b79ed205a4b435d8742217505a4c51d_RGBA_4, _Combine_9702e823fbe443b4b07afb499b6912a4_RGBA_4, _Property_d5cf363bc21a4f92a00fac464b9b11cf_Out_0, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6);
                    float4 _BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oAlbedo_0, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oAlbedo_0, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oAlbedo_0, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oAlbedo_0, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5);
                    float4 _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oAlbedo_0, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oAlbedo_0, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5);
                    float4 _Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_95c13ad63d2145eaa7f90093216c224c_ret_5, _BlendByMaskCustomFunction_132fd343a0b746e7b2737b1f11d68055_ret_5, _Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2);
                    float4 _BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oMask_2, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oMask_2, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oMask_2, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oMask_2, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5);
                    float4 _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oMask_2, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oMask_2, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5);
                    float4 _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_1d49f11942d8429db5a31b60fd3aa8bd_ret_5, _BlendByMaskCustomFunction_eea14fbf1e3d4631a18b6c860fa1784f_ret_5, _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2);
                    float _Split_d9a7a90627444523a2cda58b36d68116_R_1 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[0];
                    float _Split_d9a7a90627444523a2cda58b36d68116_G_2 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[1];
                    float _Split_d9a7a90627444523a2cda58b36d68116_B_3 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[2];
                    float _Split_d9a7a90627444523a2cda58b36d68116_A_4 = _Add_aceb6d3e1ed64e2fb0b37dbc546b2a9b_Out_2[3];
                    float4 _BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5;
                    BlendByMask_float(_MixTilingTextures_6722d68456e84aecb015a07880cbbd46_oNormal_1, _MixTilingTextures_86c40a84cf1f44419d1a762ccaadadbf_oNormal_1, _MixTilingTextures_adead3ceb5be40539455e4e15f5a9105_oNormal_1, _MixTilingTextures_ded334d48eb640febb5e731dbc9cfb4c_oNormal_1, _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights_5, _BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5);
                    float4 _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5;
                    BlendByMask_float(_MixTilingTextures_010508f406d1486b8d0e39f8c2c8cb3a_oNormal_1, _MixTilingTextures_9b4ee3790509451cb1b0382f81b872f2_oNormal_1, float4 (0, 0, 0, 0), float4 (0, 0, 0, 0), _HeightBlend8LayersCustomFunction_941ab2e7238a4afaa9ff5368ea507c1b_outWeights1_6, _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5);
                    float4 _Add_090184f4bd18493ca37179ea1a8364d0_Out_2;
                    Unity_Add_float4(_BlendByMaskCustomFunction_fb277dd361594e7f992d2a765c9f8f36_ret_5, _BlendByMaskCustomFunction_22b690ec92bb49839819765c2451b399_ret_5, _Add_090184f4bd18493ca37179ea1a8364d0_Out_2);
                    surface.BaseColor = (_Add_9d4ef6388a8f4dc39574a9592532cb3c_Out_2.xyz);
                    surface.Emission = float3(0, 0, 0);
                    surface.Alpha = 1;
                    surface.BentNormal = IN.TangentSpaceNormal;
                    surface.Smoothness = _Split_d9a7a90627444523a2cda58b36d68116_A_4;
                    surface.Occlusion = _Split_d9a7a90627444523a2cda58b36d68116_G_2;
                    surface.NormalTS = (_Add_090184f4bd18493ca37179ea1a8364d0_Out_2.xyz);
                    surface.Metallic = _Split_d9a7a90627444523a2cda58b36d68116_R_1;
                    return surface;
                }
    
                // --------------------------------------------------
                // Build Graph Inputs
    
                SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
                {
                    SurfaceDescriptionInputs output;
                    ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
                
                    output.WorldSpaceNormal =            normalize(input.tangentToWorld[2].xyz);
                    #if defined(SHADER_STAGE_RAY_TRACING)
                    output.ObjectSpaceNormal =           mul(output.WorldSpaceNormal, (float3x3) ObjectToWorld3x4());
                    #else
                    output.ObjectSpaceNormal =           normalize(mul(output.WorldSpaceNormal, (float3x3) UNITY_MATRIX_M));           // transposed multiplication by inverse matrix to handle normal scale
                    #endif
                    output.TangentSpaceNormal =          float3(0.0f, 0.0f, 1.0f);
                    output.ObjectSpacePosition =         TransformWorldToObject(input.positionRWS);
                
                    // splice point to copy frag inputs custom interpolator pack into the SDI
                    /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
                
                    return output;
                }
                
    
                // --------------------------------------------------
                // Build Surface Data (Specific Material)
    
            void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
                {
                    ZERO_INITIALIZE(SurfaceData, surfaceData);
                
                    // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
                    // however specularOcclusion can come from the graph, so need to be init here so it can be override.
                    surfaceData.specularOcclusion = 1.0;
                
                    surfaceData.baseColor =                 surfaceDescription.BaseColor;
                    surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
                    surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
                    surfaceData.metallic =                  surfaceDescription.Metallic;
                
                    #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                        if (_EnableSSRefraction)
                        {
                
                            surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                            surfaceDescription.Alpha = 1.0;
                        }
                        else
                        {
                            surfaceData.ior = 1.0;
                            surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                            surfaceData.atDistance = 1.0;
                            surfaceData.transmittanceMask = 0.0;
                            surfaceDescription.Alpha = 1.0;
                        }
                    #else
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                    #endif
                
                    // These static material feature allow compile time optimization
                    surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
                    #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_TRANSMISSION
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_ANISOTROPY
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
                    #endif
                
                    #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                        surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
                    #endif
                
                    #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                        // Require to have setup baseColor
                        // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                        surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
                    #endif
                
                    #ifdef _DOUBLESIDED_ON
                        float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                    #else
                        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                    #endif
                
                    // normal delivered to master node
                    GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
                
                    surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                
                    surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
                
                
                    #if HAVE_DECALS
                        if (_EnableDecals)
                        {
                            float alpha = 1.0;
                            alpha = surfaceDescription.Alpha;
                
                            // Both uses and modifies 'surfaceData.normalWS'.
                            DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                            ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                        }
                    #endif
                
                    bentNormalWS = surfaceData.normalWS;
                
                    surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
                
                    #ifdef DEBUG_DISPLAY
                        if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                        {
                            // TODO: need to update mip info
                            surfaceData.metallic = 0;
                        }
                
                        // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                        // as it can modify attribute use for static lighting
                        ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
                    #endif
                
                    // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
                    // If user provide bent normal then we process a better term
                    #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                        // Just use the value passed through via the slot (not active otherwise)
                    #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                        // If we have bent normal and ambient occlusion, process a specular occlusion
                        surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                    #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                        surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                    #endif
                
                    #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                        surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                    #endif
                }
                
    
                // --------------------------------------------------
                // Get Surface And BuiltinData
    
                void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
                {
                    // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                    #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                    #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                    #endif
                    #endif
    
                    #ifndef SHADER_UNLIT
                    #ifdef _DOUBLESIDED_ON
                        float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                    #else
                        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                    #endif
    
                    ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                    #endif // SHADER_UNLIT
    
                    SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
    
                    #if defined(HAVE_VFX_MODIFICATION)
                    GraphProperties properties;
                    ZERO_INITIALIZE(GraphProperties, properties);
    
                    GetElementPixelProperties(fragInputs, properties);
    
                    SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                    #else
                    SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                    #endif
    
                    // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                    // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                    #ifdef _ALPHATEST_ON
                        float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                        #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                        // The TransparentDepthPrepass is also used with SSR transparent.
                        // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                        // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                        #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                        // DepthPostpass always use its own alpha threshold
                        alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                        #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                        // If use shadow threshold isn't enable we don't allow any test
                        #endif
    
                        GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                    #endif
    
                    #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                    #endif
    
                    #ifndef SHADER_UNLIT
                    float3 bentNormalWS;
                    BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
    
                    // Builtin Data
                    // For back lighting we use the oposite vertex normal
                    InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
    
                    #else
                    BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
    
                    ZERO_INITIALIZE(BuiltinData, builtinData); // No call to InitBuiltinData as we don't have any lighting
                    builtinData.opacity = surfaceDescription.Alpha;
    
                    #if defined(DEBUG_DISPLAY)
                        // Light Layers are currently not used for the Unlit shader (because it is not lit)
                        // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                        // display in the light layers visualization mode, therefore we need the renderingLayers
                        builtinData.renderingLayers = GetMeshRenderingLightLayer();
                    #endif
    
                    #endif // SHADER_UNLIT
    
                    #ifdef _ALPHATEST_ON
                        // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                        builtinData.alphaClipTreshold = alphaCutoff;
                    #endif
    
                    // override sampleBakedGI - not used by Unlit
    
            		// If we want to force forward emissive and we have GBuffer pass, don't do anything
            		#if !(SHADERPASS == SHADERPASS_GBUFFER && defined(_FORCE_FORWARD_EMISSIVE))
                    builtinData.emissiveColor = surfaceDescription.Emission;
            		#endif
    
                    // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                    // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                    // This is a limitation of the current MRT approach.
    
                    #if _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
                    #endif
    
                    // TODO: We should generate distortion / distortionBlur for non distortion pass
                    #if (SHADERPASS == SHADERPASS_DISTORTION)
                    builtinData.distortion = surfaceDescription.Distortion;
                    builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                    #endif
    
                    #ifndef SHADER_UNLIT
                    // PostInitBuiltinData call ApplyDebugToBuiltinData
                    PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                    #else
                    ApplyDebugToBuiltinData(builtinData);
                    #endif
    
                    RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
                }
    
                // --------------------------------------------------
                // Main
    
                #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassPathTracing.hlsl"
    
                // --------------------------------------------------
                // Visual Effect Vertex Invocations
    
            	#ifdef HAVE_VFX_MODIFICATION
            	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
            	#endif
    
                ENDHLSL
            }
        }
    }